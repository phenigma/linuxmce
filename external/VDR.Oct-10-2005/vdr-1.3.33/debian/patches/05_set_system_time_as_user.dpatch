#! /bin/sh /usr/share/dpatch/dpatch-run

## 05_set_system_time_as_user.dpatch by Ludwig Nussel <ludwig.nussel@gmx.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Allow vdr to be run as a normal user, but keep the capability 
## DP: to set the system-time by vdr.

@DPATCH@
diff -urNad vdr-1.3.25/Makefile /tmp/dpep.6f25Et/vdr-1.3.25/Makefile
--- vdr-1.3.25/Makefile	2005-05-31 14:09:22.490646536 +0200
+++ /tmp/dpep.6f25Et/vdr-1.3.25/Makefile	2005-05-31 14:11:43.003285368 +0200
@@ -18,7 +18,7 @@
 LSIDIR   = ./libsi
 MANDIR   = /usr/local/man
 BINDIR   = /usr/local/bin
-LIBS     = -ljpeg -lpthread -ldl
+LIBS     = -ljpeg -lpthread -ldl -lcap
 INCLUDES =
 
 PLUGINDIR= ./PLUGINS
diff -urNad vdr-1.3.25/vdr.c /tmp/dpep.6f25Et/vdr-1.3.25/vdr.c
--- vdr-1.3.25/vdr.c	2005-05-31 14:09:22.479648208 +0200
+++ /tmp/dpep.6f25Et/vdr-1.3.25/vdr.c	2005-05-31 14:09:22.795600176 +0200
@@ -31,6 +31,10 @@
 #include <stdlib.h>
 #include <termios.h>
 #include <unistd.h>
+#include <pwd.h>
+#include <grp.h>
+#include <sys/capability.h>
+#include <sys/prctl.h>
 #include "audio.h"
 #include "channels.h"
 #include "config.h"
@@ -85,6 +89,96 @@
   exit(1);
 }
 
+// switch user and group uid
+// taken from startproc by Werner Fink
+static int su(const char* username, const char* groupname)
+{
+  gid_t ngid = 0;
+  struct group* grp = NULL;
+  struct passwd *user = NULL;
+
+  if(!username) return 0;
+
+  user = getpwnam(username);
+  endpwent();
+  if(!user)
+  {
+    fprintf(stderr,"invalid user %s: %s\n",username,strerror(errno));
+    return 1;
+  }
+  if(groupname)
+  {
+    grp = getgrnam(groupname);
+    endgrent();
+    if(!grp)
+    {
+      fprintf(stderr,"invalid group %s: %s\n",groupname,strerror(errno));
+      return 1;
+    }
+  }
+
+  ngid = user->pw_gid;
+  if (grp)
+    ngid = grp->gr_gid;
+
+  if (setgid(ngid) < 0)
+  {
+    fprintf(stderr,"cannot set group id %u: %s\n", (unsigned int)ngid, strerror(errno));
+    return 1;
+  }
+  if (!getuid())
+  {
+    if (initgroups(user->pw_name, ngid) < 0)
+    {
+      fprintf(stderr,"cannot set supplemental group ids for user %s: %s\n",
+	  user->pw_name, strerror(errno));
+      return 1;
+    }
+  }
+  if (setuid(user->pw_uid) < 0)
+  {
+    fprintf(stderr,"cannot set user id %u: %s\n",
+	(unsigned int)user->pw_uid, strerror(errno));
+    return 1;
+  }
+  return 0;
+}
+
+// drop all capabilities except cap_sys_time
+static int set_cap_sys_time(void)
+{
+  cap_t caps;
+
+  caps = cap_from_text("= cap_sys_time=ep");
+  if(!caps)
+  {
+    perror("cap_from_text");
+    return -1;
+  }
+
+  if( cap_set_proc(caps) == -1 )
+  {
+    perror("cap_set_proc");
+    cap_free(caps);
+    return -1;
+  }
+
+  cap_free(caps);
+
+  return 0;
+}
+
+// keep capabilities during setuid()
+static inline int set_keepcaps(void)
+{
+  return prctl(PR_SET_KEEPCAPS, 1, 0, 0, 0);
+}
+
+static inline int set_nokeepcaps(void)
+{
+  return prctl(PR_SET_KEEPCAPS, 0, 0, 0, 0);
+}
+
 int main(int argc, char *argv[])
 {
   // Save terminal settings:
@@ -116,6 +210,8 @@
   const char *Terminal = NULL;
   const char *Shutdown = NULL;
   cPluginManager PluginManager(DEFAULTPLUGINDIR);
+  const char* username = NULL;
+  const char* groupname = NULL;
   int ExitCode = 0;
 
   static struct option long_options[] = {
@@ -136,11 +232,13 @@
       { "version",  no_argument,       NULL, 'V' },
       { "video",    required_argument, NULL, 'v' },
       { "watchdog", required_argument, NULL, 'w' },
+      { "user",     required_argument, NULL, 'u' },
+      { "group",    required_argument, NULL, 'g' },
       { NULL }
     };
 
   int c;
-  while ((c = getopt_long(argc, argv, "a:c:dD:E:hl:L:mp:P:r:s:t:v:Vw:", long_options, NULL)) != -1) {
+  while ((c = getopt_long(argc, argv, "a:c:dD:E:hl:L:mp:P:r:s:t:v:Vw:u:g:", long_options, NULL)) != -1) {
         switch (c) {
           case 'a': AudioCommand = optarg;
                     break;
@@ -230,6 +328,10 @@
                     fprintf(stderr, "vdr: invalid watchdog timeout: %s\n", optarg);
                     return 2;
                     break;
+          case 'u': username = optarg;
+                    break;
+          case 'g': groupname = optarg;
+                    break;
           default:  return 2;
           }
         }
@@ -272,6 +374,8 @@
                "  -V,       --version      print version information and exit\n"
                "  -w SEC,   --watchdog=SEC activate the watchdog timer with a timeout of SEC\n"
                "                           seconds (default: %d); '0' disables the watchdog\n"
+	       "  -u USER,  --user=USER    run as user USER instead of root\n"
+	       "  -g GROUP, --group=GROUP  use group GROUP instead of primary group of user\n"
                "\n",
                DEFAULTEPGDATAFILENAME,
                DEFAULTPLUGINDIR,
@@ -321,6 +425,21 @@
      return 2;
      }
 
+  // Only try to change capabilities/user when vdr is called by 
+  // root
+  if (!getuid () || !getgid () || !geteuid () || !getegid ()) {
+     	if(username && set_keepcaps() != 0)
+    		return 2;
+
+  	if (su(username, groupname) != 0)
+    		return 2;
+
+  	if(username && set_nokeepcaps() != 0)
+    		return 2;
+
+  	set_cap_sys_time();
+  }
+
   // Log file:
 
   if (SysLogLevel > 0)
