#!/bin/sh -e

supported_kernel() {
  case "$(uname -r)" in
    2.[012345].*|2.6.[0-7]|2.6.[0-7][!0-9]*) return 1 ;;
  esac
  return 0
}

events_not_ordered() {
  case "$(uname -r)" in
    2.6.[0-9]|2.6.[0-9][!0-9]*) return 0 ;;
  esac
  return 1
}

# create a default symlink if the directory exists and is empty
create_rules_symlink() {
  cd /etc/udev/rules.d/ || return 0

  # stop if one of the links already exists
  for file in devfs.rules compat.rules compat-full.rules cd-aliases.rules \
      udev.rules 020_permissions.rules z50_run.rules z70_hotplugd.rules; do
    [ ! -e $file ] || return 0
  done

  ln -s ../permissions.rules 020_permissions.rules
  ln -s ../run.rules z50_run.rules
  ln -s ../hotplugd.rules z70_hotplugd.rules

  if [ -c /dev/.devfsd -o -c /dev/vc/1 ]; then
    # not perfect, but a good enough heuristic
    if [ -e /dev/tty1 ]; then
      ln -s ../devfs.rules ../compat-full.rules ../cd-aliases.rules .
    else
      ln -s ../devfs.rules ../compat.rules ../cd-aliases.rules .
    fi
  else
    ln -s ../udev.rules ../cd-aliases.rules .
  fi
}

tempdir() {
  local dir=$(tempfile --prefix=udev.)
  rm $dir
  mkdir $dir
  echo $dir
}

# copied from the init script
make_extra_nodes() {
  grep '^[^#]' /etc/udev/links.conf | \
  while read type name arg1; do
    [ "$type" -a "$name" -a ! -e "/$1/$name" -a ! -L "/$1/$name" ] ||continue
    case "$type" in
      L) ln -s $arg1 /$1/$name ;;
      D) mkdir -p /$1/$name ;;
      M) mknod --mode=600 /$1/$name $arg1 ;;
      *) echo "links.conf: unparseable line ($type $name $arg1)" ;;
    esac
  done
}

enable_udev() {
  if ! supported_kernel; then
    echo "udev requires a kernel >= 2.6.8, not started."
    return 0
  fi

  if ! grep -q '[[:space:]]tmpfs$' /proc/filesystems; then
    echo "udev requires tmpfs support, not started."
    return 0
  fi

  if [ ! -d /sys/class/ ]; then
    echo "udev requires a mounted sysfs, not started."
    return 0
  fi

  if [ ! -e /proc/sys/kernel/hotplug ]; then
    echo "udev requires hotplug support, not started."
    return 0
  fi

  if [ ! -r /proc/1/root ]; then
    echo "A chroot environment has been detected, udev not started."
    return 0
  fi

  # XXX oops! some 0.048-* packages did not delete the first-install flag,
  # so we double check if udev had already been installed and enabled
  if [ -e /dev/.udevdb -o -e /dev/.udev.tdb ]; then
    return 0
  fi

  # create the directory which will hold our new /dev
  TEMPDEV=$(tempdir)

  if ! mount -n -o size=10M,mode=0755 -t tmpfs tmpfs $TEMPDEV; then
    echo "Not enabling udev because the system lacks tmpfs support!"
    rmdir $TEMPDEV
    return 0
  fi

  # check if the mounted file system works (see #288043)
  if ln -s test $TEMPDEV/test-file 2> /dev/null; then
    rm $TEMPDEV/test-file
  else
    echo "Not enabling udev because the system lacks tmpfs support!"
    umount $TEMPDEV || true
    rmdir $TEMPDEV || true
    return 0
  fi

  echo "Populating the new /dev filesystem temporarily mounted on $TEMPDEV/..."
  make_extra_nodes $TEMPDEV

  # make symlinks to the sockets and pipes on the old /dev
  find /dev -type s -o -type p | sed "s@/dev/@@" | \
    while read file; do
      ln -s "/dev/.static/dev/$file" "$TEMPDEV/$file"
    done

  # create a new config file which points to the temporary /dev
  TEMPCONF=$(tempfile)
  sed -e "s#/dev#$TEMPDEV#" < /etc/udev/udev.conf > $TEMPCONF

  UDEV_TEST=1 UDEV_CONFIG_FILE=$TEMPCONF /sbin/udevstart

  rm $TEMPCONF

  # the directory may not be present on systems which had devfs installed
  [ -d /dev/shm/ ] || mkdir /dev/shm/

  # -n is used because mount gets very confused by --bind (see #282205)
  mount -n --bind /dev/pts/ $TEMPDEV/pts/
  mount -n --bind /dev/shm/ $TEMPDEV/shm/

  mkdir -p $TEMPDEV/.static/dev/
  chmod 700 $TEMPDEV/.static/
  mount -n --bind /dev/ $TEMPDEV/.static/dev/

  mount -n --move $TEMPDEV /dev
  rmdir $TEMPDEV

  if events_not_ordered; then
    echo "WARNING: kernels older than 2.6.10 are not fully supported!"
    sleep 5
  fi
  echo /sbin/udevsend > /proc/sys/kernel/hotplug
}

maybe_run_udevstart() {
  [ -e /dev/run-udevstart ] || return 0

  echo -n "Running udevstart... "
  /sbin/udevstart
  echo "done."

  rm /dev/run-udevstart
}

case "$1" in
    configure)
    if [ -e /etc/udev/first-install ]; then
      create_rules_symlink
      enable_udev
      rm /etc/udev/first-install
    fi
    if [ -e /etc/udev/remove-conffiles-1 ]; then
      rm -f /etc/dev.d/net/hotplug.dev /etc/udev/udev.permissions \
	/etc/udev/remove-conffiles-1
    fi
    maybe_run_udevstart
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
    echo "$0 called with unknown argument '$1'" >&2
    exit 1
    ;;
esac

#DEBHELPER#

