#!/bin/sh -e

PATH="/sbin:/bin"

# defaults
tmpfs_size="10M"
udev_root="/dev"

. /lib/lsb/init-functions

##############################################################################

# we need to unmount /dev/pts/ and remount it later over the tmpfs
unmount_devpts() {
  if mountpoint -q /dev/pts/; then
    umount -l /dev/pts/
  fi

  if mountpoint -q /dev/shm/; then
    umount -l /dev/shm/
  fi
}

# mount a tmpfs over /dev, if somebody did not already do it
mount_tmpfs() {
  if grep -E -q "^[^[:space:]]+ /dev tmpfs" /proc/mounts; then
    return 0
  fi

  # /dev/.static/dev/ is used by MAKEDEV to access the real /dev/ directory.
  # /etc/udev/ is recycled as a temporary mount point because it's the only
  # directory which is guaranteed to be available.
  mount -n --bind /dev /etc/udev

  log_begin_msg "Mounting a tmpfs over /dev..."
  if ! mount -n -o size=$tmpfs_size,mode=0755 -t tmpfs none /dev; then
    log_failure_msg "FATAL: udev requires tmpfs support, not started."
    log_end_msg 1
    exit 1
  fi

  # using ln to test if /dev works, because touch is in /usr/bin/
  if ln -s test /dev/test-file; then
    rm /dev/test-file
    log_end_msg 0
  else
    log_failure_msg "FATAL: udev requires tmpfs support, not started."
    umount /etc/udev
    umount /dev
    log_end_msg 1
    exit 1
  fi

  mkdir -p /dev/.static/dev
  chmod 700 /dev/.static/
  mount -n --move /etc/udev /dev/.static/dev
}

# I hate this hack.  -- Md
make_extra_nodes() {
  [ -e /etc/udev/links.conf ] || return 0
  grep '^[^#]' /etc/udev/links.conf | \
  while read type name arg1; do
    [ "$type" -a "$name" -a ! -e "/dev/$name" -a ! -L "/dev/$name" ] ||continue
    case "$type" in
      L) ln -s $arg1 /dev/$name ;;
      D) mkdir -p /dev/$name ;;
      M) mknod --mode=600 /dev/$name $arg1 ;;
      *) log_warning_msg "links.conf: unparseable line ($type $name $arg1)" ;;
    esac
  done
}

# this function is duplicated in preinst, postinst and d-i
supported_kernel() {
  case "$(uname -r)" in
    2.[012345].*|2.6.[0-7]|2.6.[0-7][!0-9]*) return 1 ;;
  esac
  return 0
}

# Kernels < 2.6.10 break some drivers when udevsend is used as the hotplug
# multiplexer. See #297481 for details.
events_not_ordered() {
  case "$(uname -r)" in
    2.6.[0-9]|2.6.[0-9][!0-9]*) return 0 ;;
  esac
  return 1
}

# shell version of /usr/bin/tty
my_tty() {
  [ -x /bin/readlink ] || return 0
  [ -e /proc/self/fd/0 ] || return 0
  readlink --silent /proc/self/fd/0 || true
}

warn_if_interactive() {
  if [ "$RUNLEVEL" = "S" -a "$PREVLEVEL" = "N" ]; then
    return 0
  fi

  TTY=$(my_tty)
  if [ -z "$TTY" -o "$TTY" = "/dev/console" ]; then
    return 0
  fi

  printf "\n\n\nIt has been detected that the command\n\n\t$0 $*\n\n"
  printf "has been run from an interactive shell.\n"
  printf "It will probably not do what you expect, so this script will wait\n"
  printf "60 seconds before continuing. Press ^C to stop it.\n"
  printf "RUNNING THIS COMMAND IS HIGHLY DISCOURAGED!\n\n\n\n"
  sleep 60
}

##############################################################################

[ -x /sbin/udevstart ] || exit 0

. /etc/udev/udev.conf

if [ "$UDEV_DISABLED" = "yes" ]; then
  log_success_msg "udev disabled on the kernel command line, not started"
  exit 0
fi

if ! supported_kernel; then
  log_success_msg "udev requires a kernel >= 2.6.8, not started."
  exit 0
fi

if ! grep -q '[[:space:]]tmpfs$' /proc/filesystems; then
  log_success_msg "udev requires tmpfs support, not started."
  exit 0
fi

if [ ! -d /sys/class/ ]; then
  echo "udev requires a mounted sysfs, not started."
  exit 0
fi

if [ ! -e /proc/sys/kernel/hotplug ]; then
  log_success_msg "udev requires hotplug support, not started."
  exit 0
fi

##############################################################################

udev_root=${udev_root%/}

if [ "$udev_root" != "/dev" ]; then
  log_warning_msg "WARNING: udev_root != /dev/"

case "$1" in
  start)
    if [ -e "$udev_root/.udevdb" ]; then
      if mountpoint -q /dev/; then
        TMPFS_MOUNTED=1
      else
        log_warning_msg "WARNING: .udevdb already exists on the old $udev_root!"
      fi
    fi
    log_begin_msg "Starting hardware event daemon..."
    udevd --daemon
    log_end_msg $?
    if [ ! "$TMPFS_MOUNTED" ]; then
      mount -n -o size=$tmpfs_size,mode=0755 -t tmpfs tmpfs $udev_root
    fi
    log_begin_msg "Creating initial device nodes..."
    udevstart
    log_end_msg $?
    ;;
  stop)
    start-stop-daemon --stop --exec /sbin/udevd --oknodo --quiet
    log_begin_msg "Unmounting $udev_root..."
    # unmounting with -l should never fail
    umount -l $udev_root
    log_end_msg $?
    ;;
  restart|force-reload)
    $0 stop
    $0 start
    ;;
  *)
    echo "Usage: /etc/init.d/udev {start|stop|restart|force-reload}"
    exit 1
    ;;
esac

  exit 0
fi # udev_root != /dev

##############################################################################

# When modifying this script, do not forget that between the time that
# the new /dev has been mounted and udevstart has been run there will be
# no /dev/null. This also means that you cannot use the "&" shell command.

case "$1" in
  start)
    if [ -e "$udev_root/.udevdb" ]; then
      if mountpoint -q /dev/; then
        TMPFS_MOUNTED=1
      else
        log_warning_msg "WARNING: .udevdb already exists on the old $udev_root!"
      fi
    fi
    warn_if_interactive
    if events_not_ordered; then
      log_warning_msg "WARNING: kernels older than 2.6.10 are not fully supported!"
      sleep 5
    fi
    log_begin_msg "Starting hardware event daemon..."
    udevd --daemon
    log_end_msg $?
    echo /sbin/udevsend > /proc/sys/kernel/hotplug  
    if [ ! "$TMPFS_MOUNTED" ]; then
	unmount_devpts
	mount_tmpfs
    fi
    [ -d /proc/1 ] || mount -n /proc
    log_begin_msg "Creating initial device nodes..."
    udevstart
    make_extra_nodes
    log_end_msg $?
    ;;
  stop)
    warn_if_interactive
    start-stop-daemon --stop --exec /sbin/udevd --oknodo --quiet
    unmount_devpts
    if [ -d /dev/.static/dev/ ]; then
      umount -l /dev/.static/dev/ || true
    fi
    log_begin_msg "Unmounting /dev..."
    # unmounting with -l should never fail
    if umount -l /dev; then
      log_end_msg 0
      /etc/init.d/mountvirtfs start
    else
      log_end_msg 1
    fi
    ;;
  restart|force-reload)
    start-stop-daemon --stop --exec /sbin/udevd --oknodo --quiet
    log_begin_msg "Recreating device nodes..."
    udevstart
    make_extra_nodes
    log_end_msg $?
    ;;
  *)
    echo "Usage: /etc/init.d/udev {start|stop|restart|force-reload}"
    exit 1
    ;;
esac

exit 0

