How does udev work?
~~~~~~~~~~~~~~~~~~~
Short summary: when a driver is loaded it makes some information available
in /sys/ and udev is run to read them and create the appropriate devices.

This means that:
- modules cannot be loaded on demand when applications open their device,
  because the device is not yet there!
- since modules are not loaded on demand, if you do not have a working
  hotplug package which can synthesize PCI hotplug events at boot time
  you will have to manually load with /etc/modules all the drivers you need.
- some modules are not hardware drivers and cannot be loaded automatically
  by hotplug, so they will have to be listed in /etc/modules as well.
- some drivers have not been ported to sysfs yet, and udev will not be
  able to create their devices. If you use one of these drivers you will
  have to create the devices after every boot.
- some drivers, like the md kernel RAID drivers, have design problems and
  will require further development before they will fully work with udev.
  See http://groups.google.com/groups?threadm=1VPLh-6f9-11%40gated-at.bofh.it
  and #294404 for details. Possible workarounds are manual creation of
  the /dev/md* devices or kernel RAID volumes autostart.

In other words, on a typical system you may need to manually load
(using /etc/modules) modules like 8250, ppp_generic, ide-cd, ppdev,
loop and tun.
Recent versions of hotplug can load some of these modules (check if
/etc/hotplug/ide.rc and /etc/hotplug/isapnp.rc exist and CONFIG_ISAPNP
is enabled in your kernel configuration), the others which do not depend
on specific hardware devices may have to be loaded manually if you need
them.


Kernel support needed
~~~~~~~~~~~~~~~~~~~~~
The kernel must be not older than 2.6.8 and must support the hotplug
subsystem (CONFIG_HOTPLUG) and tmpfs (CONFIG_TMPFS).
Kernels older than 2.6.10 will not work correctly in some situations,
users are strongly advised to upgrade them. See #297481 for details.


Disabling udev
~~~~~~~~~~~~~~
You may disable udev by disabling the /etc/init.d/udev init script or by
adding the boot parameter UDEV_DISABLED=yes to the kernel command line.


Naming policy
~~~~~~~~~~~~~
The default configuration uses a traditional /dev layout. Naming style
is controlled by the contents of the /etc/udev/rules.d/ directory.
The default is a symlink to /etc/udev/udev.rules, and only files with
the .rules extension will be considered.
The package will not modify the symlinks contained in the directory,
except when new rules files are added to the package.
You may also create there a file with your own rules.

If you prefer devfs-style names you can switch by removing the udev.rules
symlink and creating new links to devfs.rules (devfs-style devices) and
optionally compat.rules or compat-full.rules (compatibility symlinks).
Do not forget that even if you use devfs-style names, your kernel will
not know about them unless you compile in devfs support. If you do not,
then you will have to use traditional names e.g. as the argument of the
root= boot parameter.


The /etc/udev/rules.d/ directory
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The files are read and processed in alphabetical order, and the the
directives of matching rules are applied in order. The only exceptions
are NAME attributes, of which only the first one is considered.
Since the order is important, some file names have a specific name which
must be considered when adding custom rules. So far have been defined:

 - 020_permissions.rules: the default permissions and owners are set.

 - z50_run.rules: tty devices processing is terminated with last_rule.

 - z70_hotplugd.rules: "drivers" and "module" events processing is
   terminated with last_rule and the hotplug.d and dev.d legacy scripts
   are run.

The file permissions.rules sets the default permissions for all devices.

MAINTAINERS BEWARE: the use of /etc/udev/rules.d/ by other packages is
discouraged, except when only RUN rules are added.
If you think your package needs to create a file there, then please
contact the udev package maintainer and explain your needs.
Packages should NEVER create files in /etc/udev/rules.d/, but create a
symlink the first time the package is installed (and never try again, to
allow the local system administrator to remove it).


How to know the parameters of a device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Try something like: udevinfo -a -p /sys/class/sound/pcmC0D0c/ .
/usr/share/doc/udev/examples/udevtest-all may be useful as well.


Removing this package
~~~~~~~~~~~~~~~~~~~~~
When the udev package is removed, the /dev tmpfs is left mounted so you
are advised to reboot as soon as possible because further changes to
/dev will be lost.
If you understand the consequences of these commands, you can try to
manually restore the old /dev with a procedure like:

mkdir /tmp/tempdev
mount -n --move /dev /tmp/tempdev
/etc/init.d/mountvirtfs start
/etc/init.d/sysklogd restart
/etc/init.d/gpm restart
umount /tmp/tempdev
rmdir /tmp/tempdev


Devices timestamps
~~~~~~~~~~~~~~~~~~
Most devices will be created at the beginning of the boot process, and will
have the creation time of the kernel clock at that moment.
On systems whose system clock is set on local time instead of UTC, the
kernel clock will be updated in a later phase of the boot process and for
a few hours the devices will have a timestamp in the future.
This is usually not a problem, but if it bothers you it can be fixed by
running touch(1) in an init script.


SCSI block and generic devices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When you create a custom rule which matches SCSI devices by some SYSFS
attributes, do not forget that it will match not only the sdX device node
you are probably looking for but also the SCSI generic device node sgX.
To get the expected behaviour, you need to add KERNEL="sd*" to your rule.
A typical example for an USB pen drive is:

BUS="usb", SYSFS{manufacturer}=="hardware vendor", SYSFS{product}=="model", \
	KERNEL=="sd*", SYMLINK+="pendrive%n"

If a device does not report media changes (like e.g. many SD card readers)
you will also need to add the OPTIONS+="all_partitions" attribute to the rule.


Other documentation
~~~~~~~~~~~~~~~~~~~
http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html
http://www.reactivated.net/udevrules.php
http://ccomb.free.fr/wiki/wakka.php?wiki=UsbMassStorageEnglish

