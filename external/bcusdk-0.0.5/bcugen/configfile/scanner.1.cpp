
#line 3 "scanner.1.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 230
#define YY_END_OF_BUFFER 231
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[884] =
    {   0,
        0,    0,    5,    5,  231,  229,    1,    1,   37,  229,
        3,  229,   35,   20,   16,   15,   33,   31,   14,   32,
      229,   34,  227,  227,   10,    9,   29,   23,   30,   11,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   21,  228,  228,  228,  228,  228,  228,   12,   19,
       13,   36,    5,    7,    6,   24,    0,    0,    3,    0,
       18,    0,  227,  226,    4,    2,  225,    0,   28,   25,
       22,   26,   27,  228,  228,  228,  228,  228,  228,  228,
       39,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,   43,   38,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,   17,    5,
        6,    6,    8,  220,    0,    0,    0,    0,    2,  225,
        0,  224,  228,  228,  228,  228,  215,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,    0,  223,    0,  226,    0,    0,  225,  228,  228,
      228,  228,  228,  228,  228,  228,  179,  178,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  217,  228,  228,  228,  228,
      228,  228,  228,  228,   59,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  162,
      228,   60,  228,  117,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,   40,    0,
        0,    0,  225,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  216,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  155,   45,  228,
      228,  120,  228,  228,  228,   41,  228,  228,  228,  228,
      228,  228,  228,  228,  221,  222,  228,  228,  228,  193,

      228,  228,  228,  228,  228,  228,  228,  228,   49,  228,
      228,  163,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,   90,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  136,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,   62,
      228,  228,  228,  228,  228,  197,  228,  228,  181,  228,
       46,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      116,  228,   86,  228,  228,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  190,  170,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,   65,  228,  228,  228,  228,  228,  228,
       63,  228,  228,  228,  228,  228,  228,  228,  168,  228,
      228,   83,  187,  228,  198,  228,  199,  228,  228,  180,
      228,  182,  228,  228,  228,  192,  228,  160,  228,  113,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  125,  124,
      228,  228,  186,  228,  228,  228,  228,  228,  171,  172,

      228,   69,  228,  228,   75,  228,  228,  228,   87,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  169,  228,
      228,  173,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  175,
      194,  228,  228,  228,  228,  228,  176,  131,  228,  228,
       42,  228,  228,  228,  228,  228,  228,  228,  228,  137,
      228,  228,  228,  228,  228,  228,  228,  130,   56,  164,
      228,  177,  228,  228,  228,  228,   64,   50,  228,  228,
      228,  228,  228,  228,  228,  228,  228,   81,  159,  228,
      228,  228,  228,  228,  228,  228,  228,  206,  228,  228,

       61,  228,  228,  228,  228,  167,  228,  228,  228,   47,
      219,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   93,  228,  228,  228,  228,  228,  228,   79,   88,
      228,  228,  228,   51,  158,  174,  228,   68,  228,  228,
      228,  228,  228,  228,  212,  213,  228,  228,  210,  211,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,   57,  228,  228,   48,  119,  228,  228,  228,  214,
      228,   91,  228,  228,  228,  228,  228,  109,   73,  228,
      228,   70,  228,  228,  228,  228,   89,  228,  200,  228,
      228,  228,  228,  209,  207,  203,   44,  183,  184,  228,

      228,  228,  121,  228,  118,  228,  191,  228,  228,  228,
      102,  228,  103,  228,  228,  228,  228,  228,  228,  202,
      228,  228,  228,  228,  185,  228,  228,  228,  110,  228,
      228,  228,  228,   96,  228,  228,  228,  228,  228,   74,
      228,  228,  205,  228,  143,  228,  228,  228,   80,  228,
      101,  228,   72,  228,  228,  228,  201,  204,  228,   52,
      228,  228,  218,  228,  133,  195,  228,  208,  228,  165,
      228,  196,  228,  228,  228,   71,  228,  228,  228,  228,
      228,  166,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       37,   44,   45,   46,   47,   48,   49,   37,   37,   37,
        1,   50,    1,   51,   52,    1,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   37,   75,
       76,   37,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[81] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    6,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[892] =
    {   0,
        0,    0,   78,   79, 1041, 1042, 1042, 1042, 1015,  989,
        0,   65, 1042, 1029, 1042, 1042, 1042, 1042, 1042,   76,
       80,   76,   86,   92, 1042, 1042,   90, 1012,   91, 1042,
       66,   57,   83,   66,  972,   60,  965,    0,   90,  977,
      972,   76,  979,   71,  103,   81,   75,   83,   94,   92,
      961, 1042,  973,  976,  975,  961,  960,  955, 1042,  946,
     1042, 1042,    0, 1042,  140, 1042,  148, 1018,    0,  148,
     1042,  156,  162,  167, 1042,    0,  171,    0, 1042, 1042,
     1042, 1042, 1042,    0,  990,  967,  964,  947,  971,  946,
        0,  137,  944,  947,  968,  139,  942,  955,  944,  944,

      942,    0,  980,  140,  931,  935,  130,  939,  948,  938,
      940,  945,  964,  959,  922,  130,  149,  925,  149,  923,
      929,  101,  928,  922,  150,  924,  960,  929,  933,  924,
      917,  925,  917,  920,  917,  927,  929,  907, 1042,    0,
      206,  209, 1042, 1042,  179,  212,  216,  223,    0,  227,
      234,    0,  905,  908,  941,  190,  220,  900,  947,  935,
      916,  896,  895,  903,  916,  907,  914,  901,  912,  909,
      890,  924,  891,  888,   46,  898,  887,  885,  883,  892,
      223,  906,  896,  895,  894,  893,  903,  896,  876,  882,
      873,  889,  876,  202,  885,  885,  883,  882,  906,  870,

      864,  879,  862,  872,  877,  859,  873,  865,  871,  895,
      854,  872,  851,  852,  850,  851,  849,  863,  854,  206,
      860,  262,  268,  272,  276,  283,  287,  291,  859,  858,
      848,  846,  869,  859,  858,  870,    0,    0,  849,  837,
      838,  832,  831,  848,  848,  844,  828,  827,  830,  858,
      839,  842,  841,  823,  821,    0,  282,  833,  842,  819,
      831,  834,  833,  821,    0,  829,  813,  806,  848,  819,
      818,  189,  817,  807,  815,  805,  817,  834,  287,  811,
      801,  795,  805,  811,  197,  810,  800,  821,  812,  793,
      805,    0,  822,    0,  788,  802,  797,  800,  789,  798,

      790,  780,  777,  785,  793,  776,  795,  779,    0,  298,
      302,  314,  318,  780,  771,  786,  773,  803,  221,  226,
      780,  773,  778,  781,  771,  772,  778,  770,  767,  789,
      770,  226,  769,  764,  764,  757,  207,  765,  768,  760,
      770,  769,  764,  750,  753,  754,  753,    0,  744,  774,
      746,  785,  757,  745,  779,  778,  737,  746,  742,  752,
      734,  742,  244,  736,  744,  734,  725,  741,  729,  723,
      765,  738,  727,  763,  732,  737,  761,    0,    0,  748,
      730,    0,  719,  296,  720,    0,  727,  727,  714,  720,
      719,  713,  704,  721,  322,  326,  704,  714,  707,    0,

      733,  728,  739,  726,  741,  703,  697,  707,    0,  710,
      692,  717,  705,  689,  707,  692,  704,  696,  691,  698,
      690,  700,  699,  698,  696,  691,  691,  677,  691,  675,
      691,  684,  669,  668,  314,  673,  682,  693,  684,  677,
      704,  703,  672,  660,  674,  665,  657,  663,  672,  670,
      661,  655,  664,  269,  656,    0,  649,  653,  663,  659,
      664,  673,  643,  295,  669,  685,  646,  656,  656,    0,
      639,  651,  646,  634,  653,    0,  647,  650,    0,  649,
        0,  673,  658,  669,  656,  651,  635,  619,  634,  636,
        0,  616,    0,  620,  620,  623,  626,  615,  625,  619,

      646,  618,  627,  617,  616,  626,  613,  624,  604,  604,
      598,  601,  615,  614,  604,  593,    0,    0,  622,  603,
      324,  622,  621,  597,  587,  626,  625,  584,  598,  601,
      587,  580,  582,    0,  626,  587,  597,  590,  577,  579,
        0,  577,  594,  589,  589,  573,  609,  586,    0,  586,
      576,    0,    0,  569,    0,  300,    0,  566,  565,    0,
      590,    0,  589,  604,  561,    0,  560,    0,  563,    0,
      577,  576,  571,  563,  554,  553,  567,  566,  565,  581,
      563,  546,  561,  552,  543,  554,  575,  553,    0,    0,
      556,  543,    0,  582,  553,  541,  554,  542,    0,    0,

      539,    0,  573,  572,  566,  529,  529,  542,    0,  541,
      541,  537,  538,  527,  527,  535,  534,  520,    0,  519,
      521,    0,  531,  529,  528,  527,  507,  302,  525,  526,
      525,  307,  272,  508,  521,  516,  544,  543,  539,    0,
        0,  516,  507,  507,  515,  512,    0,    0,  492,  495,
        0,  513,  529,  500,  497,  505,  491,  493,  502,    0,
      501,  500,  500,  499,  481,  482,  310,    0,    0,    0,
      521,    0,  480,  479,  478,  492,    0,  472,  471,  461,
      460,  467,   75,  103,  103,  139,  156,    0,    0,  201,
      305,  292,  285,  325,  322,  315,  319,    0,  311,  325,

        0,  316,  354,  355,  355,    0,  330,  359,  317,    0,
        0,  333,  325,  334,  321,  322,  323,  339,  331,  332,
      324,    0,  344,  331,  336,  331,  330,  333,    0,    0,
      335,  335,  338,    0,    0,    0,  338,    0,  345,  381,
      360,  356,  343,  351,    0,    0,  344,  346,    0,    0,
      361,  367,  362,  364,  352,  357,  378,  379,  384,  355,
      365,    0,  360,  358,    0,    0,  361,  376,  364,    0,
      376,    0,  366,  380,  366,  382,  383,    0,    0,  413,
      385,    0,  386,  377,  415,  375,    0,  390,    0,  395,
      375,  394,  390,    0,    0,    0,    0,    0,    0,  418,

      396,  387,    0,  397,    0,  386,  427,  386,  402,  389,
        0,  391,    0,  406,  392,  392,  392,  399,  396,    0,
      409,  412,  414,  415,    0,  402,  418,  421,    0,  408,
      416,  406,  407,    0,  423,  409,  424,  416,  410,    0,
      427,  419,    0,  422,    0,  424,  433,  433,    0,  419,
        0,  421,    0,  422,  421,  428,    0,    0,  438,    0,
      424,  440,    0,  441,    0,    0,  427,    0,  427,    0,
      430,    0,  432,  432,  447,    0,  435,  476,  440,  452,
      452,    0, 1042,  509,  515,  521,  523,  529,  535,  541,
      513

    } ;

static yyconst flex_int16_t yy_def[892] =
    {   0,
      883,    1,  884,  884,  883,  883,  883,  883,  883,  885,
      886,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  883,  887,  887,  887,  887,  887,  887,  883,  883,
      883,  883,  888,  883,  889,  883,  885,  885,  886,  883,
      883,  883,  883,  883,  883,  890,  883,  891,  883,  883,
      883,  883,  883,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  883,  888,
      889,  889,  883,  883,  885,  883,  883,  883,  890,  883,
      883,  891,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  883,  883,  883,  883,  883,  883,  883,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  883,
      883,  883,  883,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  883,  883,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,

      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,    0,  883,  883,  883,  883,  883,  883,  883,
      883

    } ;

static yyconst flex_int16_t yy_nxt[1123] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   24,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   38,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,    6,
       52,   38,   38,   38,   38,   38,   53,   54,   38,   55,
       56,   38,   38,   38,   38,   38,   57,   38,   38,   38,
       38,   58,   38,   38,   38,   38,   59,   60,   61,   62,
       64,   64,   70,   70,   70,   70,   89,   75,  253,   65,
       65,   72,   76,   73,   73,   73,   73,   74,   74,   74,

       74,   77,  254,   73,   73,   73,   73,   77,   95,   73,
       73,   73,   73,   79,   80,   82,   83,   85,   91,   86,
      102,   87,   96,   99,  111,   92,   97,  739,  107,   90,
      103,  121,  100,  118,  113,   93,  108,  119,   88,  124,
      112,  114,  109,  125,  130,  127,  122,  120,  131,   94,
      123,  142,  144,  203,  740,  104,  143,  741,  126,  128,
       78,  129,  115,  146,  147,   70,   70,   70,   70,  116,
      204,  159,  117,   74,   74,   74,   74,   77,  160,   73,
       73,   73,   73,  144,   74,   74,   74,   74,  150,  150,
      150,  150,  164,  190,  173,  179,  165,   68,  148,  191,

      180,  196,  151,  197,  181,  192,  198,  199,  742,  193,
      174,  175,  166,  176,  207,  194,  355,  883,  356,  200,
      142,  208,  883,  148,  372,  143,  743,  151,   68,  222,
      222,  222,  222,  223,  223,  223,  223,  224,  234,  235,
      225,  225,  225,  225,  150,  150,  150,  150,  227,  232,
      260,  228,  228,  228,  228,  744,  233,  373,  226,  275,
      276,  261,  303,  402,  423,  403,  304,  417,  404,  277,
      262,  418,  424,  305,  405,  306,  307,  310,  308,  222,
      222,  222,  222,  226,  311,  223,  223,  223,  223,  225,
      225,  225,  225,  225,  225,  225,  225,  312,  449,  450,

      313,  313,  313,  313,  228,  228,  228,  228,  228,  228,
      228,  228,  339,  340,  363,  395,  395,  395,  395,  396,
      396,  396,  396,  468,  341,  535,  698,  699,  364,  536,
      365,  313,  313,  313,  313,  313,  313,  313,  313,  395,
      395,  395,  395,  396,  396,  396,  396,  366,  469,  515,
      545,  595,  747,  596,  627,  748,  691,  745,  746,  516,
      628,  696,  727,  597,  629,  546,  630,  692,  598,  631,
      632,  633,  634,  751,  697,  752,  728,  749,  750,  753,
      754,  755,  756,  757,  758,  759,  760,  761,  762,  763,
      764,  765,  766,  767,  768,  769,  770,  771,  772,  773,

      774,  775,  776,  777,  778,  779,  780,  781,  782,  783,
      784,  785,  786,  787,  788,  789,  790,  791,  793,  794,
      795,  796,  797,  798,  799,  800,  801,  792,  802,  803,
      804,  805,  806,  807,  808,  809,  810,  811,  812,  813,
      814,  815,  816,  817,  818,  819,  820,  821,  822,  823,
      824,  825,  826,  827,  828,  829,  830,  831,  832,  833,
      834,  835,  836,  837,  838,  839,  840,  841,  842,  843,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,

      874,  875,  876,  877,  878,  879,  880,  881,  882,   63,
       63,   63,   63,   63,   63,   67,   67,  152,   67,   67,
       67,   69,  738,   69,   69,   69,   69,   84,   84,  140,
      737,  140,  736,  140,  140,  141,  735,  141,  141,  141,
      141,  149,  734,  149,  149,  149,  149,  733,  732,  731,
      730,  729,  726,  725,  724,  723,  722,  721,  720,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,
      708,  707,  706,  705,  704,  703,  702,  701,  700,  695,
      694,  693,  690,  689,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,

      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  603,  602,  601,  600,  599,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,

      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  544,  543,  542,  541,  540,  539,
      538,  537,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  467,  466,  465,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,

      452,  451,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  422,  421,  420,  419,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  401,  400,  399,  398,  397,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  371,  370,  369,
      368,  367,  362,  361,  360,  359,  358,  357,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  338,  337,  336,  335,  334,  333,  332,  331,  330,

      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  309,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      279,  278,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  259,  258,  257,  256,  255,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  231,  230,  229,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  206,  205,  202,  201,  195,  189,  188,  187,

      186,  185,  184,  183,  182,  178,  177,  172,  171,  170,
      169,  168,  167,  163,  162,  161,  158,  157,  156,  155,
      154,  153,  145,  139,  138,  137,  136,  135,  134,  133,
      132,  110,  106,  105,  101,   98,   81,   71,   68,   66,
      883,    5,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883
    } ;

static yyconst flex_int16_t yy_chk[1123] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,   12,   12,   12,   12,   32,   22,  175,    3,
        4,   20,   22,   20,   20,   20,   20,   21,   21,   21,

       21,   23,  175,   23,   23,   23,   23,   24,   34,   24,
       24,   24,   24,   27,   27,   29,   29,   31,   33,   31,
       39,   31,   34,   36,   44,   33,   34,  683,   42,   32,
       39,   47,   36,   46,   45,   33,   42,   46,   31,   48,
       44,   45,   42,   48,   50,   49,   47,   46,   50,   33,
       47,   65,   67,  122,  684,   39,   65,  685,   48,   49,
       23,   49,   45,   70,   70,   70,   70,   70,   70,   45,
      122,   92,   45,   72,   72,   72,   72,   73,   92,   73,
       73,   73,   73,  145,   74,   74,   74,   74,   77,   77,
       77,   77,   96,  116,  104,  107,   96,   67,   74,  116,

      107,  119,   77,  119,  107,  117,  119,  119,  686,  117,
      104,  104,   96,  104,  125,  117,  272,  141,  272,  119,
      142,  125,  141,   74,  285,  142,  687,   77,  145,  146,
      146,  146,  146,  147,  147,  147,  147,  148,  157,  157,
      148,  148,  148,  148,  150,  150,  150,  150,  151,  156,
      181,  151,  151,  151,  151,  690,  156,  285,  150,  194,
      194,  181,  220,  319,  337,  319,  220,  332,  320,  194,
      181,  332,  337,  220,  320,  220,  220,  222,  220,  222,
      222,  222,  222,  150,  223,  223,  223,  223,  223,  224,
      224,  224,  224,  225,  225,  225,  225,  226,  363,  363,

      226,  226,  226,  226,  227,  227,  227,  227,  228,  228,
      228,  228,  257,  257,  279,  310,  310,  310,  310,  311,
      311,  311,  311,  384,  257,  454,  633,  633,  279,  454,
      279,  312,  312,  312,  312,  313,  313,  313,  313,  395,
      395,  395,  395,  396,  396,  396,  396,  279,  384,  435,
      464,  521,  692,  521,  556,  693,  628,  691,  691,  435,
      556,  632,  667,  521,  556,  464,  556,  628,  521,  556,
      556,  556,  556,  695,  632,  696,  667,  694,  694,  697,
      699,  700,  702,  703,  704,  705,  707,  708,  709,  712,
      713,  714,  715,  716,  717,  718,  719,  720,  721,  723,

      724,  725,  726,  727,  728,  731,  732,  733,  737,  739,
      740,  741,  742,  743,  744,  747,  748,  751,  752,  753,
      754,  755,  756,  757,  758,  759,  760,  751,  761,  763,
      764,  767,  768,  769,  771,  773,  774,  775,  776,  777,
      780,  781,  783,  784,  785,  786,  788,  790,  791,  792,
      793,  800,  801,  802,  804,  806,  807,  808,  809,  810,
      812,  814,  815,  816,  817,  818,  819,  821,  822,  823,
      824,  826,  827,  828,  830,  831,  832,  833,  835,  836,
      837,  838,  839,  841,  842,  844,  846,  847,  848,  850,
      852,  854,  855,  856,  859,  861,  862,  864,  867,  869,

      871,  873,  874,  875,  877,  878,  879,  880,  881,  884,
      884,  884,  884,  884,  884,  885,  885,  891,  885,  885,
      885,  886,  682,  886,  886,  886,  886,  887,  887,  888,
      681,  888,  680,  888,  888,  889,  679,  889,  889,  889,
      889,  890,  678,  890,  890,  890,  890,  676,  675,  674,
      673,  671,  666,  665,  664,  663,  662,  661,  659,  658,
      657,  656,  655,  654,  653,  652,  650,  649,  646,  645,
      644,  643,  642,  639,  638,  637,  636,  635,  634,  631,
      630,  629,  627,  626,  625,  624,  623,  621,  620,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  608,  607,

      606,  605,  604,  603,  601,  598,  597,  596,  595,  594,
      592,  591,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      569,  567,  565,  564,  563,  561,  559,  558,  554,  551,
      550,  548,  547,  546,  545,  544,  543,  542,  540,  539,
      538,  537,  536,  535,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  520,  519,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  492,  490,  489,  488,  487,  486,  485,  484,  483,

      482,  480,  478,  477,  475,  474,  473,  472,  471,  469,
      468,  467,  466,  465,  463,  462,  461,  460,  459,  458,
      457,  455,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  408,  407,  406,  405,  404,
      403,  402,  401,  399,  398,  397,  394,  393,  392,  391,
      390,  389,  388,  387,  385,  383,  381,  380,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,

      365,  364,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  347,  346,  345,  344,
      343,  342,  341,  340,  339,  338,  336,  335,  334,  333,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  318,  317,  316,  315,  314,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      293,  291,  290,  289,  288,  287,  286,  284,  283,  282,
      281,  280,  278,  277,  276,  275,  274,  273,  271,  270,
      269,  268,  267,  266,  264,  263,  262,  261,  260,  259,
      258,  255,  254,  253,  252,  251,  250,  249,  248,  247,

      246,  245,  244,  243,  242,  241,  240,  239,  236,  235,
      234,  233,  232,  231,  230,  229,  221,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
      196,  195,  193,  192,  191,  190,  189,  188,  187,  186,
      185,  184,  183,  182,  180,  179,  178,  177,  176,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  155,  154,  153,  138,
      137,  136,  135,  134,  133,  132,  131,  130,  129,  128,
      127,  126,  124,  123,  121,  120,  118,  115,  114,  113,

      112,  111,  110,  109,  108,  106,  105,  103,  101,  100,
       99,   98,   97,   95,   94,   93,   90,   89,   88,   87,
       86,   85,   68,   60,   58,   57,   56,   55,   54,   53,
       51,   43,   41,   40,   37,   35,   28,   14,   10,    9,
        5,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,

      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      883,  883
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[231] =
    {   0,
1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.1.lpp"
#line 4 "scanner.1.lpp"
#include "scanner.h"
#include "classes.h"
#include "parser1.1.h"

#line 1021 "scanner.1.cpp"

#define INITIAL 0
#define comment 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 12 "scanner.1.lpp"

#line 1204 "scanner.1.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 884 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 883 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 13 "scanner.1.lpp"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 14 "scanner.1.lpp"
;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 15 "scanner.1.lpp"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 16 "scanner.1.lpp"
BEGIN(comment);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 17 "scanner.1.lpp"

	YY_BREAK
case 6:
YY_RULE_SETUP
#line 18 "scanner.1.lpp"

	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 19 "scanner.1.lpp"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 20 "scanner.1.lpp"
BEGIN(INITIAL);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 21 "scanner.1.lpp"
return ';';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 22 "scanner.1.lpp"
return ':';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 23 "scanner.1.lpp"
return '?';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 24 "scanner.1.lpp"
return '{';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 25 "scanner.1.lpp"
return '}';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 26 "scanner.1.lpp"
return ',';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 27 "scanner.1.lpp"
return ')';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 28 "scanner.1.lpp"
return '(';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 29 "scanner.1.lpp"
return T_OR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 30 "scanner.1.lpp"
return T_AND;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 31 "scanner.1.lpp"
return '|';
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 32 "scanner.1.lpp"
return '&';
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 33 "scanner.1.lpp"
return '^';
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 34 "scanner.1.lpp"
return T_EQ;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 35 "scanner.1.lpp"
return '=';
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 36 "scanner.1.lpp"
return T_NE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 37 "scanner.1.lpp"
return T_LE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 38 "scanner.1.lpp"
return T_GE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 39 "scanner.1.lpp"
return T_RSHIFT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 40 "scanner.1.lpp"
return T_LSHIFT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 41 "scanner.1.lpp"
return '<';
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 42 "scanner.1.lpp"
return '>';
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 43 "scanner.1.lpp"
return '+';
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 44 "scanner.1.lpp"
return '-';
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 45 "scanner.1.lpp"
return '*';
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 46 "scanner.1.lpp"
return '/';
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 47 "scanner.1.lpp"
return '%';
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 48 "scanner.1.lpp"
return '~';
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 49 "scanner.1.lpp"
return '!';
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 50 "scanner.1.lpp"
return T_IN;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 51 "scanner.1.lpp"
return T_CI;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 52 "scanner.1.lpp"
return TRUE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 53 "scanner.1.lpp"
return FALSE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 54 "scanner.1.lpp"
return TOK_Interface;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 55 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 56 "scanner.1.lpp"
return TOK_Abbreviation;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 57 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 58 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 59 "scanner.1.lpp"
return TOK_GroupTitle;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 60 "scanner.1.lpp"
return TOK_InvisibleIf;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 61 "scanner.1.lpp"
return TOK_DPType;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 62 "scanner.1.lpp"
return TOK_Reference;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 63 "scanner.1.lpp"
return TOK_References;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 66 "scanner.1.lpp"
return TOK_FunctionalBlock;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 67 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 68 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 69 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 70 "scanner.1.lpp"
return TOK_ProfileID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 74 "scanner.1.lpp"
return TOK_GroupObject;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 75 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 76 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 77 "scanner.1.lpp"
return TOK_Type;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 78 "scanner.1.lpp"
return TOK_on_update;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 79 "scanner.1.lpp"
return TOK_eeprom;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 80 "scanner.1.lpp"
return TOK_Sending;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 81 "scanner.1.lpp"
return TOK_Receiving;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 82 "scanner.1.lpp"
return TOK_Reading;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 83 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 84 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 85 "scanner.1.lpp"
return TOK_StateBased;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 89 "scanner.1.lpp"
return TOK_Priority;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 90 "scanner.1.lpp"
return TOK_SendAddress;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 91 "scanner.1.lpp"
return TOK_ReadRequestAddress;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 92 "scanner.1.lpp"
return TOK_ReceiveAddress;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 93 "scanner.1.lpp"
return TOK_ReadAddress;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 94 "scanner.1.lpp"
return TOK_UpdateAddress;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 96 "scanner.1.lpp"
return TOK_Property;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 97 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 98 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 99 "scanner.1.lpp"
return TOK_Type;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 100 "scanner.1.lpp"
return TOK_PropertyID;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 101 "scanner.1.lpp"
return TOK_MaxArrayLength;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 102 "scanner.1.lpp"
return TOK_Writeable;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 103 "scanner.1.lpp"
return TOK_eeprom;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 104 "scanner.1.lpp"
return TOK_handler;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 105 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 106 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 108 "scanner.1.lpp"
return TOK_Disable;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 109 "scanner.1.lpp"
return TOK_ReadOnly;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 110 "scanner.1.lpp"
return TOK_ReadAccess;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 111 "scanner.1.lpp"
return TOK_WriteAccess;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 113 "scanner.1.lpp"
return TOK_Object;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 114 "scanner.1.lpp"
return TOK_ObjectIndex;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 115 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 116 "scanner.1.lpp"
return TOK_ObjectType;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 118 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 119 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "scanner.1.lpp"
return TOK_PollingMaster;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 131 "scanner.1.lpp"
return TOK_PollingAddress;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 132 "scanner.1.lpp"
return TOK_PollingCount;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 134 "scanner.1.lpp"
return TOK_PollingSlave;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 135 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 136 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 137 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 138 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 140 "scanner.1.lpp"
return TOK_PollingAddress;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 141 "scanner.1.lpp"
return TOK_PollingSlot;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 143 "scanner.1.lpp"
return TOK_ListParameter;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 144 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 145 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 146 "scanner.1.lpp"
return TOK_Elements;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 147 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 148 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 149 "scanner.1.lpp"
return TOK_Default;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 150 "scanner.1.lpp"
return TOK_Unit;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 151 "scanner.1.lpp"
return TOK_ListElements;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 152 "scanner.1.lpp"
return TOK_ListDefault;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 155 "scanner.1.lpp"
return TOK_Value;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 157 "scanner.1.lpp"
return TOK_IntParameter;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 158 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 159 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 160 "scanner.1.lpp"
return TOK_MinValue;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 161 "scanner.1.lpp"
return TOK_MaxValue;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 162 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 163 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 164 "scanner.1.lpp"
return TOK_Default;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 165 "scanner.1.lpp"
return TOK_Unit;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 166 "scanner.1.lpp"
return TOK_Precision;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 167 "scanner.1.lpp"
return TOK_Increment;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 170 "scanner.1.lpp"
return TOK_Value;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 172 "scanner.1.lpp"
return TOK_StringParameter;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 173 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 174 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 175 "scanner.1.lpp"
return TOK_RegExp;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 176 "scanner.1.lpp"
return TOK_MaxLength;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 177 "scanner.1.lpp"
return TOK_Default;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 178 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 179 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 180 "scanner.1.lpp"
return TOK_Unit;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 182 "scanner.1.lpp"
return TOK_Value;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 184 "scanner.1.lpp"
return TOK_FloatParameter;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 185 "scanner.1.lpp"
return TOK_ID;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 186 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 187 "scanner.1.lpp"
return TOK_MinValue;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 188 "scanner.1.lpp"
return TOK_MaxValue;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 189 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 190 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 191 "scanner.1.lpp"
return TOK_Unit;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 192 "scanner.1.lpp"
return TOK_Precision;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 193 "scanner.1.lpp"
return TOK_Increment;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 194 "scanner.1.lpp"
return TOK_Default;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 196 "scanner.1.lpp"
return TOK_Value;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 198 "scanner.1.lpp"
return TOK_Timer;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 199 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 200 "scanner.1.lpp"
return TOK_Type;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 201 "scanner.1.lpp"
return TOK_Resolution;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 202 "scanner.1.lpp"
return TOK_on_expire;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 206 "scanner.1.lpp"
return TOK_Debounce;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 207 "scanner.1.lpp"
return TOK_Name;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 208 "scanner.1.lpp"
return TOK_Time;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 211 "scanner.1.lpp"
return TOK_Device;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 212 "scanner.1.lpp"
return TOK_ProgramID;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 213 "scanner.1.lpp"
return TOK_ManufacturerCode;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 214 "scanner.1.lpp"
return TOK_InternalManufacturerCode;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 215 "scanner.1.lpp"
return TOK_DeviceType;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 216 "scanner.1.lpp"
return TOK_Version;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 217 "scanner.1.lpp"
return TOK_SyncRate;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 218 "scanner.1.lpp"
return TOK_PEIType;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 219 "scanner.1.lpp"
return TOK_PortADDR;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 220 "scanner.1.lpp"
return TOK_PortCDDR;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 221 "scanner.1.lpp"
return TOK_U_DELMSG;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 222 "scanner.1.lpp"
return TOK_RouteCount;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 223 "scanner.1.lpp"
return TOK_BusyLimit;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 224 "scanner.1.lpp"
return TOK_INAKLimit;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 225 "scanner.1.lpp"
return TOK_RateLimit;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 226 "scanner.1.lpp"
return TOK_CPOL;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 227 "scanner.1.lpp"
return TOK_CPHA;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 228 "scanner.1.lpp"
return TOK_AutoPLMA;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 229 "scanner.1.lpp"
return TOK_A_Event;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 230 "scanner.1.lpp"
return TOK_BCU1_SEC;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 231 "scanner.1.lpp"
return TOK_BCU1_PROTECT;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 232 "scanner.1.lpp"
return TOK_BCU2_PROTECT;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 233 "scanner.1.lpp"
return TOK_BCU2_WATCHDOG;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 234 "scanner.1.lpp"
return TOK_PLM_FAST;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 235 "scanner.1.lpp"
return TOK_include;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 236 "scanner.1.lpp"
return TOK_Title;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 237 "scanner.1.lpp"
return TOK_AddInfo;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 238 "scanner.1.lpp"
return TOK_OrderNo;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 239 "scanner.1.lpp"
return TOK_Manufacturer;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 240 "scanner.1.lpp"
return TOK_Category;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 241 "scanner.1.lpp"
return TOK_Author;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 242 "scanner.1.lpp"
return TOK_Copyright;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 244 "scanner.1.lpp"
return TOK_Test_Addr_Count;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 245 "scanner.1.lpp"
return TOK_Test_Assoc_Count;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 256 "scanner.1.lpp"
return TOK_on_run;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 257 "scanner.1.lpp"
return TOK_on_init;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 258 "scanner.1.lpp"
return TOK_on_save;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 259 "scanner.1.lpp"
return TOK_on_pei_init;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 260 "scanner.1.lpp"
return TOK_on_pei_message;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 261 "scanner.1.lpp"
return TOK_on_pei_cycle;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 262 "scanner.1.lpp"
return TOK_on_pei_user;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 263 "scanner.1.lpp"
return TOK_on_pei_rc_even;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 264 "scanner.1.lpp"
return TOK_on_pei_rc_odd;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 265 "scanner.1.lpp"
return TOK_on_pei_tc;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 266 "scanner.1.lpp"
return TOK_on_pei_tdre;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 267 "scanner.1.lpp"
return TOK_on_pei_sci_idle;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 268 "scanner.1.lpp"
return TOK_on_pei_spif;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 269 "scanner.1.lpp"
return TOK_on_pei_oca;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 270 "scanner.1.lpp"
return TOK_on_pei_ocb;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 271 "scanner.1.lpp"
return TOK_on_pei_ica;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 272 "scanner.1.lpp"
return TOK_on_pei_icb;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 274 "scanner.1.lpp"
return TOK_MaskVersion;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 276 "scanner.1.lpp"
return TOK_BCU;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 277 "scanner.1.lpp"
return TOK_Model;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 281 "scanner.1.lpp"
return TOK_Keys;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 282 "scanner.1.lpp"
return TOK_PhysicalAddress;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 283 "scanner.1.lpp"
return TOK_InstallKey;
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 285 "scanner.1.lpp"
yylval.str=yytext; return STRING;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 286 "scanner.1.lpp"
{ int a, b, c; sscanf (yytext+1, "%d.%d.%d", &a, &b, &c); yylval.intval=((a & 0x0f) << 12) | ((b & 0x0f) << 8) | ((c & 0xff)); return INT;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 287 "scanner.1.lpp"
{ int a, b, c; sscanf (yytext+1, "%d/%d/%d", &a, &b, &c); yylval.intval=((a & 0x1f) << 11) | ((b & 0x07) << 8) | ((c & 0xff)); return INT;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 288 "scanner.1.lpp"
{ int a, b; sscanf (yytext+1, "%d/%d", &a, &b); yylval.intval=((a & 0x1f) << 11) | ((b & 0x7FF)); return INT;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 289 "scanner.1.lpp"
yylval.intval=strtol(yytext,0,16);return INT;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 290 "scanner.1.lpp"
yylval.fval=strtod(yytext,0);return FLOAT;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 291 "scanner.1.lpp"
yylval.fval=strtod(yytext,0);return FLOAT;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 292 "scanner.1.lpp"
yylval.intval=strtol(yytext,0,10); return INT;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 293 "scanner.1.lpp"
yylval.str=yytext; return IDENT;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 294 "scanner.1.lpp"
parserError(_("unexpected Character %s"),yytext);
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 295 "scanner.1.lpp"
ECHO;
	YY_BREAK
#line 2446 "scanner.1.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 884 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 884 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 883);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
    
    unput(0);
    
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 295 "scanner.1.lpp"
