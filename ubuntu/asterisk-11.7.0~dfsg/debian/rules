#!/usr/bin/make -f
# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1
export DEB_BUILD_HARDENING=1

# Necessary to pass hardening flags to menuselect.
# export CFLAGS LDFLAGS BUILD_CFLAGS BUILD_LDFLAGS

# Starting with dpkg-dev >= 1.16.1.1 you can use the new buildflags.mk file
# to set all *FLAGS
# When building programs that handle untrusted data
# (parsers, network listeners, etc.),
#  or run with elevated privileges (PAM, X, etc.),
#  please enable "PIE" and "BINDNOW" in the build.
#  The "all" option enables "PIE" and "BINDNOW" and future hardening flags

%:
	dh "$@" --with autotools_dev,autoreconf

#export DEB_BUILD_MAINT_OPTIONS = hardening=+all
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk

export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
  confflags += --build $(DEB_HOST_GNU_TYPE)
else
  confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

# We copy around a number of things in case we're linux:
BUILD_OS=$(shell dpkg-architecture -qDEB_BUILD_ARCH_OS)

export PROC := $(shell dpkg-architecture -qDEB_BUILD_GNU_CPU)

ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
	BUILDFLAGS += OPTIMIZE=-O0
else
	BUILDFLAGS += OPTIMIZE=-O2
endif
BUILDFLAGS += MAKECMDGOALS=dont-optimize

# show full gcc arguments instead of [CC] and [LD]
BUILDFLAGS += NOISY_BUILD=yes

BUILDFLAGS += ASTDATADIR=/usr/share/asterisk ASTVARRUNDIR=/var/run/asterisk

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	ENABLE_DEBUG += --enable-dev-mode
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	INSTALL_PROGRAM += -s
endif

DEBVERSION:=$(shell dpkg-parsechangelog | sed -n -e 's/Version: //p')
DEB_NOEPOCH_VERSION:=$(shell echo $(DEBVERSION) | cut -d':' -f 2)
DEB_SRC_VERSION:=$(shell echo $(DEB_NOEPOCH_VERSION) | sed -e 's/-[^-]\+$$//')
UPVERSION:=$(shell echo $(DEB_SRC_VERSION) | sed -e 's/[.~]dfsg[0-9]*//' -e 's/~\(\(rc\|beta\)[0-9]\)/-\1/')

FILENAME := asterisk_$(DEB_SRC_VERSION).orig.tar.gz
UPFILENAME := asterisk_$(UPVERSION).orig.tar.gz
URL := http://downloads.asterisk.org/pub/telephony/asterisk/releases/asterisk-$(UPVERSION).tar.gz

# make sure we have 'fetch' . We need to have either wget or fetch
# on the system. However it is generally not a good idea to actually
# get remote tarballs at build time. So if neither wget nor fetch 
# happen to be installed, the configure script will find a dummy
# fetch script that always returns an error.
FETCH_ENV = PATH=$$PATH:$(CURDIR)/debian/dummyprogs

override_dh_autoreconf:
	if [ ! -r configure.debian_sav ]; then cp -a configure configure.debian_sav; fi
	[ -f .version.debian_sav ] || cp -a .version .version.debian_sav
	echo $(DEB_NOEPOCH_VERSION) > .version
	dh_autoreconf -- ./bootstrap.sh

# Make sure the configure script gets an CFLAGS parameter. Otherwise
# it will build with -march=native
#Â Pass CPPFLAGS in the CFLAGS as otherwise the build system will
# ignore them.
override_dh_auto_configure:
	chmod 755 $(CURDIR)/debian/dummyprogs/fetch
	$(FETCH_ENV) ./configure			\
		CFLAGS="$(CFLAGS) $(CPPFLAGS)" LDFLAGS="$(LDFLAGS)" \
		--host=$(DEB_HOST_GNU_TYPE)		\
		--build=$(DEB_BUILD_GNU_TYPE)		\
		--prefix=/usr				\
		--mandir=\$${prefix}/share/man		\
		--infodir=\$${prefix}/share/info	\
		--disable-asteriskssl			\
		--with-gsm				\
		--with-imap=system			\
		--without-pwlib				\
		${ENABLE_DEBUG}

#		--with-cap \

override_dh_auto_build:
	$(MAKE) menuselect.makeopts
	@if [ "x${ENABLE_DEBUG}" != "x" ] ; then \
		menuselect/menuselect --enable BETTER_BACKTRACES menuselect.makeopts ; \
		menuselect/menuselect --enable DONT_OPTIMIZE menuselect.makeopts ; \
		menuselect/menuselect --enable DEBUG_THREADS menuselect.makeopts ; \
	fi
	$(FETCH_ENV) dh_auto_build -- $(BUILDFLAGS)

SND_FILE=asterisk-core-sounds-en-gsm-1.4.20.tar.gz
override_dh_clean:
	if [ -r sounds/$(SND_FILE) ]; then mv sounds/$($SND_FILE) debian/; fi
	GREP=grep AWK=awk $(MAKE) distclean
	if [ -r debian/$(SND_FILE) ]; then mv debian/$(SND_FILE) sounds/; fi

	-test -d configs && chmod -x configs/*.sample

	[ ! -f .version.debian_sav ] || mv .version.debian_sav .version
	if [ -f configure.debian_sav ]; then mv configure.debian_sav configure; fi

	dh_clean

SUBPACKS_EXTRA = \
		 voicemail voicemail-odbcstorage voicemail-imapstorage \
		 ooh323 mysql mp3
ifeq (linux,$(BUILD_OS))
SUBPACKS_EXTRA += dahdi mobile vpb
endif
SUBPACKS_EXTRA_DIRS = $(SUBPACKS_EXTRA:%=$(CURDIR)/debian/asterisk-%)
SUBPACKS_EXTRA_DIRS_MOD = $(SUBPACKS_EXTRA_DIRS:%=%/usr/lib/asterisk/modules)

override_dh_auto_install:
	$(FETCH_ENV) dh_auto_install -- $(BUILDFLAGS) samples
	cp -a configs $(CURDIR)/debian/tmp/usr/share/asterisk/conf
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/aelparse
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/conf2ael
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/muted
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/streamplayer
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/stereorize
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/hashtest*
	$(RM) -f $(CURDIR)/debian/tmp/usr/sbin/refcounter

override_dh_install:
	dh_install
	extra_packs=`find $(SUBPACKS_EXTRA_DIRS_MOD) -name '*.so' -printf '%f\n'`\
		    ; cd $(CURDIR)/debian/asterisk-modules/usr/lib/asterisk/modules \
		    && rm -f $$extra_packs

	# Rename dh_install file for -imapstorage and -odbcstorage.
	mv $(CURDIR)/debian/asterisk-voicemail-imapstorage/usr/lib/asterisk/modules/app_voicemail_imapstorage.so \
		$(CURDIR)/debian/asterisk-voicemail-imapstorage/usr/lib/asterisk/modules/app_voicemail.so
	mv $(CURDIR)/debian/asterisk-voicemail-odbcstorage/usr/lib/asterisk/modules/app_voicemail_odbcstorage.so \
		$(CURDIR)/debian/asterisk-voicemail-odbcstorage/usr/lib/asterisk/modules/app_voicemail.so

override_dh_fixperms:
	dh_fixperms
	# should follow dh_fixperms; asterisk configurations may contain
	# sensitive information, such as passwords
	if [ -d $(CURDIR)/debian/asterisk-config ]; then \
		chmod o-rwx $(CURDIR)/debian/asterisk-config/etc/asterisk/*; \
		chmod o+rx  $(CURDIR)/debian/asterisk-config/etc/asterisk/manager.d; \
	fi

override_dh_strip:
	dh_strip -a --dbg-package=asterisk-dbg

print-version:
	@@echo "Debian version:          $(DEBVERSION)"
	@@echo "Upstream version:        $(UPVERSION)"

TMP_TARBALL_TOP=../tarballs/asterisk-$(UPVERSION).tmp/asterisk-$(UPVERSION)
get-orig-source:
	@@dh_testdir
	#@@[ -d ../tarballs/. ]||mkdir -p ../tarballs
	#@@echo Downloading $(FILENAME) from $(URL) ...
	#@@wget -nv -T10 -t3 -O ../tarballs/$(FILENAME) $(URL)
	@echo Downloading $(UPFILENAME) from $(URL) ...
	@wget -nv -T10 -t3 -O ../tarballs/$(UPFILENAME) $(URL)
	@echo Repacking as DFSG-free...
	@mkdir -p ../tarballs/asterisk-$(UPVERSION).tmp/
	@cd ../tarballs/asterisk-$(UPVERSION).tmp ; \
		tar xfz ../$(UPFILENAME)
	# in case the tarball is not clean:
	@rm -rf $(TMP_TARBALL_TOP)/AST.txt
	@rm -rf $(TMP_TARBALL_TOP)/AST.pdf
	@rm -rf $(TMP_TARBALL_TOP)/doc/Asterisk-Admin-Guide/
	@rm -rf $(TMP_TARBALL_TOP)/doc/Asterisk-Admin-Guide.pdf
	@rm -rf $(TMP_TARBALL_TOP)/codecs/ilbc
	# While we're at it: remove some generated files that will become
	# invalid:
	@rm -rf $(TMP_TARBALL_TOP)/*/.makeopts
	@rm -rf $(TMP_TARBALL_TOP)/*/.*.makeopts
	@rm -rf $(TMP_TARBALL_TOP)/*/.moduleinfo
	@rm -rf $(TMP_TARBALL_TOP)/*/.*.moduleinfo
	# And some large sound files we already ship in a different package:
	@rm -rf $(TMP_TARBALL_TOP)/sounds/*.tar.gz
	@cd ../tarballs/asterisk-$(UPVERSION).tmp ; \
	 	tar cf - * | gzip -9 >../$(FILENAME)
	@echo Cleaning up...
	@$(RM) -rf ../tarballs/asterisk-$(UPVERSION).tmp/

# .PHONY: binary-indep binary-arch binary install
