/*
 Main

 Copyright (C) 2004 Pluto, Inc., a Florida Corporation

 www.plutohome.com
 

 Phone: +1 (877) 758-8648


 This program is distributed according to the terms of the Pluto Public License, available at:
 http://plutohome.com/index.php?section=public_license

 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. See the Pluto Public License for more details.

 */
#include "PlutoUtils/FileUtils.h"
#include "PlutoUtils/StringUtils.h"
#include "PlutoUtils/Other.h"
#include "Logger.h"
#include "UpdateEntArea.h"
#include "CommandGroupArray.h"

#include "pluto_main/Table_CommandGroup.h"
#include "pluto_main/Table_CommandGroup_Room.h"
#include "pluto_main/Table_CommandGroup_EntertainArea.h"
#include "pluto_main/Table_CommandGroup_Command.h"
#include "pluto_main/Table_CommandGroup_Command_CommandParameter.h"

bool g_bChangedScenarios=false;

using namespace DefaultScenarios;

CommandGroup *CommandGroupArray::FindCommandGroupByTemplate(int PK_Template,string sDescription,int PK_Icon,int TemplateParm1,int TemplateParm2,int *PK_CommandGroup,int Sort,int PK_Text)
{
	CommandGroup *pCommandGroup = m_mapCommandGroup_Find(PK_Template,TemplateParm1,TemplateParm2);
	if( pCommandGroup )
	{
		if( PK_CommandGroup )
			*PK_CommandGroup = pCommandGroup->m_pRow_CommandGroup->PK_CommandGroup_get();
		return pCommandGroup;
	}

	LoggerWrapper::GetInstance()->Write(LV_STATUS,"FindCommandGroupByTemplate: PK_Text=%d", PK_Text);

	if( m_pRow_Room )
		return FindCommandGroupByTemplate(m_pRow_Room,PK_Template,sDescription,PK_Icon,TemplateParm1,TemplateParm2,PK_CommandGroup,Sort,PK_Text);
	else if( m_pRow_EntertainArea )
		return FindCommandGroupByTemplate(m_pRow_EntertainArea,PK_Template,sDescription,PK_Icon,TemplateParm1,TemplateParm2,PK_CommandGroup,Sort,PK_Text);
	else
		return FindCommandGroupByTemplate_NoRoom(PK_Template,sDescription,PK_Icon,TemplateParm1,TemplateParm2,PK_CommandGroup,PK_Text);
	return NULL;
}

CommandGroup *CommandGroupArray::FindCommandGroupByTemplate_NoRoom(int PK_Template,string sDescription,int PK_Icon,int TemplateParm1,int TemplateParm2,int *PK_CommandGroup,int PK_Text)
{
	string SQL = "FK_Template=" + StringUtils::itos(PK_Template) + " AND FK_Array=" + StringUtils::itos(m_PK_Array) +
		" AND TemplateParm1=" + StringUtils::itos(TemplateParm1) +
		" AND TemplateParm2=" + StringUtils::itos(TemplateParm2);

	vector<Row_CommandGroup *> vectRow_CommandGroup;
	m_pDatabase_pluto_main->CommandGroup_get()->GetRows(SQL,&vectRow_CommandGroup);

	Row_CommandGroup *pRow_CommandGroup=NULL;
	bool bExistingCommandGroup=false;
	if( vectRow_CommandGroup.size() )
	{
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"We have %d CommandGroup ...", vectRow_CommandGroup.size());
		
		for(size_t s=1;s<vectRow_CommandGroup.size();++s) // There should only be one, delete any extras
			DeleteCommandGroup(vectRow_CommandGroup[s]);
		if( PK_CommandGroup )
			*PK_CommandGroup = vectRow_CommandGroup[0]->PK_CommandGroup_get();
		if( CommandGroupIsModified(vectRow_CommandGroup[0]) )  // If the user is making manual changes, we don't want to touch it
			return NULL;
		pRow_CommandGroup = vectRow_CommandGroup[0];
		bExistingCommandGroup=true;
	}
	else if( PK_CommandGroup )
	{
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"PK_CommandGroup %d", PK_CommandGroup);

		*PK_CommandGroup = 0;
		return NULL;
	}
	else
		pRow_CommandGroup = m_pDatabase_pluto_main->CommandGroup_get()->AddRow();

	pRow_CommandGroup->Hint_set( "" );
	pRow_CommandGroup->FK_Template_set(PK_Template);
	pRow_CommandGroup->Description_set(sDescription);
	
	LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added Description %s for template %d and PK_Text %d", sDescription.c_str(), PK_Template, PK_Text);
	
	pRow_CommandGroup->FK_Installation_set( m_iPK_Installation );
	pRow_CommandGroup->FK_Array_set( m_PK_Array );
	if( PK_Icon )
		pRow_CommandGroup->FK_Icon_set( PK_Icon );
	else
		pRow_CommandGroup->FK_Icon_setNull( true );

	pRow_CommandGroup->TemplateParm1_set(TemplateParm1);
	pRow_CommandGroup->TemplateParm2_set(TemplateParm2);
	if( !bExistingCommandGroup )
		pRow_CommandGroup->AutoGeneratedDate_set(StringUtils::SQLDateTime(time(NULL)));
	m_pDatabase_pluto_main->CommandGroup_get()->Commit();
	LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added %d %s",
		pRow_CommandGroup->PK_CommandGroup_get(),pRow_CommandGroup->Description_get().c_str());
	
	if( PK_Text ) 
	{
		pRow_CommandGroup->FK_Text_set( PK_Text );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added PK_Text %d!", PK_Text);
	} 
	else
	{
		pRow_CommandGroup->FK_Text_setNull( true );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"No PK_Text passed!");
	}	

	return new CommandGroup(this,pRow_CommandGroup);
}

Row_CommandGroup *CommandGroupArray::FindCommandGroupByTemplate(Row_Room *pRow_Room,int PK_Array,int PK_Template,int TemplateParm1,int TemplateParm2)
{
	string SQL = "JOIN CommandGroup_Room ON FK_CommandGroup=PK_CommandGroup WHERE FK_Room=" + StringUtils::itos(pRow_Room->PK_Room_get()) + 
		" AND FK_Template=" + StringUtils::itos(PK_Template) + " AND FK_Array=" + StringUtils::itos(PK_Array) +
		" AND TemplateParm1=" + StringUtils::itos(TemplateParm1) +
		" AND TemplateParm2=" + StringUtils::itos(TemplateParm2);

	vector<Row_CommandGroup *> vectRow_CommandGroup;
	pRow_Room->Table_Room_get()->Database_pluto_main_get()->CommandGroup_get()->GetRows(SQL,&vectRow_CommandGroup);

	if( vectRow_CommandGroup.size() )
		return vectRow_CommandGroup[0];
	else
		return NULL;
}

CommandGroup *CommandGroupArray::FindCommandGroupByTemplate(Row_Room *pRow_Room,int PK_Template,string sDescription,int PK_Icon,int TemplateParm1,int TemplateParm2,int *PK_CommandGroup,int Sort,int PK_Text)
{
	string SQL = "JOIN CommandGroup_Room ON FK_CommandGroup=PK_CommandGroup WHERE FK_Room=" + StringUtils::itos(pRow_Room->PK_Room_get()) + 
		" AND FK_Template=" + StringUtils::itos(PK_Template) + " AND FK_Array=" + StringUtils::itos(m_PK_Array) +
		" AND TemplateParm1=" + StringUtils::itos(TemplateParm1) +
		" AND TemplateParm2=" + StringUtils::itos(TemplateParm2);

	vector<Row_CommandGroup *> vectRow_CommandGroup;
	m_pDatabase_pluto_main->CommandGroup_get()->GetRows(SQL,&vectRow_CommandGroup);

	Row_CommandGroup *pRow_CommandGroup=NULL;
	bool bExistingCommandGroup=false;
	if( vectRow_CommandGroup.size() )
	{
		for(size_t s=1;s<vectRow_CommandGroup.size();++s) // There should only be one, delete any extras
			DeleteCommandGroup(vectRow_CommandGroup[s]);
		if( PK_CommandGroup )
			*PK_CommandGroup = vectRow_CommandGroup[0]->PK_CommandGroup_get();
		if( CommandGroupIsModified(vectRow_CommandGroup[0]) )  // If the user is making manual changes, we don't want to touch it
			return NULL;
		pRow_CommandGroup = vectRow_CommandGroup[0];
		bExistingCommandGroup=true;
	}
	else if( PK_CommandGroup )
	{
		*PK_CommandGroup = 0;
		return NULL;
	}
	else
		pRow_CommandGroup = m_pDatabase_pluto_main->CommandGroup_get()->AddRow();

	pRow_CommandGroup->Hint_set( pRow_Room->Description_get() );
	pRow_CommandGroup->FK_Template_set(PK_Template);
	pRow_CommandGroup->Description_set(sDescription);
	pRow_CommandGroup->FK_Installation_set( m_iPK_Installation );
	pRow_CommandGroup->FK_Array_set( m_PK_Array );
	if( PK_Icon )
		pRow_CommandGroup->FK_Icon_set( PK_Icon );
	else
		pRow_CommandGroup->FK_Icon_setNull( true );
	pRow_CommandGroup->TemplateParm1_set(TemplateParm1);
	pRow_CommandGroup->TemplateParm2_set(TemplateParm2);
	if( !bExistingCommandGroup )
		pRow_CommandGroup->AutoGeneratedDate_set(StringUtils::SQLDateTime(time(NULL)));
	m_pDatabase_pluto_main->CommandGroup_get()->Commit();
	LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added room %d %s ea: %d %s hint: %s",
		pRow_CommandGroup->PK_CommandGroup_get(),pRow_CommandGroup->Description_get().c_str(),
		pRow_Room->PK_Room_get(), pRow_Room->Description_get().c_str(),
		pRow_CommandGroup->Hint_get().c_str());
	
	if( !bExistingCommandGroup )
	{
		Row_CommandGroup_Room *pRow_CommandGroup_Room = m_pDatabase_pluto_main->CommandGroup_Room_get()->AddRow();
		pRow_CommandGroup_Room->FK_CommandGroup_set(pRow_CommandGroup->PK_CommandGroup_get());
		pRow_CommandGroup_Room->FK_Room_set(pRow_Room->PK_Room_get());
		pRow_CommandGroup_Room->Sort_set(Sort ? GetUnusedSortNo(Sort) : pRow_CommandGroup->PK_CommandGroup_get());
		m_pDatabase_pluto_main->CommandGroup_Room_get()->Commit();
	}
	
	if( PK_Text ) 
	{
		pRow_CommandGroup->FK_Text_set( PK_Text );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added PK_Text %d!", PK_Text);
	} 
	else
	{
		pRow_CommandGroup->FK_Text_setNull( true );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"No PK_Text passed!");
	}	
	
	return new CommandGroup(this,pRow_CommandGroup);
}

CommandGroup *CommandGroupArray::FindCommandGroupByTemplate(Row_EntertainArea *pRow_EntertainArea,int PK_Template,string sDescription,int PK_Icon,int TemplateParm1,int TemplateParm2,int *PK_CommandGroup,int Sort,int PK_Text)
{
	string SQL = "JOIN CommandGroup_EntertainArea ON FK_CommandGroup=PK_CommandGroup WHERE FK_EntertainArea=" + StringUtils::itos(pRow_EntertainArea->PK_EntertainArea_get()) + 
		" AND FK_Template=" + StringUtils::itos(PK_Template) +
		" AND TemplateParm1=" + StringUtils::itos(TemplateParm1) +
		" AND TemplateParm2=" + StringUtils::itos(TemplateParm2);

	vector<Row_CommandGroup *> vectRow_CommandGroup;
	m_pDatabase_pluto_main->CommandGroup_get()->GetRows(SQL,&vectRow_CommandGroup);

	Row_CommandGroup *pRow_CommandGroup=NULL;
	bool bExistingCommandGroup=false;
	if( vectRow_CommandGroup.size() )
	{
		for(size_t s=1;s<vectRow_CommandGroup.size();++s) // There should only be one, delete any extras
			DeleteCommandGroup(vectRow_CommandGroup[s]);

		if( PK_CommandGroup )
			*PK_CommandGroup = vectRow_CommandGroup[0]->PK_CommandGroup_get();

		if( CommandGroupIsModified(vectRow_CommandGroup[0]) )  // If the user is making manual changes, we don't want to touch it
			return NULL;
		pRow_CommandGroup = vectRow_CommandGroup[0];
		bExistingCommandGroup=true;
	}
	else if( PK_CommandGroup )
	{
		*PK_CommandGroup = 0;
		return NULL;
	}
	else
		pRow_CommandGroup = m_pDatabase_pluto_main->CommandGroup_get()->AddRow();

	pRow_CommandGroup->Hint_set( pRow_EntertainArea->Description_get() );
	pRow_CommandGroup->FK_Template_set(PK_Template);
	pRow_CommandGroup->Description_set(sDescription);
	pRow_CommandGroup->FK_Installation_set( m_iPK_Installation );
	pRow_CommandGroup->FK_Array_set( m_PK_Array );
	if( PK_Icon )
		pRow_CommandGroup->FK_Icon_set( PK_Icon );
	else
		pRow_CommandGroup->FK_Icon_setNull( true );
	pRow_CommandGroup->TemplateParm1_set(TemplateParm1);
	pRow_CommandGroup->TemplateParm2_set(TemplateParm2);
	if( !bExistingCommandGroup )
		pRow_CommandGroup->AutoGeneratedDate_set(StringUtils::SQLDateTime(time(NULL)));
	if( PK_Text ) 
	{
		pRow_CommandGroup->FK_Text_set( PK_Text );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added PK_Text %d!", PK_Text);
	} 
	else
	{
		pRow_CommandGroup->FK_Text_setNull( true );
		LoggerWrapper::GetInstance()->Write(LV_STATUS,"No PK_Text passed!");
	}	
	m_pDatabase_pluto_main->CommandGroup_get()->Commit();
	LoggerWrapper::GetInstance()->Write(LV_STATUS,"Added entertainment area %d %s ea: %d %s hint: %s and text %d",
		pRow_CommandGroup->PK_CommandGroup_get(),pRow_CommandGroup->Description_get().c_str(),
		pRow_EntertainArea->PK_EntertainArea_get(), pRow_EntertainArea->Description_get().c_str(),
		pRow_CommandGroup->Hint_get().c_str(), pRow_CommandGroup->FK_Text_get());

	if( !bExistingCommandGroup )
	{
		Row_CommandGroup_EntertainArea *pRow_CommandGroup_EntertainArea = m_pDatabase_pluto_main->CommandGroup_EntertainArea_get()->AddRow();
		pRow_CommandGroup_EntertainArea->FK_CommandGroup_set(pRow_CommandGroup->PK_CommandGroup_get());
		pRow_CommandGroup_EntertainArea->FK_EntertainArea_set(pRow_EntertainArea->PK_EntertainArea_get());
		pRow_CommandGroup_EntertainArea->Sort_set(Sort ? GetUnusedSortNo(Sort) : pRow_CommandGroup->PK_CommandGroup_get());
		m_pDatabase_pluto_main->CommandGroup_EntertainArea_get()->Commit();
	}

	return new CommandGroup(this,pRow_CommandGroup);
}

CommandGroupArray::~CommandGroupArray()
{
	if( m_bAutoDelete )
		DeleteUnusedCommandGroups();

	for(map< pair<int, pair<int,int> >,CommandGroup *>::iterator it=m_mapCommandGroup.begin();it!=m_mapCommandGroup.end();++it)
		it->second->Commit();

	m_pDatabase_pluto_main->CommandGroup_get()->Commit();
	m_pDatabase_pluto_main->CommandGroup_Command_get()->Commit();
	m_pDatabase_pluto_main->CommandGroup_Command_CommandParameter_get()->Commit();
	m_pDatabase_pluto_main->CommandGroup_EntertainArea_get()->Commit();
	m_pDatabase_pluto_main->CommandGroup_Room_get()->Commit();

	for(map< pair<int, pair<int,int> >,CommandGroup *>::iterator it=m_mapCommandGroup.begin();it!=m_mapCommandGroup.end();++it)
	{
		it->second->Flush();
		Reset_psc_mod(it->second);
		delete it->second;
	}
	m_mapCommandGroup.clear();
}

void CommandGroupArray::Reset_psc_mod(CommandGroup *pCommandGroup)
{
if( pCommandGroup->m_pRow_CommandGroup->Description_get().find("Panasonic")!=string::npos )
int k=2;
	string sPK_CommandGroup = StringUtils::itos(pCommandGroup->m_pRow_CommandGroup->PK_CommandGroup_get());
	string sSQL = "UPDATE CommandGroup set psc_mod=0 WHERE PK_CommandGroup=" + sPK_CommandGroup;
	if( m_pDatabase_pluto_main->threaded_db_wrapper_query(sSQL) )
		g_bChangedScenarios=true;

	sSQL = "UPDATE CommandGroup_Command set psc_mod=0 WHERE FK_CommandGroup=" + sPK_CommandGroup;
	if( m_pDatabase_pluto_main->threaded_db_wrapper_query(sSQL) )
		g_bChangedScenarios=true;

	sSQL = "UPDATE CommandGroup_Command_CommandParameter JOIN CommandGroup_Command ON FK_CommandGroup_Command=PK_CommandGroup_Command set CommandGroup_Command_CommandParameter.psc_mod=0 WHERE FK_CommandGroup=" + sPK_CommandGroup;
	if( m_pDatabase_pluto_main->threaded_db_wrapper_query(sSQL) )
		g_bChangedScenarios=true;

	sSQL = "UPDATE CommandGroup_Room set psc_mod=0 WHERE FK_CommandGroup=" + sPK_CommandGroup;
	if( m_pDatabase_pluto_main->threaded_db_wrapper_query(sSQL) )
		g_bChangedScenarios=true;

	sSQL = "UPDATE CommandGroup_EntertainArea set psc_mod=0 WHERE FK_CommandGroup=" + sPK_CommandGroup;
	if( m_pDatabase_pluto_main->threaded_db_wrapper_query(sSQL) )
		g_bChangedScenarios=true;
}

void CommandGroup::AddCommand(int PK_Device,int PK_Command,int iOrder,int NumParms,...)
{
	Command *pCommand = new Command(this,PK_Device,PK_Command,iOrder);
	m_listCommand.push_back( pCommand );

	va_list marker;
	va_start( marker, NumParms );
	for( unsigned long i=0; i < NumParms; i++ )
	{
		unsigned long PK_CommandParameter = va_arg( marker, unsigned long );
		pCommand->m_mapParameters[PK_CommandParameter] = va_arg( marker, char* );
	}
	va_end( marker );
}

void CommandGroupArray::DeleteCommandGroup(Row_CommandGroup *pRow_CommandGroup)
{
	vector<Row_CommandGroup_Command *> vectRow_CommandGroup_Command;
	pRow_CommandGroup->CommandGroup_Command_FK_CommandGroup_getrows(&vectRow_CommandGroup_Command);
	for(size_t s=0;s<vectRow_CommandGroup_Command.size();++s)
	{
		Row_CommandGroup_Command *pRow_CommandGroup_Command = vectRow_CommandGroup_Command[s];
		DeleteCommandGroup_Command(pRow_CommandGroup_Command);
	}

	vector<Row_CommandGroup_EntertainArea *> vectRow_CommandGroup_EntertainArea;
	pRow_CommandGroup->CommandGroup_EntertainArea_FK_CommandGroup_getrows(&vectRow_CommandGroup_EntertainArea);
	for(size_t s=0;s<vectRow_CommandGroup_EntertainArea.size();++s)
		vectRow_CommandGroup_EntertainArea[s]->Delete();

	vector<Row_CommandGroup_Room *> vectRow_CommandGroup_Room;
	pRow_CommandGroup->CommandGroup_Room_FK_CommandGroup_getrows(&vectRow_CommandGroup_Room);
	for(size_t s=0;s<vectRow_CommandGroup_Room.size();++s)
		vectRow_CommandGroup_Room[s]->Delete();

	pRow_CommandGroup->Delete();
}

void CommandGroupArray::DeleteCommandGroup_Command(Row_CommandGroup_Command *pRow_CommandGroup_Command)
{
	vector<Row_CommandGroup_Command_CommandParameter *> vectRow_CommandGroup_Command_CommandParameter;
	pRow_CommandGroup_Command->CommandGroup_Command_CommandParameter_FK_CommandGroup_Command_getrows(&vectRow_CommandGroup_Command_CommandParameter);
	for(size_t s=0;s<vectRow_CommandGroup_Command_CommandParameter.size();++s)
		vectRow_CommandGroup_Command_CommandParameter[s]->Delete();
	pRow_CommandGroup_Command->Delete();
}

void CommandGroupArray::DeleteUnusedCommandGroups()
{
	if( m_pRow_EntertainArea )
		DeleteUnusedCommandGroups(m_pRow_EntertainArea);
	else if( m_pRow_Room )
		DeleteUnusedCommandGroups(m_pRow_Room);
}

void CommandGroupArray::DeleteUnusedCommandGroups(Row_EntertainArea *pRow_EntertainArea)
{
	vector<Row_CommandGroup_EntertainArea *> vectRow_CommandGroup_EntertainArea;
	string sSQL = "JOIN CommandGroup ON FK_CommandGroup=PK_CommandGroup "
		"WHERE FK_EntertainArea=" + StringUtils::itos(pRow_EntertainArea->PK_EntertainArea_get()) +
		" AND FK_Array=" + StringUtils::itos(m_PK_Array) + " AND AutoGeneratedDate>0";

	m_pDatabase_pluto_main->CommandGroup_EntertainArea_get()->GetRows(sSQL,&vectRow_CommandGroup_EntertainArea);
	for(size_t s=0;s<vectRow_CommandGroup_EntertainArea.size();++s)
	{
		Row_CommandGroup *pRow_CommandGroup = vectRow_CommandGroup_EntertainArea[s]->FK_CommandGroup_getrow();
		if( pRow_CommandGroup && !CommandGroupIsModified(pRow_CommandGroup) )
		{
			CommandGroup *pCommandGroup = m_mapCommandGroup_Find(pRow_CommandGroup->FK_Template_get(),
				pRow_CommandGroup->TemplateParm1_get(),pRow_CommandGroup->TemplateParm2_get());
			if( !pCommandGroup )
				DeleteCommandGroup(pRow_CommandGroup);
		}
	}
}

void CommandGroupArray::DeleteUnusedCommandGroups(Row_Room *pRow_Room)
{
	vector<Row_CommandGroup_Room *> vectRow_CommandGroup_Room;
	string sSQL = "JOIN CommandGroup ON FK_CommandGroup=PK_CommandGroup "
		"WHERE FK_Room=" + StringUtils::itos(pRow_Room->PK_Room_get()) +
		" AND FK_Array=" + StringUtils::itos(m_PK_Array) + " AND AutoGeneratedDate>0";

	m_pDatabase_pluto_main->CommandGroup_Room_get()->GetRows(sSQL,&vectRow_CommandGroup_Room);
	for(size_t s=0;s<vectRow_CommandGroup_Room.size();++s)
	{
		Row_CommandGroup *pRow_CommandGroup = vectRow_CommandGroup_Room[s]->FK_CommandGroup_getrow();
		if( pRow_CommandGroup && !CommandGroupIsModified(pRow_CommandGroup) )
		{
			CommandGroup *pCommandGroup = m_mapCommandGroup_Find(pRow_CommandGroup->FK_Template_get(),
				pRow_CommandGroup->TemplateParm1_get(),pRow_CommandGroup->TemplateParm2_get());
			if( !pCommandGroup )
				DeleteCommandGroup(pRow_CommandGroup);
		}
	}
}

CommandGroup::CommandGroup(CommandGroupArray *pCommandGroupArray,Row_CommandGroup *pRow_CommandGroup)
{
	m_bIsModified=false;
	pair<int,int> p12 = make_pair<int,int> (pRow_CommandGroup->TemplateParm1_get(),pRow_CommandGroup->TemplateParm2_get()); 
	
	m_pCommandGroupArray=pCommandGroupArray;
	m_pRow_CommandGroup=pRow_CommandGroup;
	m_pDatabase_pluto_main=m_pRow_CommandGroup->Table_CommandGroup_get()->Database_pluto_main_get();
	m_pCommandGroupArray->m_mapCommandGroup[
		make_pair<int, pair<int,int> > ( pRow_CommandGroup->FK_Template_get(), p12 )
	] = this;
}

CommandGroup::~CommandGroup()
{
	if( m_bIsModified && m_pRow_CommandGroup )
	{
		m_pRow_CommandGroup->AutoGeneratedDate_set(StringUtils::SQLDateTime(time(NULL)));
		m_pRow_CommandGroup->Table_CommandGroup_get()->Commit();
		m_bIsModified=false;
	}
}

void CommandGroup::Flush()
{
	if( m_bIsModified && m_pRow_CommandGroup )
	{
		m_pRow_CommandGroup->AutoGeneratedDate_set(StringUtils::SQLDateTime(time(NULL)));
		m_pRow_CommandGroup->Table_CommandGroup_get()->Commit();
		m_bIsModified=false;
	}
}

static bool CommandComparer(Command *x, Command *y)
{
	return x->m_iOrder<y->m_iOrder;
}

void CommandGroup::Commit()
{
	vector<Row_CommandGroup_Command *> vectRow_CommandGroup_Command;
	m_pDatabase_pluto_main->CommandGroup_Command_get()->
		GetRows("FK_CommandGroup="+StringUtils::itos(m_pRow_CommandGroup->PK_CommandGroup_get()) + " ORDER BY OrderNum",
		&vectRow_CommandGroup_Command);

	m_listCommand.sort(CommandComparer);
	int iRecordCounter=0;
	for(list<Command *>::iterator it=m_listCommand.begin();it!=m_listCommand.end();++it)
		(*it)->Commit( iRecordCounter<vectRow_CommandGroup_Command.size() ? vectRow_CommandGroup_Command[iRecordCounter++] : NULL );

	for(size_t s=iRecordCounter;s<vectRow_CommandGroup_Command.size();++s)
		m_pCommandGroupArray->DeleteCommandGroup_Command(vectRow_CommandGroup_Command[s]);
}

void Command::Commit(Row_CommandGroup_Command *pRow_CommandGroup_Command)
{
	if( !pRow_CommandGroup_Command )
		pRow_CommandGroup_Command = m_pCommandGroup->m_pDatabase_pluto_main->CommandGroup_Command_get()->AddRow();

	pRow_CommandGroup_Command->FK_CommandGroup_set( m_pCommandGroup->m_pRow_CommandGroup->PK_CommandGroup_get() );
	if( pRow_CommandGroup_Command->FK_Device_get()!=m_PK_Device ||
		pRow_CommandGroup_Command->FK_Command_get()!=m_PK_Command ||
		pRow_CommandGroup_Command->OrderNum_get()!=m_iOrder )
	{
		m_pCommandGroup->m_bIsModified=true;
		pRow_CommandGroup_Command->FK_Device_set(m_PK_Device);
		pRow_CommandGroup_Command->FK_Command_set(m_PK_Command);
		pRow_CommandGroup_Command->OrderNum_set(m_iOrder);
		pRow_CommandGroup_Command->Table_CommandGroup_Command_get()->Commit(); // We need the PK_ if this was added
	}

	for(map<int,string>::iterator it=m_mapParameters.begin();it!=m_mapParameters.end();++it)
	{
		Row_CommandGroup_Command_CommandParameter *pRow_CommandGroup_Command_CommandParameter = 
			m_pCommandGroup->m_pDatabase_pluto_main->CommandGroup_Command_CommandParameter_get()->GetRow(
				pRow_CommandGroup_Command->PK_CommandGroup_Command_get(),it->first);

		if( !pRow_CommandGroup_Command_CommandParameter )
			pRow_CommandGroup_Command_CommandParameter = 
				m_pCommandGroup->m_pDatabase_pluto_main->CommandGroup_Command_CommandParameter_get()->AddRow();

		if( pRow_CommandGroup_Command_CommandParameter->FK_CommandGroup_Command_get()!=pRow_CommandGroup_Command->PK_CommandGroup_Command_get() ||
			pRow_CommandGroup_Command_CommandParameter->FK_CommandParameter_get() != it->first ||
			pRow_CommandGroup_Command_CommandParameter->IK_CommandParameter_get()!=it->second )
		{
			m_pCommandGroup->m_bIsModified=true;
			pRow_CommandGroup_Command_CommandParameter->FK_CommandGroup_Command_set(pRow_CommandGroup_Command->PK_CommandGroup_Command_get());
			pRow_CommandGroup_Command_CommandParameter->FK_CommandParameter_set(it->first);
			pRow_CommandGroup_Command_CommandParameter->IK_CommandParameter_set(it->second);
		}
	}

	vector<Row_CommandGroup_Command_CommandParameter *> vectRow_CommandGroup_Command_CommandParameter;
	pRow_CommandGroup_Command->CommandGroup_Command_CommandParameter_FK_CommandGroup_Command_getrows(&vectRow_CommandGroup_Command_CommandParameter);
	for(size_t s=0;s<vectRow_CommandGroup_Command_CommandParameter.size();++s)
	{
		Row_CommandGroup_Command_CommandParameter *pRow_CommandGroup_Command_CommandParameter = vectRow_CommandGroup_Command_CommandParameter[s];
		if( m_mapParameters.find( pRow_CommandGroup_Command_CommandParameter->FK_CommandParameter_get() )==m_mapParameters.end() )
			pRow_CommandGroup_Command_CommandParameter->Delete();
	}
}

bool CommandGroupArray::CommandGroupIsModified(Row_CommandGroup *pRow_CommandGroup)
{
	PlutoSqlResult result_set1,result_set2,result_set3;

	// Check for modifications in all related tables
	string sSQL = "SELECT PK_CommandGroup FROM CommandGroup "
		"LEFT JOIN CommandGroup_Command ON FK_CommandGroup=PK_CommandGroup "
		"LEFT JOIN CommandGroup_Command_CommandParameter ON FK_CommandGroup_Command=PK_CommandGroup_Command "
		"WHERE FK_CommandGroup=" + 
		StringUtils::itos(pRow_CommandGroup->PK_CommandGroup_get()) + " AND "
		"(CommandGroup.psc_mod>0 OR CommandGroup_Command.psc_mod>0 OR CommandGroup_Command_CommandParameter.psc_mod>0) LIMIT 1";

	if( (result_set1.r=m_pDatabase_pluto_main->db_wrapper_query_result(sSQL)) && result_set1.r->row_count )
		return true;

	sSQL = "SELECT FK_CommandGroup FROM CommandGroup_Room "
		"WHERE FK_CommandGroup=" + 
		StringUtils::itos(pRow_CommandGroup->PK_CommandGroup_get()) + " AND "
		"psc_mod>0 LIMIT 1";

	if( (result_set2.r=m_pDatabase_pluto_main->db_wrapper_query_result(sSQL)) && result_set2.r->row_count )
		return true;

	sSQL = "SELECT FK_CommandGroup FROM CommandGroup_EntertainArea "
		"WHERE FK_CommandGroup=" + 
		StringUtils::itos(pRow_CommandGroup->PK_CommandGroup_get()) + " AND "
		"psc_mod>0 LIMIT 1";

	if( (result_set3.r=m_pDatabase_pluto_main->db_wrapper_query_result(sSQL)) && result_set3.r->row_count )
		return true;

	return false;
}

int CommandGroupArray::GetUnusedSortNo(int preferedOrder)
{

	string SQL = "";
	if ( m_pRow_Room )
	{
		SQL = "JOIN CommandGroup_Room ON FK_CommandGroup=PK_CommandGroup WHERE FK_Room=" + StringUtils::itos(m_pRow_Room->PK_Room_get());
	}
	else if ( m_pRow_EntertainArea ) 
	{
		SQL = "JOIN CommandGroup_EntertainArea ON FK_CommandGroup=PK_CommandGroup WHERE FK_EntertainArea=" + StringUtils::itos(m_pRow_EntertainArea->PK_EntertainArea_get());		
	}
	else 
	{
		// no room and no area, just return prefered order number
		return preferedOrder;
	}
	SQL += " AND Sort = " + StringUtils::itos(preferedOrder);
	vector<Row_CommandGroup *> vectRow_CommandGroup;
	m_pDatabase_pluto_main->CommandGroup_get()->GetRows(SQL,&vectRow_CommandGroup);
	if( vectRow_CommandGroup.size() )
	{
		return GetUnusedSortNo(preferedOrder+1);
	}
	else
	{
		return preferedOrder;
	}
}
