#!/bin/bash

###########################################################
### Setup global variables
###########################################################

HOST_DISTRO=$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')
HOST_RELEASE=$(lsb_release -c -s)
HOST_ARCH=$(apt-config dump | grep 'APT::Architecture' | sed 's/.*"\(.*\)".*/\1/g' | head -1)
DEB_CACHE=$HOST_DISTRO-$HOST_RELEASE-$HOST_ARCH

LOCAL_REPO_BASE=/usr/pluto/deb-cache/$DEB_CACHE
LOCAL_REPO_DIR=./
DT_CORE=1
DT_HYBRID=2
DT_MEDIA_DIRECTOR=3
mce_wizard_data_shell=/tmp/mce_wizard_data.sh
#Setup Pathing
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin


###########################################################
### Setup Functions - Error checking and logging
###########################################################

StatsMessage () {
	printf "`date` - $* \n"
}


###########################################################
### Setup Functions - General functions
###########################################################

UpdateUpgrade () {
	#perform an update and a dist-upgrade
	StatsMessage "Performing an update and an upgrade to all components"
	apt-get -qq update
	apt-get -y -q -f --force-yes dist-upgrade
}

TimeUpdate () {
	StatsMessage "Synchronizing time with an online server"
	#Update system time to match ntp server
	ntpdate ntp.ubuntu.com
}

Fix_Initrd_Vmlinux () {
	StatsMessage "Starting initrd and vmlinuz fix"
	# Fix a problem with the /initrd.img and /vmlinuz links pointing to a different kernel than the
	# newest (and currently running) one
	LATEST_KERNEL=`ls /lib/modules --sort time --group-directories-first|head -1`
	KERNEL_TO_USE=`uname -r`

	if [ -f "/boot/initrd.img-$LATEST_KERNEL" ]; then
		KERNEL_TO_USE=$LATEST_KERNEL
	fi
	ln -s -f /boot/initrd.img-$KERNEL_TO_USE /initrd.img
	ln -s -f /boot/vmlinuz-$KERNEL_TO_USE /vmlinuz
}

CleanInstallSteps () {
	if [[ -f /etc/pluto/install_cleandb ]]; then
		# on upgrade, the old keys are already in place, so keep them
		rm -f /etc/ssh/ssh_host_*
		dpkg-reconfigure -pcritical openssh-server

		PostInstPkg=(
		pluto-local-database pluto-media-database pluto-security-database pluto-system-database
		pluto-telecom-database lmce-asterisk
		)

		for Pkg in "${PostInstPkg[@]}"; do
			/var/lib/dpkg/info/"$Pkg".postinst configure
		done

		. /usr/pluto/bin/SQL_Ops.sh
		. /usr/pluto/bin/Config_Ops.sh

			# Raise max char limit on php.ini
			if ! grep -q 'max_input_vars' /etc/php5/apache2/php.ini; then 
				echo "max_input_vars = 15000" >> /etc/php5/apache2/php.ini
			fi

		# Mark remote assistance as diabled
		ConfDel remote

		arch=$(apt-config dump | grep 'APT::Architecture' | sed 's/APT::Architecture.*"\(.*\)".*/\1/g')

		# TODO: FIX UP THIS DATA - DO NOT HARDCODE
		Queries=(
		"UPDATE Device_DeviceData
			SET IK_DeviceData=15
			WHERE PK_Device IN (
				SELECT PK_Device FROM Device WHERE FK_DeviceTemplate IN (7, 28)
			)
			AND FK_DeviceData=7"
		"UPDATE Device_DeviceData SET IK_DeviceData='LMCE_CORE_u0804_$arch' WHERE IK_DeviceData='LMCE_CORE_1_1'"
		"UPDATE Device_DeviceData SET IK_DeviceData='LMCE_MD_u0804_i386'   WHERE IK_DeviceData='LMCE_MD_1_1'"
		"UPDATE Device_DeviceData SET IK_DeviceData='0' WHERE FK_DeviceData='234'"
		"UPDATE Device_DeviceData SET IK_DeviceData='i386' WHERE FK_DeviceData='112' AND IK_DeviceData='686'"
	       	 )

		for Q in "${Queries[@]}"; do
			RunSQL "$Q"
		done

		DT_DiskDrive=11
		DiskDrives=$(RunSQL "SELECT PK_Device FROM Device WHERE FK_DeviceTemplate='$DT_DiskDrive'")
		for DiskDrive in $DiskDrives ;do
			DiskDrive_DeviceID=$(Field 1 "$DiskDrive")
			for table in 'CommandGroup_Command' 'Device_Command' 'Device_CommandGroup' 'Device_DeviceData' 'Device_DeviceGroup' 'Device_Device_Related' 'Device_EntertainArea' 'Device_HouseMode' 'Device_Orbiter' 'Device_StartupScript' 'Device_Users' ;do
				RunSQL "DELETE FROM '$table' WHERE FK_DeviceID = '$DiskDrive_DeviceID' LIMIT 1"
			done
			RunSQL "DELETE FROM Device WHERE PK_Device = '$DiskDrive_DeviceID' LIMIT 1"
		done
	fi
}

###########################################################
### Main execution area
###########################################################

start() {

	UpdateUpgrade ## firstboot
	TimeUpdate    ## firstboot
	Fix_Initrd_Vmlinux  ## firstboot
	UpdateUpgrade  ## firstboot
	CleanInstallSteps  ## firstboot
	return 0
}

status() {
	status_of_proc firstboot firstboot
	return $?
}

case "$1" in
	start|"")
		start
		retval=$?
		;;
	restart|reload|force-reload)
		echo "Error: argument '$1' not supported" >&2
		retval=3
		;;
	stop)
		: # No-op
		retval=$?
		;;
	status)
		$1
		retval=$?
		;;
	*)
		echo "Usage: $0 [start|stop|status]" >&2
		retval=3
esac
exit $retval


