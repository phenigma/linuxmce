#!/bin/bash

#set -e

[[ -e /usr/pluto/bin/Config_Ops.sh ]] && . /usr/pluto/bin/Config_Ops.sh

if ([ "$FirstBoot" = "false" ] && [ -n "$PK_Device" ]) ; then
	echo "Skipping firstboot, already completed."
	exit 0
fi

[[ -e /usr/pluto/bin/SQL_Ops.sh ]] && . /usr/pluto/bin/SQL_Ops.sh
[[ -e /usr/pluto/bin/Utils.sh ]] && . /usr/pluto/bin/Utils.sh

###########################################################
### Setup global variables
###########################################################

DEVICEDATA_DISTRO_Raspbian_Wheezy_CONST=19
DEVICEDATA_DISTRO_Ubuntu_Precise_CONST=20
DEVICEDATA_DISTRO_Ubuntu_Trusty_CONST=21

FSTAB_FILE="/etc/fstab"
DEVID_FILE="/etc/Disked_DeviceID"

#INSTALL_KUBUNTU_DESKTOP="yes"
INSTALL_KUBUNTU_DESKTOP="no"

TARGET_DISTRO=$(lsb_release -i -s | tr '[:upper:]' '[:lower:]')
TARGET_RELEASE=$(lsb_release -c -s)
TARGET_ARCH=$(apt-config dump | grep 'APT::Architecture' | sed 's/.*"\(.*\)".*/\1/g' | head -1)

DEB_CACHE="$TARGET_DISTRO-$TARGET_RELEASE-$TARGET_ARCH"

setup_fstab() {
	# Hmm, let's see if the mounts are here, if not add them
	check=$(grep 192.168.80.1 "${FSTAB_FILE}" || :)
	if [ -z "$check" ] ; then
		cat <<-EOF >> "${FSTAB_FILE}"
			192.168.80.1:/usr/pluto/var/                    /usr/pluto/var/         nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/orbiter                 /usr/pluto/orbiter      nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/keys                    /usr/pluto/keys         nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/usr/pluto/deb-cache               /usr/pluto/deb-cache    nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/var/spool/asterisk                /var/spool/asterisk     nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/home                              /home                   nfs4 retrans=10,timeo=50 1 1
			192.168.80.1:/home/cameras                      /home/cameras           nfs4 retrans=10,timeo=50 1 1
			EOF
	fi
	mkdir -p /usr/pluto/var/
	mkdir -p /usr/pluto/orbiter
	mkdir -p /usr/pluto/keys
	mkdir -p /usr/pluto/deb-cache
	mkdir -p /var/spool/asterisk
	mkdir -p /home/cameras
	mount -a || :
}

setup_plutoconf() {
	. /usr/pluto/bin/Config_Ops.sh

	# get PK_Device from "/etc/Disked_DeviceID", created by interactor
	DEVICE=$(cat "$DEVID_FILE")
	[ -n "$PK_Device" ] || ConfSet "PK_Device" "$DEVICE"

	# TODO: start_interactor already did this and put it in the DB
	# TODO: get the data from the DB instead?
	# get PK_Distro from OS
	DISTRO=$(lsb_release -cs)
	case "$DISTRO" in
		precise)
			distro=$DEVICEDATA_DISTRO_Ubuntu_Precise_CONST
	                ;;
		trusty)
			distro=$DEVICEDATA_DISTRO_Ubuntu_Trusty_CONST
	esac
	[ -n "$PK_Distro" ] || [ -n "$distro" ] && ConfSet "PK_Distro" "$distro"

	[ -n "$MySqlHost" ] || ConfSet "MySqlHost" "192.168.80.1"
	[ -n "$MySqlUser" ] || ConfSet "MySqlUser" "root"
	[ -n "$MySqlPassword" ] || ConfSet "MySqlPassword" ""
	[ -n "$MySqlDBName" ] || ConfSet "MySqlDBName" "pluto_main"
	[ -n "$DCERouter" ] || ConfSet "DCERouter" "192.168.80.1"
	[ -n "$MySqlPort" ] || ConfSet "MySqlPort" "3306"
	[ -n "$DCERouterPort" ] || ConfSet "DCERouterPort" "3450"
	[ -n "$AutostartCore" ] || ConfSet "AutostartCore" "0"
	[ -n "$AutostartMedia" ] || ConfSet "AutostartMedia" "1"
	[ -n "$AVWizardDone" ] || ConfSet "AVWizardDone" "0"
}

##########################################################################################################
##########################################################################################################

###########################################################
### Setup Functions - Error checking and logging and trapping
###########################################################

VerifyExitCode () {
        local EXITCODE=$?
        if [ "$EXITCODE" != "0" ] ; then
        	echo "An error (Exit code $EXITCODE) occured during the last action"
        	echo "$1"
                exit 1
        fi
}

StatsMessage () {
	printf "$(date) - $* \n"
}

###########################################################
### Setup Functions - General functions
###########################################################

MD_System_Level_Prep () {
	StatsMessage "Setting up my.cnf"
	# Make sure, the root user is connecting to DCEROUTER for any MySQL connection
	cat <<-EOF > /root/.my.cnf
		[client]
		host = dcerouter
		EOF

	StatsMessage "Setting up sources.list"
	APT_CONFIG=$(grep "linuxmce" /etc/apt/sources.list)
	if [ -z "$APT_CONFIG" ] ; then
		TARGET_REPO_NAME="main"
		cat <<-EOF > /etc/apt/sources.list
			#deb http://10.10.42.99/trusty-i386/ ./
			deb file:/usr/pluto/deb-cache/$DEB_CACHE ./
			deb http://deb.linuxmce.org/ubuntu/ $TARGET_RELEASE $TARGET_REPO_NAME
			deb http://deb.linuxmce.org/ $TARGET_RELEASE $TARGET_REPO_NAME
			deb $TARGET_REPO $TARGET_RELEASE main restricted universe multiverse
			deb $TARGET_REPO $TARGET_RELEASE-updates main restricted universe multiverse
			deb http://security.ubuntu.com/ubuntu/ $TARGET_RELEASE-security main restricted universe multiverse
			#deb http://archive.canonical.com/ubuntu $TARGET_RELEASE partner
			EOF
	fi

	StatsMessage "Setting up SSH"
	if [ ! -f /root/.ssh/authorized_keys ] ; then
		## Setup initial ssh access
		if [ -f /usr/pluto/keys/id_dsa_pluto.pub ] ; then
			mkdir -p /root/.ssh && cat /usr/pluto/keys/id_dsa_pluto.pub >> /root/.ssh/authorized_keys
		fi
	fi

	StatsMessage "Setting up deb-cache"
	#Make sure there is are Packages files on the MD so apt-get update does not fail
	if [ ! -f /usr/pluto/deb-cache/$DEB_CACHE/Packages.gz ] ; then
		mkdir -p /usr/pluto/deb-cache/$DEB_CACHE
		touch  /usr/pluto/deb-cache/$DEB_CACHE/Packages
		gzip -9c < /usr/pluto/deb-cache/$DEB_CACHE/Packages > /usr/pluto/deb-cache/$DEB_CACHE/Packages.gz
	fi

	StatsMessage "Disabling Display Managers"
	echo '/bin/false' > "/etc/X11/default-display-manager"
}

MD_Seamless_Compatability () {
	: # no-op
}

MD_Preseed () {
	StatsMessage "Setting up debconf"
	## Setup debconf interface to 'noninteractive'
	#create preseed file
	cat <<-EOF >/tmp/preseed.cfg
		debconf debconf/frontend	select Noninteractive
		# Choices: critical, high, medium, low
		debconf debconf/priority        select critical
		msttcorefonts   msttcorefonts/http_proxy        string
		msttcorefonts   msttcorefonts/defoma    note
		msttcorefonts   msttcorefonts/dlurl     string
		msttcorefonts   msttcorefonts/savedir   string
		msttcorefonts   msttcorefonts/baddldir  note
		msttcorefonts   msttcorefonts/dldir     string
		msttcorefonts   msttcorefonts/blurb     note
		msttcorefonts   msttcorefonts/accepted-mscorefonts-eula boolean true
		msttcorefonts   msttcorefonts/present-mscorefonts-eula  boolean false
		sun-java6-bin   shared/accepted-sun-dlj-v1-1    boolean true
		sun-java6-jre   shared/accepted-sun-dlj-v1-1    boolean true
		sun-java6-jre   sun-java6-jre/jcepolicy note
		sun-java6-jre   sun-java6-jre/stopthread        boolean true
		debconf debconf/frontend        select Noninteractive
		# Choices: critical, high, medium, low
		debconf debconf/priority        select critical
		EOF
	debconf-set-selections /tmp/preseed.cfg

	StatsMessage "Updating the apt package lists"
	apt-get -y -qq update
	VerifyExitCode "apt update"

	StatsMessage "Setting up and unconfigured packages"
	apt-get -f -y install

	StatsMessage "Setting Boot Scripts helper package"
	apt-get -f -y --no-install-recommends install pluto-boot-scripts
}

MD_Install_Packages () {
	StatsMessage "Installing packages to MD"
	apt-get -y --no-install-recommends dist-upgrade
	VerifyExitCode "dist-upgrade failed"

	apt-get -f -y --no-install-recommends install pluto-confirm-dependencies lmce-launch-manager
	VerifyExitCode "Install pluto-confirm-dependencies, pluto-avwizard failed"

/usr/pluto/bin/ConfirmDependencies -o $PK_Distro -n -h $MySqlHost -P $MySqlPort -u $MySqlUser -D $MySqlDBName -f -d $PK_Device listall | grep -v \\# > list
pkg_list=""
while read -r line
do
    name=$(echo $line | cut -d'|' -f2)
    pkg_list+=" $name"
done < list
apt-get -f -y --no-install-recommends install $pkg_list

	# generate locales
	StatsMessage "Generating locales"
	echo "en_US.UTF-8 UTF-8" >/etc/locale.gen
	apt-get -f -y install locales

	echo '/bin/false' >/etc/X11/default-display-manager

	# Update startup to remove kdm and network manager
	update-rc.d -f kdm remove || :
	update-rc.d -f sddm remove || :
	update-rc.d -f NetworkManager remove || :

	apt-get -y install pastebinit
	VerifyExitCode "pastebinit"
}

MD_Populate_Debcache () {
	find /var/cache/apt/archives/ -iname '*.deb' -exec mv {} /usr/pluto/deb-cache/$DEB_CACHE \;
#	/usr/pluto/bin/update-debcache.sh /usr/pluto/deb-cache/$DEB_CACHE
}

MD_Cleanup () {
	StatsMessage "Cleaning up from package installations..."

	#Make sure there is are Packages files on the MD so apt-get update does not fail
	mkdir -p /usr/pluto/deb-cache/$DEB_CACHE
#	/usr/pluto/bin/update-debcache.sh /usr/pluto/deb-cache/$DEB_CACHE

	#Copy the orbiter activation command to the MD's desktop
	mkdir -p /root/Desktop
	cp -r /etc/skel/Desktop/* /root/Desktop

	#Clean up apt from the installs
	apt-get -y clean
	VerifyExitCode "APT Clean"
}

do_reboot () {
	echo "Rebooting in 5 seconds..."
	sleep 1
	echo "Rebooting in 4 seconds..."
	sleep 1
	echo "Rebooting in 3 seconds..."
	sleep 1
	echo "Rebooting in 2 seconds..."
	sleep 1
	echo "Rebooting in 1 seconds..."
	sleep 1
	echo "Rebooting..."
	reboot
}

##########################################################################################################
##########################################################################################################

start() {
	if [ ! -f "$DEVID_FILE" ]; then
		echo "ERR: interactor has not yet created '$DEVID_FILE'."
		return 10
	fi

	#TODO get as much of this from database as possible
	# run any device specific firstboot add-on scripts here
	for f in /etc/init.d/firstboot_lmce_* ; do
		StatsMessage "Running device specific script: ${f}_preinst - Begin"
		. "$f"
		$(basename "$f")_preinst
		StatsMessage "Running device specific script: ${f}_preinst - End"
	done

	case "$TARGET_ARCH" in
		i386)
			TARGET_REPO="http://archive.ubuntu.com/ubuntu/"
			;;
		armhf)
			TARGET_REPO="http://ports.ubuntu.com/ubuntu/"
			;;
	esac

	MD_System_Level_Prep
	MD_Seamless_Compatability
	MD_Preseed
	setup_fstab
	setup_plutoconf
	MD_Install_Packages
	MD_Populate_Debcache
	MD_Cleanup

	# run any device specific firstboot add-on scripts here
	for f in /etc/init.d/firstboot_lmce_* ; do
		StatsMessage "Running device specific script: ${f}_postinst - Begin"
		. "$f"
		$(basename "$f")_postinst
		StatsMessage "Running device specific script: ${f}_postinst - End"
	done

	StatsMessage "Setting Firstboot = false"
	ConfSet "FirstBoot" "false"
	sync

	do_reboot
	return 0
}

status() {
        status_of_proc firstboot firstboot
	return $?
}

case "$1" in
  start|"")
        $1
	retval=$?
        ;;
  restart|reload|force-reload)
        echo "Error: argument '$1' not supported" >&2
	retval=3
        ;;
  stop)
        : # No-op
	retval=$?
        ;;
  status)
        $1
        retval=$?
        ;;
  *)
        echo "Usage: $0 [start|stop|status]" >&2
	retval=3
esac
exit $retval

