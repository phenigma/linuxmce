#!/bin/bash

StorageDevice="$1"

. /usr/pluto/bin/SQL_Ops.sh
. /usr/pluto/bin/Config_Ops.sh



## We'll use this for logging
echo >> /var/log/pluto/StorageDevices.log
LOG_NOTE=1
LOG_WARN=2
LOG_ERR=3
UNIQUE_ID=$RANDOM

CIFS_FileSystem="cifs"
CIFS_ExtraOpts=",iocharset=utf8,nounix,sec=ntlmssp"
function Log {
	SEVERITY=$1
	shift

	echo "$SEVERITY $(date) $UNIQUE_ID $*" >> /var/log/pluto/StorageDevices.log
}

if [[ "$1" == */* ]] ; then
	Log $LOG_ERR "AUTOMOUNT PASSED WRONG PARAMS : $1"
	#Uncoment next line for debuging automount
	#kill -INT $(pidof automount) 
	exit 1
fi

Log $LOG_NOTE "CALLED TO MOUNT DEVICE $StorageDevice"


## Try to see if we have this device in the database else exit
Q="SELECT FK_DeviceTemplate, FK_Device_ControlledVia FROM Device WHERE PK_Device='$StorageDevice' LIMIT 1 "
R=$(RunSQL "$Q")
if [[ "$R" = "" ]] ;then
	Log $LOG_WARN "Cannot find device $StorageDevice in the database"
	exit 0
fi

Template=$(Field "1" "$R")
ControlledVia=$(Field "2" "$R")

TPL_GENERIC_INTERNAL_DRIVE=1790
TPL_BUFFALO_HDHG300LAN=1794
TPL_GENERIC_SAMBA_SHARE=1768
TPL_GENERIC_NFS_SHARE=1769
TPL_RAID_0=1854
TPL_RAID_1=1851
TPL_RAID_5=1849
TPL_ZFS_POOL=2351
TPL_ZFS_MIRROR=2352
TPL_ZFS_RAIDZ1=2353
TPL_ZFS_RAIDZ2=2354
TPL_ZFS_RAIDZ3=2355

DD_SHARE_NAME=126
DD_USERNAME=127
DD_PASSWORD=128
DD_FILESYSTEM=159
DD_UUID=267
DD_BLOCK_DEV=152

NFS_MOUNT_OPTS="-fstype=nfs,vers=3,udp,proto=udp,soft,timeo=7,retrans=3,retry=2,rsize=32768,wsize=32768"

case "$Template" in
        ## ZFS Storage Pool
        "$TPL_ZFS_POOL"|"$TPL_ZFS_MIRROR"|"$TPL_ZFS_RAIDZ1"|"$TPL_ZFS_RAIDZ2"|"$TPL_ZFS_RAIDZ3")
	        if [[ "$ControlledVia" == "$PK_Device" ]]; then
		    ## One of our devices
		    Drive_BlockDevice=$(RunSQL "SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device=$StorageDevice AND FK_DeviceData=$DD_BLOCK_DEV")
		    echo "-fstype=zfs :$Drive_BlockDevice"
		else
		    ## External device, do an NFS mount.
		    ## Get the ip address of the computer that contains that drive
		    Q="SELECT IPaddress FROM Device WHERE PK_Device = '$ControlledVia' LIMIT 1"
		    IPaddress=$(RunSQL "$Q")
		    IPaddress=$(Field 1 "$IPaddress")
		    
		    ## Try to see if the computer is up
		    ping -qnc 1 -W 1 "$IPaddress" &> /dev/null
		    HostIsUp=$?
		    if [[ "$HostIsUp" != "0" ]] ;then
			Log $LOG_WARN "Host $IPaddress is not responding to our ping"
			exit 0
		    fi
		    
		    ## Do the mount
		    echo "$NFS_MOUNT_OPTS $IPaddress:/mnt/device/$StorageDevice"		    
		fi
	;;
	## Software Raid Array
	"$TPL_RAID_0"|"$TPL_RAID_1"|"$TPL_RAID_5")
		## It's one of our own internal storage devices
		if [[ "$ControlledVia" == "$PK_Device" ]] ;then
			Drive_BlockDevice=$(RunSQL "SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device=$StorageDevice AND FK_DeviceData=$DD_BLOCK_DEV")

			## Test to see if the block device is there
			if [[ ! -b "$Drive_BlockDevice" ]] ;then
				Log $LOG_ERR "Block device '$Drive_BlockDevice' does not exist"
				exit 0
			fi
			
			## Do the mount
			if  file -s "$Drive_BlockDevice" | grep -qi "ntfs" ;then
				if [[ -x /sbin/mount.ntfs-3g ]] ;then
					echo "-fstype=ntfs-3g :$Drive_BlockDevice"
				else
					echo "-fstype=ntfs :$Drive_BlockDevice"
				fi
			else
				echo "-fstype=auto :$Drive_BlockDevice"
			fi
		else
			## Get the ip address of the computer that contains that drive
			Q="SELECT IPaddress FROM Device WHERE PK_Device = '$ControlledVia' LIMIT 1"
			IPaddress=$(RunSQL "$Q")
			IPaddress=$(Field 1 "$IPaddress")

			## Try to see if the computer is up
			ping -qnc 1 -W 1 "$IPaddress" &> /dev/null
			HostIsUp=$?
			if [[ "$HostIsUp" != "0" ]] ;then
				Log $LOG_WARN "Host $IPaddress is not responding to our ping"
				exit 0
			fi
		
			## Do the mount
			echo "$NFS_MOUNT_OPTS $IPaddress:/mnt/device/$StorageDevice"
			#echo "-fstype=$CIFS_FileSystem,credentials=/usr/pluto/var/sambaCredentials.secret,dir_mode=0777,file_mode=0777$CIFS_ExtraOpts ://$IPaddress/Storage$StorageDevice\\\$"
		fi

		;;

	
	## Internal Drive
	"$TPL_GENERIC_INTERNAL_DRIVE")
		## It's one of our own internal storage devices
		if [[ "$ControlledVia" == "$PK_Device" ]] ;then
			## Get the UUID of the device that we want to mount
			Drive_UUID=$(RunSQL "SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device=$StorageDevice AND FK_DeviceData=$DD_UUID")

			## Find the drive
			if [[ ! -e "/dev/disk/by-uuid/$Drive_UUID" ]] ; then
				Log $LOG_WARN "Cannot find disk with uuid = $Drive_UUID"
			        # as in the StorageDevices_Radar.sh script, fall back to serial number and storage_device
				if [[ ! -e "/dev/disk/by-id/$Drive_UUID" ]] ; then
				        Log $LOG_WARN "Cannot find disk with id = $Drive_UUID either"
					if [[ ! -e "/dev/disk/by-label/$Drive_UUID" ]] ; then
					        Log $LOG_WARN "Cannot find disk with label = $Drive_UUID either, aborting!"
						exit 0
					else
						Drive_BlockDevice=$(readlink -f "/dev/disk/by-label/$Drive_UUID")
					fi
				else
					Drive_BlockDevice=$(readlink -f "/dev/disk/by-id/$Drive_UUID")
				fi
			else
				Drive_BlockDevice=$(readlink -f "/dev/disk/by-uuid/$Drive_UUID")
			fi

			if [[ "$Drive_BlockDevice" == "" ]] ;then
				Log $LOG_ERR "Cannot find block device associated with uuid/id/label $IDrive_UUID"
				exit 0
			fi
			
			## Test to see if the block device is there
			if [[ ! -b "$Drive_BlockDevice" ]] ;then
				Log $LOG_ERR "Block device '$Drive_BlockDevice' does not exist"
				exit 0
			fi
			
			## Do the mount
			if  file -s "$Drive_BlockDevice" | grep -qi "ntfs" ;then
				if [[ -x /sbin/mount.ntfs-3g ]] ;then
					echo "-fstype=ntfs-3g :$Drive_BlockDevice"
				else
					echo "-fstype=ntfs :$Drive_BlockDevice"
				fi
			else
				echo "-fstype=auto :$Drive_BlockDevice"
			fi
		
		## It's a remote internal storage device
		else
			## Get the ip address of the computer that contains that drive
			Q="SELECT IPaddress FROM Device WHERE PK_Device = '$ControlledVia' LIMIT 1"
			IPaddress=$(RunSQL "$Q")
			IPaddress=$(Field 1 "$IPaddress")

			## Try to see if the computer is up
			ping -qnc 1 -W 1 "$IPaddress" &> /dev/null
			HostIsUp=$?
			if [[ "$HostIsUp" != "0" ]] ;then
				Log $LOG_WARN "Host $IPaddress is not responding to our ping"
				exit 0
			fi
		
			## Do the mount
			echo "$NFS_MOUNT_OPTS $IPaddress:/mnt/device/$StorageDevice"
			#echo "-fstype=$CIFS_FileSystem,credentials=/usr/pluto/var/sambaCredentials.secret,dir_mode=0777,file_mode=0777$CIFS_ExtraOpts ://$IPaddress/Storage$StorageDevice\\\$"
		fi
		;;
	
	## Generic Windows Share
	$TPL_GENERIC_SAMBA_SHARE)
		## Get the ip address of the parent (computer or nas that has the share)
		Q="	SELECT 
				Parent.IPaddress 
			FROM 
				Device Child
				LEFT JOIN Device Parent ON Parent.PK_Device = Child.FK_Device_ControlledVia
			WHERE 
				Child.PK_Device = '$StorageDevice'
			LIMIT 1
		"
		IPaddress=$(RunSQL "$Q")
		IPaddress=$(Field "1" "$IPaddress")

		## Test to see if that computer is up and running
		ping -qnc 1 -W 1 "$IPaddress" &> /dev/null
		HostIsUp=$?
		if [[ "$HostIsUp" != 0 ]] ;then
			Log $LOG_WARN "Device with ip '$IPaddress' that has the samba share associated with device '$StorageDevice' is not responding to our ping"
			exit 0
		fi

		## Samba share name
		Q="SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device='$StorageDevice' AND FK_DeviceData=$DD_SHARE_NAME"
		Share=$(RunSQL "$Q")
		Share=$(Field 1 "$Share" |  sed 's|\$|\\\$|g' )
		if [[ "$Share" == "" ]] ;then
			Log $LOG_ERR "Device '$StorageDevice' doesn't have a samba share name associated with it"
			exit 0
		fi
		
		## Username for the samba share
		Q="SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device='$StorageDevice' AND FK_DeviceData=$DD_USERNAME"
		Username=$(RunSQL "$Q")
		Username=$(Field 1 "$Username")

		## Password for the samba share
		Q="SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device='$StorageDevice' AND FK_DeviceData=$DD_PASSWORD"
		Password=$(RunSQL "$Q")
		Password=$(Field 1 "$Password")
		
		## Filesystem for the samba share (zaerc@xs4all.nl)
		Q="SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device='$StorageDevice' AND FK_DeviceData=$DD_FILESYSTEM"
		FileSystem=$(RunSQL "$Q")
		FileSystem=$(Field 1 "$FileSystem")
		if [[ "$FileSystem" == "smbfs" ]] ;then
			CIFS_FileSystem="smbfs"
		else
			CIFS_FileSystem="cifs"
		fi

		## Do the mount
		if [[ "$Username" == "" || "$Username" == "guest" ]] ;then
			echo "-fstype=$CIFS_FileSystem,username=guest,guest,dir_mode=0777,file_mode=0777$CIFS_ExtraOpts ://${IPaddress}/${Share}"
		else
			echo "-fstype=$CIFS_FileSystem,username=$Username,password=$Password,dir_mode=0777,file_mode=0777$CIFS_ExtraOpts ://${IPaddress}/${Share}"
		fi
		;;

	$TPL_GENERIC_NFS_SHARE)

		## Get the ip address of the parent (computer or nas that has the share)
		Q="	SELECT 
				Parent.IPaddress 
			FROM 
				Device Child
				LEFT JOIN Device Parent ON Parent.PK_Device = Child.FK_Device_ControlledVia
			WHERE 
				Child.PK_Device = '$StorageDevice'
			LIMIT 1
		"
		IPaddress=$(RunSQL "$Q")
		IPaddress=$(Field "1" "$IPaddress")

		## Test to see if that computer is up and running
		ping -qnc 1 -W 1 "$IPaddress" &> /dev/null
		HostIsUp=$?
		if [[ "$HostIsUp" != 0 ]] ;then
			Log $LOG_WARN "Device with ip '$IPaddress' that has the samba share associated with device '$StorageDevice' is not responding to our ping"
			exit 0
		fi
		
		## Shared nfs directory name
                Q="SELECT IK_DeviceData FROM Device_DeviceData WHERE FK_Device=$StorageDevice AND FK_DeviceData=$DD_SHARE_NAME"
                Share=$(RunSQL "$Q")
		Share=$(Field 1 "$Share")
                if [[ "$Share" == "" ]] ;then
                        Log $LOG_ERR "Device '$StorageDevice' doesn't have a nfs directory name associated with it"
                        exit 0
                fi

		## Do the mount
		echo "$NFS_MOUNT_OPTS ${IPaddress}:${Share}"
		;;

	## Some unknown device
	*)
		Log $LOG_ERR "Device $StorageDevice has unknown mount device template ($Template') so i cannot mount it"
		exit 0
		;;
esac

exit 0
