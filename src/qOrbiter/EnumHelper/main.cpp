#include <QCoreApplication>
#include <QFile>
#include <qdebug.h>
#include <QByteArray>
#include <QRegExp>
#include <QStringList>
#include <parsermanager.h>
typedef QMap <QString, QString> ReplacementMap;
int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

//    ParserManager *m_defineParser = new ParserManager();

//    GenericDefineParser *datagrids_dg = new GenericDefineParser("datagrids");
//    datagrids_dg->setSourceFile("../../pluto_main/Define_DataGrid.h");
//    datagrids_dg->setDefinePattern("(#define DATAGRID_.*\\d(|\\d)\n)");
//    datagrids_dg->setOutFile("../qOrbiter_src/datagrids.h");
//    datagrids_dg->setUsingTags(false);
//    QStringList removals;
//    removals << "#define", "DATAGRID_", "\n";
//    datagrids_dg->setStripList(removals);

//    ReplacementMap m_replacements;
//    m_replacements.insert(" ", " = ");
//    m_replacements.insert("_CONST","");
//    datagrids_dg->setReplacements(m_replacements);

//    m_defineParser->addParserItem(datagrids_dg);
//    m_defineParser->start();
//    return a.exec();

    /* Dg defines */

    QByteArray dgData;
    QRegExp dgDefines("(#define DATAGRID_.*\\d(|\\d)\n)");
    dgDefines.setPatternSyntax(QRegExp::RegExp2);
    dgDefines.setMinimal(true );
    QFile lmce_datagrid_defines("../../pluto_main/Define_DataGrid.h");
    if(lmce_datagrid_defines.exists()){
        qDebug() << "found dg files";
        lmce_datagrid_defines.open(QFile::ReadOnly);
        dgData = lmce_datagrid_defines.readAll();

        QStringList defineStrings;
        int pos=0;
        while ((pos = dgDefines.indexIn(dgData, pos)) != -1) {

            QString transform = dgDefines.cap(1);
            transform.remove("#define ");
            transform.remove("DATAGRID_");
            transform.remove("\n");
            transform.replace(" ", " = ");
            transform.replace("_CONST", "");


            defineStrings << transform ;
            pos += dgDefines.matchedLength();
        }

        qDebug() << "Found :: " << dgDefines.captureCount();
        qDebug() << defineStrings.join(",\n");

        QFile out("../qOrbiter_src/defineObjects/datagrids.h");
        if(out.exists()){
            out.open(QFile::ReadWrite);
            if(out.isOpen()){
                out.resize(0);
                QString outData;
                outData="#ifndef DATAGRIDS_H\n"
                        "#define DATAGRIDS_H\n"
                        "/*\warn Autogenerated*/\n"
                        "#include <QObject>\n"
                        "class DataGrids : public QObject\n"
                        "{\n"
                        " Q_OBJECT\n"
                        "public:\n"
                        "explicit DataGrids(QObject *parent = 0);\n"
                        " enum DataGridList{\n"
                        "/*<ags>*/\n"+
                        defineStrings.join(",\n")
                        +"/*<agn>*/\n"
                        " };\n"
                        "Q_ENUMS(DataGridList)\n"
                        "  signals:\n"
                        "   public slots:\n"
                        "  };\n"
                        "  #endif // DATAGRIDS_H\n";
                QByteArray trans =  outData.toAscii();
                out.write(trans);
                out.close();
            }

        }
    } else {
        qDebug() << "No file found!";
    }

    /* end dg defines */

    /*media type defines */

    QByteArray mediaTypeDefines;
    QFile mediaTypeDefinesFile("../../pluto_main/Define_MediaType.h");
    QRegExp mediaTypeRegEx("(#define MEDIATYPE_.*\\d(|\\d))\n");
    mediaTypeRegEx.setPatternSyntax(QRegExp::RegExp2);
    mediaTypeRegEx.setMinimal(true );
    if(mediaTypeDefinesFile.exists()){
        qDebug() << "\n\nFound Mediatypes definitions:\n";
        mediaTypeDefinesFile.open(QFile::ReadOnly);
        mediaTypeDefines = mediaTypeDefinesFile.readAll();
        mediaTypeDefinesFile.close();
        QStringList mediaTypeDefineString;
        int pos=0;
        while ((pos = mediaTypeRegEx.indexIn(mediaTypeDefines, pos)) != -1) {

            QString transform = mediaTypeRegEx.cap(1);
            transform.remove("#define ");
            transform.remove("MEDIATYPE_");
            transform.remove("\n");
            transform.replace("np","NP");
            transform.replace("pluto", "LMCE");
            transform.replace("lmce", "LMCE");
            transform.replace("misc", "MISC");
            transform.replace(" ", " = ");
            transform.replace("_CONST", "");
            mediaTypeDefineString << transform ;
            pos += mediaTypeRegEx.matchedLength();
        }
        qDebug() << mediaTypeDefineString.count() << " mediatype definitions found";
        qDebug() << mediaTypeDefineString.join(",\n");
        qDebug() << "writing to file";
        QString startTag = "/*<-AGB->*/";
        QString endTag= "/*<-AGE->*/";
        QByteArray tmp;

        QFile mediaTypeEnumFile("../qOrbiter_src/defineObjects/mediatypehelper.h");
        if(mediaTypeEnumFile.exists() && mediaTypeEnumFile.open(QFile::ReadWrite)){
            qDebug() << mediaTypeEnumFile.fileName() << " open for read / write.";
            tmp = mediaTypeEnumFile.readAll();
            int start = tmp.indexOf(startTag)+startTag.length();
            int end = tmp.indexOf(endTag)-endTag.length()+2;
            if(start!=-1 && end !=-1){
                qDebug() <<" Found Tags";
                tmp.remove(start, end-start);
                tmp.insert(start, "\n"+mediaTypeDefineString.join(",\n"));
                mediaTypeEnumFile.resize(0);
                mediaTypeEnumFile.write(tmp);
                mediaTypeEnumFile.close();
                qDebug() << "Wrote mediatype enums, file closed.";

            } else {
                qDebug() << " Could not locate tags!";
            }

        }

    }

    /*end mediatype defines */

    /* Screen defines */
    QByteArray screenDefines;
    QFile screenDefinesFile("../../pluto_main/Define_Screen.h");
    QRegExp screenRegEx("(#define SCREEN_.*\\d(|\\d))\n");
    screenRegEx.setPatternSyntax(QRegExp::RegExp2);
    screenRegEx.setMinimal(true );
    if(screenDefinesFile.exists()){
        qDebug() << "\n\nFound Screen definitions:\n";
        screenDefinesFile.open(QFile::ReadOnly);
        screenDefines = screenDefinesFile.readAll();
        screenDefinesFile.close();
        QStringList screenDefineString;
        int pos=0;
        while ((pos = screenRegEx.indexIn(screenDefines, pos)) != -1) {

            QString transform = screenRegEx.cap(1);
            transform.remove("#define ");
            transform.remove("SCREEN_");
            transform.remove("\n");
            transform.replace(" ", " = ");
            transform.replace("_CONST", "");
            screenDefineString << transform ;
            pos += screenRegEx.matchedLength();
        }
        qDebug() << screenDefineString.count() << " screen definitions found";
        qDebug() << screenDefineString.join(",\n");
        qDebug() << "writing to file";
        QString startTag = "/*<-SAG->*/";
        QString endTag= "/*<-SAE->*/";
        QByteArray tmp;

        QFile screenEnumFile("../qOrbiter_src/defineObjects/linuxmcedata.h");
        if(screenEnumFile.exists() && screenEnumFile.open(QFile::ReadWrite)){
            qDebug() << screenEnumFile.fileName() << " open for read / write.";
            tmp = screenEnumFile.readAll();
            int start = tmp.indexOf(startTag)+startTag.length();
            int end = tmp.indexOf(endTag)-endTag.length()+2;
            if(start!=-1 && end !=-1){
                qDebug() <<" Found Tags";
                tmp.remove(start, end-start);
                tmp.insert(start, "\n"+screenDefineString.join(",\n"));
                screenEnumFile.resize(0);
                screenEnumFile.write(tmp);
                screenEnumFile.close();
                qDebug() << "Wrote screen enums, file closed.";

            } else {
                qDebug() << " Could not locate tags!";
            }

        }

    }
    /*end screen defines*/

a.exec();
}
