/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p /home/langston/OmxGui/OmxDbusProxy -c OmxDbusProxy /home/langston/Documents/omx-dbus-spec.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OMXDBUSPROXY_H_1467174564
#define OMXDBUSPROXY_H_1467174564

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.freedesktop.DBus.Properties
 */
class OmxDbusProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.DBus.Properties"; }

public:
    OmxDbusProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OmxDbusProxy();

public Q_SLOTS: // METHODS
    inline /*QDBusPendingReply<bool>*/ void CanControl()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<bool> c =  asyncCallWithArgumentList(QLatin1String("CanControl"), argumentList);
        c.waitForFinished();
        emit canControlChanged(c.value());
    }

    inline /*QDBusPendingReply<bool>*/ void CanGoNext()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<bool> c = asyncCallWithArgumentList(QLatin1String("CanGoNext"), argumentList);
        emit canGoNextChanged(c.value());
    }

    inline /*QDBusPendingReply<bool>*/ void CanGoPrevious()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<bool> c = asyncCallWithArgumentList(QLatin1String("CanGoPrevious"), argumentList);
        c.waitForFinished();
        emit canGoPreviousChanged(c.value());
    }

    inline QDBusPendingReply<bool> CanPause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanPause"), argumentList);
    }

    inline QDBusPendingReply<bool> CanPlay()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanPlay"), argumentList);
    }

    inline QDBusPendingReply<bool> CanQuit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanQuit"), argumentList);
    }

    inline QDBusPendingReply<bool> CanRaise()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanRaise"), argumentList);
    }

    inline QDBusPendingReply<bool> CanSeek()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanSeek"), argumentList);
    }

    inline QDBusPendingReply<bool> CanSetFullscreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("CanSetFullscreen"), argumentList);
    }

    inline /*QDBusPendingReply<qlonglong>*/ void Duration()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<qlonglong> d = asyncCallWithArgumentList(QLatin1String("Duration"), argumentList);
        d.waitForFinished();
      //  qDebug() << Q_FUNC_INFO << d.value() /1000;
        emit durationChanged(d.value() /1000);
    }

    inline QDBusPendingReply<bool> Fullscreen()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Fullscreen"), argumentList);
    }

    inline QDBusPendingReply<bool> HasTrackList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("HasTrackList"), argumentList);
    }

    inline /*QDBusPendingReply<QString>*/ void Identity()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<QString>i = asyncCallWithArgumentList(QLatin1String("Identity"), argumentList);
        i.waitForFinished();
      //  qDebug() << Q_FUNC_INFO << i.value();
        emit identityChanged(i.value());
    }

    inline QDBusPendingReply<double> MaximumRate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("MaximumRate"), argumentList);
    }

    inline QDBusPendingReply<double> MinimumRate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("MinimumRate"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ void Mute()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Mute"), argumentList);
    }

    inline /*QDBusPendingReply<QString>*/ void PlaybackStatus()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<QString> p = asyncCallWithArgumentList(QLatin1String("PlaybackStatus"), argumentList);
        p.waitForFinished();
        emit playbackStatusChanged(p.value());
    }

    inline /*QDBusPendingReply<qlonglong>*/ void Position()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<qlonglong> p = asyncCallWithArgumentList(QLatin1String("Position"), argumentList);
        p.waitForFinished();
        emit positionChanged(p.value() /1000);

    }

    inline QDBusPendingReply<QStringList> SupportedMimeTypes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("SupportedMimeTypes"), argumentList);
    }

    inline QDBusPendingReply<QStringList> SupportedUriSchemes()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("SupportedUriSchemes"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ void Unmute()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Unmute"), argumentList);
    }

    inline /*QDBusPendingReply<double>*/ void Volume(double volume)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(volume);
        asyncCallWithArgumentList(QLatin1String("Volume"), argumentList);
    }

    inline QDBusPendingReply<double> Volume()
    {
        QList<QVariant> argumentList;
        QDBusPendingReply<double> v  = asyncCallWithArgumentList(QLatin1String("Volume"), argumentList);
        v.waitForFinished();
        emit volumeChanged(v.value());
    }

signals: // SIGNALS
    void playbackStatusChanged(QString status);
    void durationChanged(qlonglong duration);
    void volumeChanged(double volume);
    void positionChanged(qlonglong pos);
    bool canControlChanged(bool controlAllowed);
    bool canGoNextChanged(bool allowFwd);
    bool canGoPreviousChanged(bool allowBack);
    void stopped();
    void identityChanged(QString ident);



};

/*
 * Proxy class for interface org.mpris.MediaPlayer2.Player
 */
class OmxDbusProxyPlayer: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.mpris.MediaPlayer2.Player"; }

public:
    OmxDbusProxyPlayer(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OmxDbusProxyPlayer();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Action(int key_val)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key_val);
        return asyncCallWithArgumentList(QLatin1String("Action"), argumentList);
    }

    inline QDBusPendingReply<> HideSubtitles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("HideSubtitles"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListAudio()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListAudio"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListSubtitles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListSubtitles"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListVideo()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListVideo"), argumentList);
    }

    inline QDBusPendingReply<> Next()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Next"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ void Pause()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Pause"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ void Previous()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Previous"), argumentList);
    }

    inline /*QDBusPendingReply<qlonglong>*/ void Seek(qlonglong microseconds)
    {
       // qDebug() << Q_FUNC_INFO << microseconds;
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(microseconds);       
        QDBusPendingReply<qlonglong> s= asyncCallWithArgumentList(QLatin1String("Seek"), argumentList);
        s.waitForFinished();
       // qDebug() << s.value();
    }

    inline /*QDBusPendingReply<bool>*/ void SelectAudio(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        asyncCallWithArgumentList(QLatin1String("SelectAudio"), argumentList);
    }

    inline QDBusPendingReply<bool> SelectSubtitle(int index)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(index);
        return asyncCallWithArgumentList(QLatin1String("SelectSubtitle"), argumentList);
    }

    inline /* QDBusPendingReply<qlonglong>*/ void SetPosition(const QString &path, qlonglong position)
    {
        qDebug() << Q_FUNC_INFO << position;
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(path) << QVariant::fromValue(position);
        QDBusPendingReply<qlonglong> r = asyncCallWithArgumentList(QLatin1String("SetPosition"), argumentList);
        r.waitForFinished();
    }

    inline QDBusPendingReply<> ShowSubtitles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ShowSubtitles"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ void Stop()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Stop"), argumentList);
    }

    inline /*QDBusPendingReply<>*/ bool StopWithConfirmation()
    {
        QList<QVariant> argumentList;
       QDBusPendingReply<> r= asyncCallWithArgumentList(QLatin1String("Stop"), argumentList);
        r.waitForFinished();
       return true;
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface org.mpris.MediaPlayer2.Root
 */
class OmxDbusProxyRoot: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.mpris.MediaPlayer2.Root"; }

public:
    OmxDbusProxyRoot(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OmxDbusProxyRoot();

public Q_SLOTS: // METHODS
    inline /*QDBusPendingReply<>*/ void Quit()
    {
        QList<QVariant> argumentList;
        asyncCallWithArgumentList(QLatin1String("Quit"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
namespace freedesktop {
namespace DBus {
typedef ::OmxDbusProxy Properties;
}
}
namespace mpris {
namespace MediaPlayer2 {
typedef ::OmxDbusProxy Player;
typedef ::OmxDbusProxy Root;
}
}
}
#endif
