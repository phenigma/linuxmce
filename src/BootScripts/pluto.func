#!/bin/bash

if [[ -n "$HEADER_pluto_func" ]]; then
	return 0
fi
HEADER_pluto_func=included

# Default config
INSTALLATION=0
VERSION=2.0
TYPE=server
SEVERITY_NORMAL=1
SEVERITY_STATUS="$SEVERITY_NORMAL"
SEVERITY_WARNING=2
SEVERITY_CRITICAL=3
SEVERITY_STAGE=0
DEVICE_SERVER=0
DEVICE_MEDIADIRECTOR=
DEVICE_SYSTEM=0
SERVER_IP=10.0.0.149
SYSTEM_IP=10.0.0.149
NAMESERVER=10.0.0.1
ACTIVATION_KEY=0
FILE_VERSION=19

ulimit -c unlimited #core dump in all scripts that use pluto.func (most of them)

# Read the config and set the variables.
ReadConfig() {
	return # for now

  CONFIG=/usr/local/pluto/etc/pluto.conf
  # We can't continue if the config doesn't exist
  if ! [ -e $CONFIG ]; then
    printf "\n\n----\n$CONFIG doesn't exist\n----\n"
    exit
  fi
  # Read the config, strip the spaces before and after '=', and double
  # quote the value.
  # NOTE: The variables must not contain spaces
  eval $(cat $CONFIG | perl -pe 's/\s+?=\s+?(.*)/="$1"/g')
  # Read in custom config settings
  if [ -e /usr/local/pluto/customboot/pluto.conf ]; then
    eval $(cat /usr/local/pluto/customboot/pluto.conf | perl -pe 's/\s+?=\s+?(.*)/="$1"/g')
  fi
  declare -r SEVERITY_NORMAL
  declare -r SEVERITY_WARNING
  declare -r DEVICE_SYSTEM
}

# Log a message to the log file
# i.e: Logging $TYPE $SEVERITY_NORMAL $0 "This is my message"
Logging() {
  if [[ "$#" -eq 0 ]]; then
    return
  fi

  local type="$1" severitylevel="$2" module="$3" message="$4" logfile="${5:-/var/log/pluto/pluto.log}"

  mkdir -p "$(dirname "$logfile")"
  touch "$logfile"
  date=$(date +%D" %H:%M:%S")
  snc="\033[1;00m" # severity normal color
  swc="\033[1;33m" # severity warning color
  scc="\033[1;31m" # severity critical color
  rc="\033[1;00m" # reset color
  sc="$snc" # set the normal color
  if [[ "$severitylevel" == "$SEVERITY_WARNING" ]]; then
    sc="$swc"
  elif [[ "$severitylevel" == "$SEVERITY_CRITICAL" ]]; then
    sc="$scc"
  fi
  TERM=linux
  printf "$severitylevel\t$date\t$module ($type)\t${sc}${message}${rc}\n" >> $logfile
  printf "$severitylevel\t$date\t$module ($type)\t${sc}${message}${rc}\n"
#  if [ $severitylevel -eq 3 ]; then
#    tempfile=$(/bin/tempfile)
#    count=0
#    while [ $count -lt 5 ]; do
#      wget -q -O $tempfile "http://www.plutohome.com/utils/message.php?FKID_Installation=${INSTALLATION}&Severity=${severitylevel}&Message=${message}"
#      response=$(/bin/cat $tempfile)
#      if [ "x$response" = "xLOGGED TO DB EMAIL SENT" ]; then
#        break
#      fi
#      if [ "x$response" = "xERROR INSTALLATION NOT BEING MONITORED" ]; then
#        printf "$SEVERITY_NORMAL\t$date\t$module ($type)\t${snc}This installation is not being monitored${rc}\n" >> $logfile
#        printf "$SEVERITY_NORMAL\t$date\t$module ($type)\t${snc}This installation is not being monitored${rc}\n"
#        break
#      fi
#      printf "$SEVERITY_CRITICAL\t$date\t$module ($type)\t${scc}Failed to report critical error: '$response'${rc}\n" >> $logfile
#      printf "$SEVERITY_CRITICAL\t$date\t$module ($type)\t${scc}Failed to report critical error: '$response'${rc}\n"
#      count=$(($count+1))
#      sleep 5
#    done
#    rm $tempfile
#  fi
}

# Use our own reboot so we know what called it
# i.e: Reboot $0 $SEVERITY_NORMAL
Reboot() {
  if [ -z $1 ]; then
    return
  fi
  caller=$1
  Logging $TYPE $SEVERITY_WARNING $caller "$caller is rebooting the system..."
  /sbin/reboot
}

RebootRemote() {
  host=$1
  if ! [ $host ]; then
    return
  fi
  Logging $TYPE $SEVERITY_WARNING $module "Rebooting remote $host"
#  ssh $host "/sbin/init 6" &>/dev/null ||
  ssh $host "/sbin/reboot" &>/dev/null ||
    Logging $TYPE $SEVERITY_WARNING $module "Couldn't reboot $host"
}

ShutDownRemote() {
  host=$1
  if ! [ $host ]; then
    return
  fi
  Logging $TYPE $SEVERITY_WARNING $module "Shutting down $host"
#  ssh $host "/sbin/init 0" &>/dev/null || 
  ssh $host "/sbin/poweroff" &>/dev/null ||
    Logging $TYPE $SEVERITY_WARNING $module "Couldn't shut down $host"
}

# This function will run a process and if it fails, log a critical
# error and contact corporate headquarters.
Run() {
  proc=$@
  failed=0
  if [ -x $1 ]; then
    Logging $TYPE $SEVERITY_NORMAL $module "Executing $proc..."
    $proc || failed=1
  fi
  if [ $failed -gt 0 ]; then
    Logging $TYPE $SEVERITY_CRITICAL $module "$proc failed"
    #return 1
  fi
}

# This function will run a process and if it fails, log a critical
# error and contact corporate headquarters.
# You can pass a list to this function
RunMultiple() {
  proc=$@
  for file in $proc; do
    if ! [ -e $file ]; then
      continue
    fi
    Logging $TYPE $SEVERITY_NORMAL $module "Executing $proc..."
    $file
    if [ $? -gt 0 ]; then
      Logging $TYPE $SEVERITY_CRITICAL $module "$proc failed"
      return 1
    fi
  done
}

# This function will return a list of X where X is either S,M,P,C,O.
GetListOf() {
  type=$1; shift
  listType=""
  if [ x$type = "xS" ]; then
    listType=servers
  elif [ x$type = "xM" ]; then
    listType="media directors"
  elif [ x$type = "xP" ]; then
    listType=phones
  elif [ x$type = "xO" ]; then
    listType=ioboards
  fi
  list=$(cat /usr/local/pluto/etc/networklist|grep ^$type)
  echo $list
}

# The ParseConfigGet...() functions are mainly used for configure and
# checkNewOldSystem. You will need to pass the line of the $configfile to
# be parsed.
# $configfile is the file that has the contents from get_config2.php.
ParseListOf() {
  type=$1
  cat $content | grep ^$type
}
ParseConfigGetDevice() {
  content=$1
  echo $content|awk -F" " '{print $2}'
}
ParseConfigGetIP() {
  content="$1"
  #echo $content
  echo $content|awk -F" " '{print $3}'
}
ParseConfigGetMAC() {
  content=$1
  echo $content|awk -F" " '{print $4}'
}
ParseConfigGetPackages() {
  content=$1
  echo $content|awk -F" " '{print $5}'
}

# When we source this file, we want to read the config right away.
ReadConfig
export PATH=/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/sbin:/bin:/usr/bin/X11

