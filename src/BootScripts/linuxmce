#!/bin/bash
### BEGIN INIT INFO
# Provides:          linuxmce
# Required-Start:    $remote_fs $syslog $avwizard
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $named
# Default-Start:     2 3 4 5
# Default-Stop:      1 6
# Short-Description: LinuxMCE
# Description:       This script is the entry point to start the LinuxMCE core
#                    It starts a couple of needed services and daemons, loads X (if running with AutoStartMedia)
#                    and executes LMCE_Launch_Manager to start devices and taking care of the rest.
### END INIT INFO #

DD_DISTRO_Raspbian_Wheezy_CONST=19
DD_DISTRO_Raspbian_Jessie_CONST=22
DD_DEVICETEMPLATE_Core=7
DD_DEVICETEMPLATE_GenericPC_as_MD=28
DD_DEVICETEMPLATE_GenericPC_as_qMD=2277
DD_DEVICETEMPLATE_RPi_B_as_MD=2216
DD_DEVICETEMPLATE_RPi_B_as_qMD=2281
DD_DEVICETEMPLATE_Joggler=2176


# Source fuction library
. /lib/lsb/init-functions

Message() {
    echo -en "\033[1m# $*"
    tput sgr0
}

StartService() {
	ServiceDescription=$1
	ServiceCmd=$2
	ServiceBkg=$3

	if [[ -x $(echo $ServiceCmd | cut -d ' ' -f1) ]] ;then
		#if [[ -x /bin/plymouth ]]; then
		#	/bin/plymouth update --status="$ServiceDescription ... " || :
		#fi
		#echo -n "$ServiceDescription ... "

	        log_daemon_msg "$ServiceDescription" "$ServiceCmd"
		if [[ "$ServiceBkg" == "&" ]] ;then
			$ServiceCmd 1>/dev/null 2>/dev/null &
		else
			$ServiceCmd 1>/dev/null 2>/dev/null
		fi
		err=$?
		log_end_msg $err

		#if [[ "$err" == "0" ]] ;then
		#	echo "ok"
		#else
		#	echo "fail"
		#fi
	fi

	return $err
}

StartDaemon() {
	ServiceDescription=$1
	ServiceCmd=$2
	ServiceScreen=$3

	if [[ -x $(echo $ServiceCmd | cut -d ' ' -f1) ]] ;then
                #if [[ -x /bin/plymouth ]]; then
                #        /bin/plymouth update --status="$ServiceDescription ... " || :
                #fi
		#echo -n "$ServiceDescription ... "

	        log_daemon_msg "$ServiceDescription" "$ServiceCmd"
		screen -d -m -S "$ServiceScreen" $ServiceCmd
		err=$?
		log_end_msg $err

		#if [[ "$err" == "0" ]] ;then
		#	echo "ok"
		#else
		#	echo "fail"
		#fi
	fi

	return $err
}

StartX() {
	# Only start X if we want to autostart the media.
	if [[ "$Display" == "" ]] ;then
		if [[ "$DISPLAY" == "" ]] ;then
			export DISPLAY=:0
		fi
	else
		export DISPLAY=":${Display}"
	fi
	if [[ -r /var/run/plutoX${Display}.pid ]]; then
		XPID=$(</var/run/plutoX${Display}.pid)
	else
		XPID=""
	fi

	if [ -z "$XPID" -o ! -d /proc/"$XPID" ]; then
		AlphaBlending=$(AlphaBlendingEnabled)

		#XClient=/usr/pluto/bin/Start_IceWM.sh
		if [[ -e /usr/bin/xfwm4 ]] ;then
			XClient=/usr/bin/xfwm4
		else
			XClient=/usr/bin/kwin
		fi
		XClientParm=()
		XOrgConf="/etc/X11/xorg.conf"

		XServerParm=(-logverbose 9 -br)
		Background=y
		XDisplay=":$Display"

		Xcompmgr=/bin/true
		if [[ "$AlphaBlending" != 1 && "$XClient" != "/usr/bin/kwin" ]]; then
			XClientParm=(--compositor=off)
		fi

		for ((i = 1; i <= "$#"; i++)); do
			case "${!i}" in
				-client) ((i++)); XClient="${!i}" ;;
				-parm) ((i++)); XClientParm=("${XClientParm[@]}" "${!i}") ;;
				-fg) Background=n ;;
				-srvparm) ((i++)); XServerParm=("${XServerParm[@]}" "${!i}") ;;
				-display) ((i++)); XDisplay="${!i}" ;;
				-flags) ((i++)); WrapperFlags=("${WrapperFlags[@]}" "${!i}") ;;
				-config) ((i++)); XOrgConf=${!i} ;;
			esac
		done

		Logging "$TYPE" "$SEVERITY_NORMAL" "$0" "Starting X server (client: $XClient; parms: ${XClientParm[*]})"

		VT=${XDisplay#:}
		VT=vt"$((7+VT))"

		# Start X11
		if [[ "$PK_Distro" == "$DD_DISTRO_Raspbian_Wheezy_CONST" || "$PK_Distro" == "$DD_DISTRO_Raspbian_Jessie_CONST" ]] ;then
			# Raspbian does not get an xorg.conf
			Xcmd=(/usr/pluto/bin/Start_X_Wrapper.sh --parms "$@" --client "$XClient" "${XClientParm[@]}" --server "$XDisplay" -ignoreABI -ac -allowMouseOpenFail "$VT" "${XServerParm[@]}" --flags "${WrapperFlags[@]}")
		else
			Xcmd=(/usr/pluto/bin/Start_X_Wrapper.sh --parms "$@" --client "$XClient" "${XClientParm[@]}" --server "$XDisplay" -ignoreABI -ac -allowMouseOpenFail "$VT" "${XServerParm[@]}" --flags "${WrapperFlags[@]}" -config "${XOrgConf}")
		fi
		if [[ "$Background" == y ]]; then
			screen -d -m -S XWindowSystem "${Xcmd[@]}"
			# Start everouter for gyration mouse
			#if [[ -x /usr/pluto/bin/StartGyrationEvrouter.sh ]]; then
			#	screen -d -m -S GyrationMouse /usr/pluto/bin/StartGyrationEvrouter.sh
			#fi
			sleep 1

			Logging "$TYPE" "$SEVERITY_NORMAL" "$0" "X server: backround; AlphaBlending: $AlphaBlending"
			if [[ "$AlphaBlending" == 1 ]]; then
				DISPLAY=:0 "$Xcompmgr" &>/dev/null </dev/null &
				disown -a
			fi
		else
			Logging "$TYPE" "$SEVERITY_NORMAL" "$0" "X server: foreground"
			"${Xcmd[@]}"
		fi
	fi

}



start() {
#	if [[ -x /bin/plymouth ]]; then
#	        /bin/plymouth message --text="Starting up LinuxMCE..." || :
#	fi
        log_daemon_msg "Starting up LinuxMCE" "linuxmce"

	setterm -blank >/dev/console             # disable console blanking
	chmod 777 /etc/pluto.conf 2>/dev/null    # ensure access rights on pluto.conf
	rm -f /var/log/pluto/running.pids 2>/dev/null
	chmod 777 /var/log/pluto 2>/dev/null
	rm -f /dev/ttyS_*                        # remove all ttyS_* (created by gc100s) entries from /dev
	mkdir -p /usr/pluto/locks                # clean up locks
	rm -f /usr/pluto/locks/*                 # clean up locks
	rm -f /var/run/plutoX*.pid		 # clean up x11 locks
	rm -f /mnt/optical/*.checksum
	if [[ -f /etc/logrotate.d/linuxmce ]]; then
	        rm -f /etc/logrotate.d/pluto*     # make sure there are not leftover logrotate configuration files
	fi
	rm -f /etc/rc{0,6}.d/S*{umountnfs.sh,portmap,networking}
	service nis start

	if [[ -f /usr/pluto/bin/Config_Ops.sh ]]; then
		 . /usr/pluto/bin/Config_Ops.sh
	fi
	if [[ -f /usr/pluto/bin/pluto.func ]] ;then
		. /usr/pluto/bin/pluto.func
	fi
	if [[ -f /usr/pluto/bin/SQL_Ops.sh ]] ;then
		. /usr/pluto/bin/SQL_Ops.sh
	fi
	if [[ -f /usr/pluto/bin/Utils.sh ]] ;then
		. /usr/pluto/bin/Utils.sh
	fi

	# This is done in /usr/pluto/bin/Config_Ops.sh simply by inclusion
	#ConfEval

	# We still need hal for device detection
	#StartService "Starting HAL daemon" "/usr/sbin/hald --daemon=yes --use-syslog"

	# Start core services
	if [[ "$AutostartCore" -eq "1" ]] ; then
		StartService "Starting DHCP Server" "service isc-dhcp-server start" "&"
		StartService "Starting DNS Server" "service bind9 start" "&"
		StartService "Configuring Network Firewall" "/usr/pluto/bin/Network_Firewall.sh" "&"
		StartService "Confirm Installation" "/usr/pluto/bin/ConfirmInstallation.sh" "&"
		StartService "Starting MySQL Server" "service mysql start"

		if [[ -f /usr/pluto/bin/SQL_Ops.sh  && -f /usr/pluto/bin/Config_Ops.sh ]] ;then
			Q="SELECT FK_Installation FROM Device WHERE PK_Device='$PK_Device'"
			R="$(RunSQL "$Q")"
			ConfSet PK_Installation "$R"

			Q="SELECT PK_Users FROM Users LIMIT 1"
			R="$(RunSQL "$Q")"
			ConfSet PK_Users "$R"
		fi

		RunSQL "UPDATE Orbiter set Regen=2,RegenInProgress=0 where RegenInProgress=1"

		StartDaemon "Starting Dhcp Plugin" "/usr/pluto/bin/Dhcpd-Plugin.sh" "DhcpdPlugin"
		StartDaemon "Start PNP MD Plugin (interactor)" "/usr/pluto/bin/Start_NewMD_interactor.sh" "NewMDinteractor"
		StartDaemon "Start Voicemail Monitor" "/usr/pluto/bin/VoiceMailMonitor.sh" "VoiceMailMonitor"
	fi

	if [[ "$AutostartMedia" -eq "1" ]] ; then
	        # Load MD modules early in case they are needed for something to work later on
	        StartService "Loading Kernel Modules" "/usr/pluto/bin/LoadMDModules.sh"
	fi

	#if [[ "$FirstBoot" != "false" && ! -f /usr/pluto/install/.notdone ]] ;then
	#	#StartService "Updating Software Database" "/usr/pluto/bin/getxmls" "&"
	#	#/usr/pluto/bin/getxmls &> /var/log/pluto/add_software_debug.log &
	#	#ConfSet "FirstBoot" "false" 2>/dev/null 1>/dev/null
	#	:
	#fi

	StartService "Setting SSH Keys" "/usr/pluto/bin/SSH_Keys.sh" "&"
	StartService "Setting Coredump Location" "/usr/pluto/bin/corefile.sh" "&"
	StartService "Detecting Timezone" "/usr/pluto/bin/Timezone_Detect.sh" "&"
	StartService "Enable Wake-on-LAN" "/usr/pluto/bin/enable_wol.sh" "&"
	StartService "Reporting Machine Status" "/usr/pluto/bin/Report_Machine_Status.sh" "&"

	StartService "Configuring Pluto Storage Devices" "/usr/pluto/bin/StorageDevices_Setup.sh" "&"
	StartService "Starting Status Radar" "/usr/pluto/bin/StorageDevices_StatusRadar.sh" "&"
	StartService "Starting Samba Radar" "/usr/pluto/bin/StorageDevices_SambaRadar.sh" "&"
	StartService "Starting NFS Radar" "/usr/pluto/bin/StorageDevices_NFSRadar.sh" "&"

	#Disable the GamePad Radar, hal takes care of this through udev now
	#StartService "Starting Gamepad Radar" "/usr/pluto/bin/Gamepad_Detect.sh" "&"

	# Disable here, but turn into a start-up script for the individual devices.
	#StartService "Creating Firewire 2 Video4Linux Pipes" "/usr/pluto/bin/Firewire2Video4Linux.sh" "&"
	#StartService "PVR-250 tuner restore" "/usr/pluto/bin/CaptureCards_BootConfig_PVR-250.sh" "&"

	## Setup ALSA mixers
	#amixer sset Capture 90%
	#amixer sset 'Mic Boost (+20dB)' unmute
	#alsactl store

	export DISPLAY=":${Display}"

	/usr/pluto/bin/SetupAudioVideo.sh

	# hack: cleaning lockfile on M/D start to allow
	# local devices to start
	# TODO: remove this when correct locking will be implemented
	rm -f /usr/pluto/locks/pluto_spawned_local_devices.txt
	if [[ "$AutostartMedia" -eq "1" ]] ; then
		Q="SELECT FK_DeviceTemplate FROM Device WHERE PK_Device=$PK_Device"
		FK_DeviceTemplate=$(RunSQL "$Q")

		# FIXME: Look for an Orbiter on non-rpi-qMDs to determine if is X is needed?
		if [[ "$FK_DeviceTemplate" == "$DD_DEVICETEMPLATE_GenericPC_as_MD" ]] ||
			[[ "$FK_DeviceTemplate" == "$DD_DEVICETEMPLATE_GenericPC_as_qMD" ]] ||
			[[ "$FK_DeviceTemplate" == "$DD_DEVICETEMPLATE_RPi_B_as_MD" ]] ||
			[[ "$FK_DeviceTemplate" == "$DD_DEVICETEMPLATE_Core" ]] ||
			[[ "$FK_DeviceTemplate" == "$DD_DEVICETEMPLATE_Joggler" ]]; then
				StartX
		fi
	fi

	StartService "Configure Device Changes" "/usr/pluto/bin/Config_Device_Changes.sh"

	# If we are using VDR as our PVR, make sure the video dir is available, and restart VDR
	# if needed.
	if VDRInstalled ; then
		if [[ -f /etc/default/vdr ]]; then
			. /etc/default/vdr
		fi
		cd $VIDEO_DIR
		if ! pidof vdr ; then
			# If we are running on the cure, we need to restart VDR after mounting the relevant devices
			if [[ "$AutostartCore" -eq "1" ]] ; then
				service vdr restart
			fi
		fi
	fi

	StartDaemon  "Starting LinuxMCE Launch Manager" "/usr/pluto/bin/LaunchManagerDaemon.sh" "LMCE_Launch_Manager"

	if [[ -x /bin/plymouth ]]; then
	        /bin/plymouth --hide-splash || :
	fi

	:
	return $?
}

StopService() {
	ServiceDescription=$1
	ServiceCmd=$2
	ServiceName=$3

        log_daemon_msg "$ServiceDescription" "$ServiceCmd"

	screenpid=$(basename $(find /var/run/screen | grep "$ServiceName") 2>/dev/null)
	err=$?
	if [[ "$err" == "0" ]]; then
		pid=$(echo $screenpid | cut -d '.' -f1)
		kill $pid
		err=$?
		if [[ "$err" != "0" ]]; then
			kill -9 $pid
			err=$?
		fi
	fi
	log_end_msg $err
	return $err
}

stop() {
        log_daemon_msg "Stopping LinuxMCE" "linuxmce"
	#StopService "Stopping Restart_Myth_Backend" "/usr/pluto/bin/Restart_Myth_Backend.sh" "Restart_Myth_Backend"
	#StopService "Stopping discovery" "/usr/pluto/bin/discovery.py" "discovery"
	#StopService "Stopping Orbiter" "/usr/pluto/bin/Spawn_Device.sh" "OnScreen_Orbiter"
	#StopService "Stopping LMCE Launch Manager" "/usr/pluto/bin/LaunchManagerDaemon.sh" "LMCE_Launch_Manager"
	#StopService "Stopping DCERouter" "/usr/pluto/bin/Spawn_DCERouter.sh" "DCERouter"
	#StopService "Stopping XWindowSystem" "/usr/pluto/bin/Start_X_Wrapper.sh" "XWindowSystem"

	#StopService "Stopping Gamepad Radar" "/usr/pluto/bin/Gamepad_Detect.sh" "GamepadRadar"
	#StopService "Stopping NFS Radar" "/usr/pluto/bin/StorageDevices_NFSRadar.sh" "NFSRadar"
	#StopService "Stopping Samba Radar" "/usr/pluto/bin/StorageDevices_SambaRadar.sh" "SambaRadar"
	#StopService "Stopping Storage Status Radar" "/usr/pluto/bin/StorageDevices_StatusRadar.sh" "StorageStatusRadar"
	#StopService "Stopping Voicemail Monitor" "/usr/pluto/bin/VoiceMailMonitor.sh" "VoiceMailMonitor"
	#StopService "Stopping PNP MD Plugin (interactor)" "/usr/pluto/bin/Start_NewMD_interactor.sh" "NewMDinteractor"
	#StopService "Stopping Dhcpd Plugin" "/usr/pluto/bin/Dhcpd-Plugin.sh" "DhcpdPlugin"

	StartService "Enable Wake-on-LAN" "/usr/pluto/bin/enable_wol.sh"
	StartService "Halt MDs" "/usr/pluto/bin/HaltMDs.sh"

	:
	return $?
}

status() {
	status_of_proc linuxmce LinuxMCE
	return $?
}

### main logic ###
case "$1" in
	start)
		$1
		retval=$?
		;;
	stop)
		$1
		retval=$?
		;;
	status)
		$1
		retval=$?
		;;
	restart|reload)
		: # noop
		retval=$?
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|reload|status}"
		retval=1
esac
exit $retval
