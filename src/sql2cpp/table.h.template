/*
     Copyright (C) 2004 Pluto, Inc., a Florida Corporation

     www.plutohome.com

     Phone: +1 (877) 758-8648
 

     This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License.
     This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     See the GNU General Public License for more details.

*/

#ifndef __Table_@table_name@_H__
#define __Table_@table_name@_H__

#include "TableRow.h"
#include "Database_@database_name@.h"
#include "PlutoUtils/MultiThreadIncludes.h"
#include "Define_@table_name@.h"
#include "SerializeClass/SerializeClass.h"

// If we declare the maps locally, the compiler will create multiple copies of them
// making the output files enormous.  The solution seems to be to create some predefined
// maps for the standard types of primary keys (single long, double long, etc.) and
// put them in a common base class, which is optionally included as tablebase below

class DECLSPECIFIER TableRow;
class DECLSPECIFIER SerializeClass;

class DECLSPECIFIER Table_@table_name@ : public TableBase @table_base@
{
private:
	Database_@database_name@ *database;
	struct Key;	//forward declaration
	
public:
	Table_@table_name@(Database_@database_name@ *pDatabase):database(pDatabase)
	{
	};
	~Table_@table_name@();

private:		
	friend class Row_@table_name@;
	struct Key
	{
		friend class Row_@table_name@;
		@primary_fields_declaration@
		
		Key(@primary_fields_in_typed_list@);
	
		Key(class Row_@table_name@ *pRow);
	};
	struct Key_Less
	{			
		bool operator()(const Table_@table_name@::Key &key1, const Table_@table_name@::Key &key2) const;
	};	

	@map_cached_rows@
	@map_deleted_cached_rows@

public:				
	// Normally the framework never deletes any Row_X objects, since the application will
	// likely have pointers to them.  This means that if a Commit fails because a row
	// cannot be committed, all subsequent calls to Commit will also fail unless you fix
	// the rows since they will be re-attempted.  If you set either flag to true, the failed
	// row can be deleted.  Use with caution since your pointers become invalid!
	bool Commit(bool bDeleteFailedModifiedRow=false,bool bDeleteFailedInsertRow=false);
	bool GetRows(string where_statement,vector<class Row_@table_name@*> *rows);
	class Row_@table_name@* AddRow();
	Database_@database_name@ *Database_@database_name@_get() { return database; }
	
	@ifdef_have_primary_keys@	
	class Row_@table_name@* GetRow(@primary_fields_in_typed_list@);
	@endif_have_primary_keys@

private:	
	
	@ifdef_have_primary_keys@	
	class Row_@table_name@* FetchRow(@table_key@ &key);
	@endif_have_primary_keys@	
			
};

class DECLSPECIFIER Row_@table_name@ : public TableRow, public SerializeClass
	{
		friend struct Table_@table_name@::Key;
		friend class Table_@table_name@;
	private:
		Table_@table_name@ *table;
		
		@fields_declaration@
		bool is_null[@fields_count@];
	
	public:
		@getters_declaration@
		
		@setters_declaration@
		
		@null_getters_declaration@
			
		@null_setters_declaration@	
	
		void Delete();
		void Reload();		
	
		Row_@table_name@(Table_@table_name@ *pTable);
	
		bool IsDeleted(){return is_deleted;};
		bool IsModified(){return is_modified;};			
		class Table_@table_name@ *Table_@table_name@_get() { return table; };

		// Return the rows for foreign keys 
		@rows_getters_declaration@

		// Return the rows in other tables with foreign keys pointing here
		@fk_rows_getters_declaration@

		// Setup binary serialization
		void SetupSerialization(int iSC_Version) {
			StartSerializeList() @member_variable_list@;
		}
	private:
		void SetDefaultValues();
		
		@fields_sql_getters_declaration@
	};

#endif
