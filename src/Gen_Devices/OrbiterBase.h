#ifndef OrbiterBase_h
#define OrbiterBase_h
#include "DeviceData_Impl.h"
#include "Message.h"
#include "Command_Impl.h"
#include "Logger.h"
#include "../pluto_main/Define_Command.h"
#include "../pluto_main/Define_CommandParameter.h"
#include "../pluto_main/Define_DeviceTemplate.h"
#include "../pluto_main/Define_Event.h"
#include "../pluto_main/Define_EventParameter.h"
#include "../pluto_main/Define_DeviceData.h"


/**
* THESE CLASSES ARE AUTOGENERATED WITH PLUTO DCEGEN APPLICATION
* THIS FILE SHOULD NOT BE MODIFIED MANUALLY
*/

namespace DCE
{

/**
* @brief OUR EVENT CLASS
*/

class Orbiter_Event : public Event_Impl
{
public:

	/**
	* @brief Constructors
	*/
	Orbiter_Event(int DeviceID, string ServerAddress, bool bConnectEventHandler=true) :
		Event_Impl(DeviceID, DEVICETEMPLATE_Orbiter_CONST, ServerAddress, bConnectEventHandler, SOCKET_TIMEOUT) {};
	Orbiter_Event(class ClientSocket *pOCClientSocket, int DeviceID) : Event_Impl(pOCClientSocket, DeviceID) {};

	/**
	* @brief Events builder method
	*/
	class Event_Impl *CreateEvent(unsigned long dwPK_DeviceTemplate, ClientSocket *pOCClientSocket, unsigned long dwDevice);

	/**
	* @brief Events methods for our device
	*/

	virtual void Touch_or_click(int iX_Position,int iY_Position)
	{
		SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT, 
			EVENT_Touch_or_click_CONST,
			2 /* number of parameter's pairs (id, value) */,
			EVENTPARAMETER_X_Position_CONST, StringUtils::itos(iX_Position).c_str(),
			EVENTPARAMETER_Y_Position_CONST, StringUtils::itos(iY_Position).c_str()));
	}

};


/**
* @brief OUR DATA CLASS
*/

class Orbiter_Data : public DeviceData_Impl
{
public:

	/**
	* @brief No-op destructor
	*/
	virtual ~Orbiter_Data() {};

	/**
	* @brief Builder data method
	*/
	class DeviceData_Impl *CreateData(DeviceData_Impl *Parent, char *pDataBlock, 
		unsigned long AllocatedSize, char *CurrentPosition);

	/**
	* @brief Returns the id of the device template
	*/
	virtual int GetPK_DeviceList() { return DEVICETEMPLATE_Orbiter_CONST; } ;

	/**
	* @brief Returns the description of the device
	*/
	virtual const char *GetDeviceDescription() { return "Orbiter"; } ;

	/**
	* @brief Device data access methods:
	*/

	string Get_Path()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Path_CONST);
		else
			return m_mapParameters[DEVICEDATA_Path_CONST];
	}

	int Get_PK_Users()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Users_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Users_CONST].c_str());
	}

	string Get_Current_Screen()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Current_Screen_CONST);
		else
			return m_mapParameters[DEVICEDATA_Current_Screen_CONST];
	}

	void Set_Current_Screen(string Value)
	{
		SetParm(DEVICEDATA_Current_Screen_CONST,Value.c_str());
	}
	int Get_PK_Distro()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Distro_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Distro_CONST].c_str());
	}

	bool Get_Development()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Development_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Development_CONST]=="1" ? true : false);
	}

	bool Get_No_Effects()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_No_Effects_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_No_Effects_CONST]=="1" ? true : false);
	}

	int Get_PK_Skin()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Skin_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Skin_CONST].c_str());
	}

	int Get_PK_Size()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Size_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Size_CONST].c_str());
	}

	int Get_PK_Language()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Language_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Language_CONST].c_str());
	}

	string Get_FK_EntertainArea()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_FK_EntertainArea_CONST);
		else
			return m_mapParameters[DEVICEDATA_FK_EntertainArea_CONST];
	}

	string Get_Update_Name()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Update_Name_CONST);
		else
			return m_mapParameters[DEVICEDATA_Update_Name_CONST];
	}

	string Get_Communication_file()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Communication_file_CONST);
		else
			return m_mapParameters[DEVICEDATA_Communication_file_CONST];
	}

	string Get_Timeout()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Timeout_CONST);
		else
			return m_mapParameters[DEVICEDATA_Timeout_CONST];
	}

	string Get_CacheFolder()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_CacheFolder_CONST);
		else
			return m_mapParameters[DEVICEDATA_CacheFolder_CONST];
	}

	int Get_CacheSize()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_CacheSize_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_CacheSize_CONST].c_str());
	}

	bool Get_Use_OCG_Format()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Use_OCG_Format_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Use_OCG_Format_CONST]=="1" ? true : false);
	}

	int Get_VideoFrameInterval()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_VideoFrameInterval_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_VideoFrameInterval_CONST].c_str());
	}

	int Get_ImageQuality()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_ImageQuality_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_ImageQuality_CONST].c_str());
	}

	void Set_ImageQuality(int Value)
	{
		SetParm(DEVICEDATA_ImageQuality_CONST,StringUtils::itos(Value).c_str());
	}
	bool Get_Leave_Monitor_on_for_OSD()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Leave_Monitor_on_for_OSD_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Leave_Monitor_on_for_OSD_CONST]=="1" ? true : false);
	}

	bool Get_Ignore()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Ignore_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Ignore_CONST]=="1" ? true : false);
	}

	bool Get_Dont_Auto_Jump_to_Remote()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Dont_Auto_Jump_to_Remote_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Dont_Auto_Jump_to_Remote_CONST]=="1" ? true : false);
	}

	int Get_ScreenWidth()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_ScreenWidth_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_ScreenWidth_CONST].c_str());
	}

	int Get_ScreenHeight()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_ScreenHeight_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_ScreenHeight_CONST].c_str());
	}

	int Get_Rotation()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Rotation_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_Rotation_CONST].c_str());
	}

	int Get_PK_UI()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_UI_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_UI_CONST].c_str());
	}

	string Get_Hard_Keys_mapping()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Hard_Keys_mapping_CONST);
		else
			return m_mapParameters[DEVICEDATA_Hard_Keys_mapping_CONST];
	}

	int Get_Using_Infrared()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Using_Infrared_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_Using_Infrared_CONST].c_str());
	}

	string Get_Remote_Phone_IP()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Remote_Phone_IP_CONST);
		else
			return m_mapParameters[DEVICEDATA_Remote_Phone_IP_CONST];
	}

	int Get_Listen_Port()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Listen_Port_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_Listen_Port_CONST].c_str());
	}

	int Get_PK_Screen()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_PK_Screen_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_PK_Screen_CONST].c_str());
	}

	string Get_Spacing()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Spacing_CONST);
		else
			return m_mapParameters[DEVICEDATA_Spacing_CONST];
	}

	void Set_Spacing(string Value)
	{
		SetParm(DEVICEDATA_Spacing_CONST,Value.c_str());
	}
	string Get_Offset()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Offset_CONST);
		else
			return m_mapParameters[DEVICEDATA_Offset_CONST];
	}

	void Set_Offset(string Value)
	{
		SetParm(DEVICEDATA_Offset_CONST,Value.c_str());
	}
	bool Get_Get_Time_Code_for_Media()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Get_Time_Code_for_Media_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Get_Time_Code_for_Media_CONST]=="1" ? true : false);
	}

	string Get_Shortcut()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Shortcut_CONST);
		else
			return m_mapParameters[DEVICEDATA_Shortcut_CONST];
	}

	bool Get_Expert_Mode()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Expert_Mode_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Expert_Mode_CONST]=="1" ? true : false);
	}

	bool Get_Enable_Memory_Management()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Enable_Memory_Management_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Enable_Memory_Management_CONST]=="1" ? true : false);
	}

	int Get_Border_Size()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Border_Size_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_Border_Size_CONST].c_str());
	}

	string Get_Alert_Filter_Level()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Alert_Filter_Level_CONST);
		else
			return m_mapParameters[DEVICEDATA_Alert_Filter_Level_CONST];
	}

	bool Get_Ignore_First_Event()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Ignore_First_Event_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Ignore_First_Event_CONST]=="1" ? true : false);
	}

	void Set_Ignore_First_Event(bool Value)
	{
		SetParm(DEVICEDATA_Ignore_First_Event_CONST,(Value ? "1" : "0"));
	}
	bool Get_Automatically_Go_to_Remote()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Automatically_Go_to_Remote_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Automatically_Go_to_Remote_CONST]=="1" ? true : false);
	}

	bool Get_Queue_Instead_of_Instant_Play()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Queue_Instead_of_Instant_Play_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Queue_Instead_of_Instant_Play_CONST]=="1" ? true : false);
	}

	void Set_Queue_Instead_of_Instant_Play(bool Value)
	{
		SetParm(DEVICEDATA_Queue_Instead_of_Instant_Play_CONST,(Value ? "1" : "0"));
	}
};



//   OUR COMMAND CLASS 

class Orbiter_Command : public Command_Impl
{
public:
	Orbiter_Command(int DeviceID, string ServerAddress,bool bConnectEventHandler=true,bool bLocalMode=false,class Router *pRouter=NULL)
	: Command_Impl(DeviceID, ServerAddress, bLocalMode, pRouter)
	{
	}
	virtual bool GetConfig()
	{
		m_pData=NULL;
		m_pEvent = new Orbiter_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
		if( m_pEvent->m_dwPK_Device )
			m_dwPK_Device = m_pEvent->m_dwPK_Device;
		if( m_sIPAddress!=m_pEvent->m_pClientSocket->m_sIPAddress )	
			m_sIPAddress=m_pEvent->m_pClientSocket->m_sIPAddress;
		m_sMacAddress=m_pEvent->m_pClientSocket->m_sMacAddress;
		if( m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None )
		{
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice )
			{
				while( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice && (m_dwPK_Device = DeviceIdInvalid())!=0 )
				{
					delete m_pEvent;
					m_pEvent = new Orbiter_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
					if( m_pEvent->m_dwPK_Device )
						m_dwPK_Device = m_pEvent->m_dwPK_Device;
				}
			}
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_NeedReload )
			{
				if( RouterNeedsReload() )
				{
					string sResponse;
					Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
					event_Impl.m_pClientSocket->SendString( "RELOAD" );
					if( !event_Impl.m_pClientSocket->ReceiveString( sResponse ) || sResponse!="OK" )
					{
						CannotReloadRouter();
						LoggerWrapper::GetInstance()->Write(LV_WARNING,"Reload request denied: %s",sResponse.c_str());
					}
				Sleep(10000);  // Give the router 10 seconds before we re-attempt, otherwise we'll get an error right away
				}	
			}
		}
		
		if( m_bLocalMode )
		{
			m_pData = new Orbiter_Data();
			return true;
		}
		if( (m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None && m_pEvent->m_pClientSocket->m_eLastError!=cs_err_NeedReload) || m_pEvent->m_pClientSocket->m_Socket==INVALID_SOCKET )
			return false;

		int Size; char *pConfig = m_pEvent->GetConfig(Size);
		if( !pConfig )
			return false;
		m_pData = new Orbiter_Data();
		if( Size )
		{
			if( m_pData->SerializeRead(Size,pConfig)==false )
				return false;
		}
		else
		{
			m_pData->m_dwPK_Device=m_dwPK_Device;  // Assign this here since it didn't get it's own data
			string sResponse;
			Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
			event_Impl.m_pClientSocket->SendString( "PARENT " + StringUtils::itos(m_dwPK_Device) );
			if( event_Impl.m_pClientSocket->ReceiveString( sResponse ) && sResponse.size()>=8 )
				m_pData->m_dwPK_Device_ControlledVia = atoi( sResponse.substr(7).c_str() );
			m_pData->m_bRunningWithoutDeviceData=true;
		}
		delete[] pConfig;
		pConfig = m_pEvent->GetDeviceList(Size);
		if( m_pData->m_AllDevices.SerializeRead(Size,pConfig)==false )
			return false;
		delete[] pConfig;
		m_pData->m_pEvent_Impl = m_pEvent;
		m_pcRequestSocket = new Event_Impl(m_dwPK_Device, DEVICETEMPLATE_Orbiter_CONST,m_sHostName);
		if( m_iInstanceID )
		{
			m_pEvent->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
			m_pcRequestSocket->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
		}
		PostConfigCleanup();
		return true;
	};
	Orbiter_Command(Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent, Router *pRouter) : Command_Impl(pPrimaryDeviceCommand, pData, pEvent, pRouter) {};
	virtual ~Orbiter_Command() {};
	Orbiter_Event *GetEvents() { return (Orbiter_Event *) m_pEvent; };
	Orbiter_Data *GetData() { return (Orbiter_Data *) m_pData; };
	const char *GetClassName() { return "Orbiter_Command"; };
	virtual int PK_DeviceTemplate_get() { return DEVICETEMPLATE_Orbiter_CONST; };
	static int PK_DeviceTemplate_get_static() { return DEVICETEMPLATE_Orbiter_CONST; };
	virtual void ReceivedCommandForChild(DeviceData_Impl *pDeviceData_Impl,string &sCMD_Result,Message *pMessage) { };
	virtual void ReceivedUnknownCommand(string &sCMD_Result,Message *pMessage) { };
	Command_Impl *CreateCommand(int PK_DeviceTemplate, Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent);
	//Data accessors
	string DATA_Get_Path() { return GetData()->Get_Path(); }
	int DATA_Get_PK_Users() { return GetData()->Get_PK_Users(); }
	string DATA_Get_Current_Screen() { return GetData()->Get_Current_Screen(); }
	void DATA_Set_Current_Screen(string Value,bool bUpdateDatabase=false) { GetData()->Set_Current_Screen(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,4,Value); }
	int DATA_Get_PK_Distro() { return GetData()->Get_PK_Distro(); }
	bool DATA_Get_Development() { return GetData()->Get_Development(); }
	bool DATA_Get_No_Effects() { return GetData()->Get_No_Effects(); }
	int DATA_Get_PK_Skin() { return GetData()->Get_PK_Skin(); }
	int DATA_Get_PK_Size() { return GetData()->Get_PK_Size(); }
	int DATA_Get_PK_Language() { return GetData()->Get_PK_Language(); }
	string DATA_Get_FK_EntertainArea() { return GetData()->Get_FK_EntertainArea(); }
	string DATA_Get_Update_Name() { return GetData()->Get_Update_Name(); }
	string DATA_Get_Communication_file() { return GetData()->Get_Communication_file(); }
	string DATA_Get_Timeout() { return GetData()->Get_Timeout(); }
	string DATA_Get_CacheFolder() { return GetData()->Get_CacheFolder(); }
	int DATA_Get_CacheSize() { return GetData()->Get_CacheSize(); }
	bool DATA_Get_Use_OCG_Format() { return GetData()->Get_Use_OCG_Format(); }
	int DATA_Get_VideoFrameInterval() { return GetData()->Get_VideoFrameInterval(); }
	int DATA_Get_ImageQuality() { return GetData()->Get_ImageQuality(); }
	void DATA_Set_ImageQuality(int Value,bool bUpdateDatabase=false) { GetData()->Set_ImageQuality(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,75,Value); }
	bool DATA_Get_Leave_Monitor_on_for_OSD() { return GetData()->Get_Leave_Monitor_on_for_OSD(); }
	bool DATA_Get_Ignore() { return GetData()->Get_Ignore(); }
	bool DATA_Get_Dont_Auto_Jump_to_Remote() { return GetData()->Get_Dont_Auto_Jump_to_Remote(); }
	int DATA_Get_ScreenWidth() { return GetData()->Get_ScreenWidth(); }
	int DATA_Get_ScreenHeight() { return GetData()->Get_ScreenHeight(); }
	int DATA_Get_Rotation() { return GetData()->Get_Rotation(); }
	int DATA_Get_PK_UI() { return GetData()->Get_PK_UI(); }
	string DATA_Get_Hard_Keys_mapping() { return GetData()->Get_Hard_Keys_mapping(); }
	int DATA_Get_Using_Infrared() { return GetData()->Get_Using_Infrared(); }
	string DATA_Get_Remote_Phone_IP() { return GetData()->Get_Remote_Phone_IP(); }
	int DATA_Get_Listen_Port() { return GetData()->Get_Listen_Port(); }
	int DATA_Get_PK_Screen() { return GetData()->Get_PK_Screen(); }
	string DATA_Get_Spacing() { return GetData()->Get_Spacing(); }
	void DATA_Set_Spacing(string Value,bool bUpdateDatabase=false) { GetData()->Set_Spacing(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,150,Value); }
	string DATA_Get_Offset() { return GetData()->Get_Offset(); }
	void DATA_Set_Offset(string Value,bool bUpdateDatabase=false) { GetData()->Set_Offset(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,167,Value); }
	bool DATA_Get_Get_Time_Code_for_Media() { return GetData()->Get_Get_Time_Code_for_Media(); }
	string DATA_Get_Shortcut() { return GetData()->Get_Shortcut(); }
	bool DATA_Get_Expert_Mode() { return GetData()->Get_Expert_Mode(); }
	bool DATA_Get_Enable_Memory_Management() { return GetData()->Get_Enable_Memory_Management(); }
	int DATA_Get_Border_Size() { return GetData()->Get_Border_Size(); }
	string DATA_Get_Alert_Filter_Level() { return GetData()->Get_Alert_Filter_Level(); }
	bool DATA_Get_Ignore_First_Event() { return GetData()->Get_Ignore_First_Event(); }
	void DATA_Set_Ignore_First_Event(bool Value,bool bUpdateDatabase=false) { GetData()->Set_Ignore_First_Event(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,274,Value); }
	bool DATA_Get_Automatically_Go_to_Remote() { return GetData()->Get_Automatically_Go_to_Remote(); }
	bool DATA_Get_Queue_Instead_of_Instant_Play() { return GetData()->Get_Queue_Instead_of_Instant_Play(); }
	void DATA_Set_Queue_Instead_of_Instant_Play(bool Value,bool bUpdateDatabase=false) { GetData()->Set_Queue_Instead_of_Instant_Play(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,282,Value); }
	//Event accessors
	void EVENT_Touch_or_click(int iX_Position,int iY_Position) { GetEvents()->Touch_or_click(iX_Position,iY_Position); }
	//Commands - Override these to handle commands from the server
	virtual void CMD_Capture_Keyboard_To_Variable(string sPK_DesignObj,int iPK_Variable,string sOnOff,string sType,string sReset,int iPK_Text,bool bDataGrid,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Orbiter_Beep(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Display_OnOff(string sOnOff,bool bAlready_processed,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Go_back(string sPK_DesignObj_CurrentScreen,string sForce,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Goto_DesignObj(int iPK_Device,string sPK_DesignObj,string sID,string sPK_DesignObj_CurrentScreen,bool bStore_Variables,bool bCant_Go_Back,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_Object(string sPK_DesignObj,int iPK_Variable,string sComparisson_Operator,string sComparisson_Value,string sOnOff,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Terminate_Orbiter(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Remove_Screen_From_History(string sID,int iPK_Screen,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Scroll_Grid(string sRelative_Level,string sPK_DesignObj,int iPK_Direction,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Move_Highlight(string sRelative_Level,string sPK_DesignObj,int iPK_Direction,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Play_Sound(char *pData,int iData_Size,string sFormat,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Refresh(string sDataGrid_ID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Regen_Screen(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Requires_Special_Handling(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Seek_Data_Grid(string sText,int iPosition_X,int iPosition_Y,string sDataGrid_ID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Graphic_To_Display(string sPK_DesignObj,string sID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Object_Parameter(string sPK_DesignObj,string sValue_To_Assign,int iPK_DesignObjParameter,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Object_Position(string sPK_DesignObj,int iPosition_X,int iPosition_Y,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Object_Size(string sPK_DesignObj,int iPosition_X,int iPosition_Y,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Pos_Rel_To_Parent(string sPK_DesignObj,int iPosition_X,int iPosition_Y,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Size_Rel_To_Parent(string sPK_DesignObj,int iPosition_X,int iPosition_Y,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Text(string sPK_DesignObj,string sText,int iPK_Text,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Bound_Icon(string sValue_To_Assign,string sText,string sType,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Variable(int iPK_Variable,string sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Simulate_Keypress(string sPK_Button,int iStreamID,string sName,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Simulate_Mouse_Click(int iPosition_X,int iPosition_Y,int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Stop_Sound(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Store_Variables(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Update_Object_Image(string sPK_DesignObj,string sType,char *pData,int iData_Size,string sDisable_Aspect_Lock,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Current_User(int iPK_Users,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Entertainment_Area(string sPK_EntertainArea,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Select_Object(string sPK_DesignObj,string sPK_DesignObj_CurrentScreen,string sTime,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Spawn_Application(string sFilename,string sName,string sArguments,string sSendOnFailure,string sSendOnSuccess,bool bShow_logo,bool bRetransmit,bool bExclusive,bool bDetach,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Surrender_to_OS(string sOnOff,bool bFully_release_keyboard,bool bAlways,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Current_Room(int iPK_Room,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Reset_Highlight(string sPK_DesignObj,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Current_Location(int iLocationID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Guide(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_EnterGo(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_On(int iPK_Pipe,string sPK_Device_Pipes,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Off(int iPK_Pipe,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Toggle_Power(string sOnOff,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Move_Up(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Move_Down(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Move_Left(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Move_Right(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Continuous_Refresh(string sTime,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Back_Prior_Menu(int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Now_Playing(string sPK_DesignObj,string sValue_To_Assign,string sText,int iPK_MediaType,int iStreamID,int iValue,string sName,string sList_PK_Device,bool bRetransmit,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Bind_Icon(string sPK_DesignObj,string sType,bool bChild,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Clear_Selected_Devices(string sPK_DesignObj,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Main_Menu(string sText,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Quit(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Timeout(string sPK_DesignObj,string sTime,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Keep_Screen_On(string sOnOff,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Mouse_Pointer_Over_Object(string sPK_DesignObj,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_Mouse_Pointer(string sOnOff,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Back_Clear_Entry(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Activate_Window(string sName,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Send_Message(string sText,bool bGo_Back,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_Popup(string sPK_DesignObj,int iPosition_X,int iPosition_Y,string sPK_DesignObj_CurrentScreen,string sName,bool bExclusive,bool bDont_Auto_Hide,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Remove_Popup(string sPK_DesignObj_CurrentScreen,string sName,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_Shortcuts(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_File_List(int iPK_MediaType,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Use_Popup_Remote_Controls(int iPosition_X,int iPosition_Y,string sPK_DesignObj_CurrentScreen,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Use_Popup_File_List(int iPosition_X,int iPosition_Y,string sPK_DesignObj_CurrentScreen,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Scale_this_object(int iValue,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Floorplan(string sPK_DesignObj,string sType,bool bTrueFalse,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Show_Floorplan(int iPosition_X,int iPosition_Y,string sType,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Forward_local_kb_to_OSD(bool bTrueFalse,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Mouse_Position_Relative(int iPosition_X,int iPosition_Y,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Simulate_Mouse_Click_At_Present_Pos(string sType,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Menu(string sText,int iStreamID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Update_Time_Code(int iStreamID,string sTime,string sTotal,string sSpeed,string sTitle,string sSection,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Goto_Screen(string sID,int iPK_Screen,int iInterruption,bool bTurn_On,bool bQueue,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Mouse_Behavior(string sPK_DesignObj,string sOptions,bool bExclusive,string sDirection,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Mouse_Sensitivity(int iValue,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Display_Alert(string sText,string sTokens,string sTimeout,int iInterruption,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Active_Application(string sName,int iPK_Screen,string sIdentifier,int iPK_Screen_GoTo,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Active_Application(string *sName,int *iPK_Screen,string *sIdentifier,int *iPK_Screen_GoTo,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Execute_Shortcut(int iValue,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Bind_to_Wireless_Keyboard(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Activate_PC_Desktop(bool bTrueFalse,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Assisted_Make_Call(int iPK_Users,string sPhoneExtension,string sPK_Device_From,int iPK_Device_To,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_XPromptReload(string sText,string &sCMD_Result,class Message *pMessage) {};

	//This distributes a received message to your handler.
	virtual ReceivedMessageResult ReceivedMessage(class Message *pMessageOriginal)
	{
		map<long, string>::iterator itRepeat;
		if( Command_Impl::ReceivedMessage(pMessageOriginal)==rmr_Processed )
		{
			if( pMessageOriginal->m_eExpectedResponse==ER_ReplyMessage && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				Message *pMessageOut=new Message(m_dwPK_Device,pMessageOriginal->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
				pMessageOut->m_mapParameters[0]="OK";
				SendMessage(pMessageOut);
			}
			else if( (pMessageOriginal->m_eExpectedResponse==ER_DeliveryConfirmation || pMessageOriginal->m_eExpectedResponse==ER_ReplyString) && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				SendString("OK");
			}
			return rmr_Processed;
		}
		int iHandled=0;
		for(int s=-1;s<(int) pMessageOriginal->m_vectExtraMessages.size(); ++s)
		{
			Message *pMessage = s>=0 ? pMessageOriginal->m_vectExtraMessages[s] : pMessageOriginal;
			if (pMessage->m_dwPK_Device_To==m_dwPK_Device && pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND)
			{
				// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
				if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
					return rmr_Buffered;
				switch(pMessage->m_dwID)
				{
				case COMMAND_Capture_Keyboard_To_Variable_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPK_Variable=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Variable_CONST].c_str());
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						string sReset=pMessage->m_mapParameters[COMMANDPARAMETER_Reset_CONST];
						int iPK_Text=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Text_CONST].c_str());
						bool bDataGrid=(pMessage->m_mapParameters[COMMANDPARAMETER_DataGrid_CONST]=="1" ? true : false);
						CMD_Capture_Keyboard_To_Variable(sPK_DesignObj.c_str(),iPK_Variable,sOnOff.c_str(),sType.c_str(),sReset.c_str(),iPK_Text,bDataGrid,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Capture_Keyboard_To_Variable(sPK_DesignObj.c_str(),iPK_Variable,sOnOff.c_str(),sType.c_str(),sReset.c_str(),iPK_Text,bDataGrid,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Orbiter_Beep_CONST:
					{
						string sCMD_Result="OK";
						CMD_Orbiter_Beep(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Orbiter_Beep(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Display_OnOff_CONST:
					{
						string sCMD_Result="OK";
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						bool bAlready_processed=(pMessage->m_mapParameters[COMMANDPARAMETER_Already_processed_CONST]=="1" ? true : false);
						CMD_Display_OnOff(sOnOff.c_str(),bAlready_processed,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Display_OnOff(sOnOff.c_str(),bAlready_processed,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Go_back_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						string sForce=pMessage->m_mapParameters[COMMANDPARAMETER_Force_CONST];
						CMD_Go_back(sPK_DesignObj_CurrentScreen.c_str(),sForce.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Go_back(sPK_DesignObj_CurrentScreen.c_str(),sForce.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Goto_DesignObj_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sID=pMessage->m_mapParameters[COMMANDPARAMETER_ID_CONST];
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						bool bStore_Variables=(pMessage->m_mapParameters[COMMANDPARAMETER_Store_Variables_CONST]=="1" ? true : false);
						bool bCant_Go_Back=(pMessage->m_mapParameters[COMMANDPARAMETER_Cant_Go_Back_CONST]=="1" ? true : false);
						CMD_Goto_DesignObj(iPK_Device,sPK_DesignObj.c_str(),sID.c_str(),sPK_DesignObj_CurrentScreen.c_str(),bStore_Variables,bCant_Go_Back,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Goto_DesignObj(iPK_Device,sPK_DesignObj.c_str(),sID.c_str(),sPK_DesignObj_CurrentScreen.c_str(),bStore_Variables,bCant_Go_Back,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_Object_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPK_Variable=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Variable_CONST].c_str());
						string sComparisson_Operator=pMessage->m_mapParameters[COMMANDPARAMETER_Comparisson_Operator_CONST];
						string sComparisson_Value=pMessage->m_mapParameters[COMMANDPARAMETER_Comparisson_Value_CONST];
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						CMD_Show_Object(sPK_DesignObj.c_str(),iPK_Variable,sComparisson_Operator.c_str(),sComparisson_Value.c_str(),sOnOff.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_Object(sPK_DesignObj.c_str(),iPK_Variable,sComparisson_Operator.c_str(),sComparisson_Value.c_str(),sOnOff.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Terminate_Orbiter_CONST:
					{
						string sCMD_Result="OK";
						CMD_Terminate_Orbiter(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Terminate_Orbiter(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Remove_Screen_From_History_CONST:
					{
						string sCMD_Result="OK";
						string sID=pMessage->m_mapParameters[COMMANDPARAMETER_ID_CONST];
						int iPK_Screen=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_CONST].c_str());
						CMD_Remove_Screen_From_History(sID.c_str(),iPK_Screen,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Remove_Screen_From_History(sID.c_str(),iPK_Screen,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Scroll_Grid_CONST:
					{
						string sCMD_Result="OK";
						string sRelative_Level=pMessage->m_mapParameters[COMMANDPARAMETER_Relative_Level_CONST];
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPK_Direction=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Direction_CONST].c_str());
						CMD_Scroll_Grid(sRelative_Level.c_str(),sPK_DesignObj.c_str(),iPK_Direction,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Scroll_Grid(sRelative_Level.c_str(),sPK_DesignObj.c_str(),iPK_Direction,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Move_Highlight_CONST:
					{
						string sCMD_Result="OK";
						string sRelative_Level=pMessage->m_mapParameters[COMMANDPARAMETER_Relative_Level_CONST];
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPK_Direction=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Direction_CONST].c_str());
						CMD_Move_Highlight(sRelative_Level.c_str(),sPK_DesignObj.c_str(),iPK_Direction,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Move_Highlight(sRelative_Level.c_str(),sPK_DesignObj.c_str(),iPK_Direction,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Play_Sound_CONST:
					{
						string sCMD_Result="OK";
						char *pData=pMessage->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST];
						int iData_Size=pMessage->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST];
						string sFormat=pMessage->m_mapParameters[COMMANDPARAMETER_Format_CONST];
						CMD_Play_Sound(pData,iData_Size,sFormat.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Play_Sound(pData,iData_Size,sFormat.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Refresh_CONST:
					{
						string sCMD_Result="OK";
						string sDataGrid_ID=pMessage->m_mapParameters[COMMANDPARAMETER_DataGrid_ID_CONST];
						CMD_Refresh(sDataGrid_ID.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Refresh(sDataGrid_ID.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Regen_Screen_CONST:
					{
						string sCMD_Result="OK";
						CMD_Regen_Screen(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Regen_Screen(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Requires_Special_Handling_CONST:
					{
						string sCMD_Result="OK";
						CMD_Requires_Special_Handling(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Requires_Special_Handling(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Seek_Data_Grid_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						string sDataGrid_ID=pMessage->m_mapParameters[COMMANDPARAMETER_DataGrid_ID_CONST];
						CMD_Seek_Data_Grid(sText.c_str(),iPosition_X,iPosition_Y,sDataGrid_ID.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Seek_Data_Grid(sText.c_str(),iPosition_X,iPosition_Y,sDataGrid_ID.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Graphic_To_Display_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sID=pMessage->m_mapParameters[COMMANDPARAMETER_ID_CONST];
						CMD_Set_Graphic_To_Display(sPK_DesignObj.c_str(),sID.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Graphic_To_Display(sPK_DesignObj.c_str(),sID.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Object_Parameter_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						int iPK_DesignObjParameter=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObjParameter_CONST].c_str());
						CMD_Set_Object_Parameter(sPK_DesignObj.c_str(),sValue_To_Assign.c_str(),iPK_DesignObjParameter,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Object_Parameter(sPK_DesignObj.c_str(),sValue_To_Assign.c_str(),iPK_DesignObjParameter,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Object_Position_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						CMD_Set_Object_Position(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Object_Position(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Object_Size_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						CMD_Set_Object_Size(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Object_Size(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Pos_Rel_To_Parent_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						CMD_Set_Pos_Rel_To_Parent(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Pos_Rel_To_Parent(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Size_Rel_To_Parent_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						CMD_Set_Size_Rel_To_Parent(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Size_Rel_To_Parent(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Text_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						int iPK_Text=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Text_CONST].c_str());
						CMD_Set_Text(sPK_DesignObj.c_str(),sText.c_str(),iPK_Text,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Text(sPK_DesignObj.c_str(),sText.c_str(),iPK_Text,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Bound_Icon_CONST:
					{
						string sCMD_Result="OK";
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						CMD_Set_Bound_Icon(sValue_To_Assign.c_str(),sText.c_str(),sType.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Bound_Icon(sValue_To_Assign.c_str(),sText.c_str(),sType.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Variable_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Variable=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Variable_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Set_Variable(iPK_Variable,sValue_To_Assign.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Variable(iPK_Variable,sValue_To_Assign.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Simulate_Keypress_CONST:
					{
						string sCMD_Result="OK";
						string sPK_Button=pMessage->m_mapParameters[COMMANDPARAMETER_PK_Button_CONST];
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						CMD_Simulate_Keypress(sPK_Button.c_str(),iStreamID,sName.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Simulate_Keypress(sPK_Button.c_str(),iStreamID,sName.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Simulate_Mouse_Click_CONST:
					{
						string sCMD_Result="OK";
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Simulate_Mouse_Click(iPosition_X,iPosition_Y,iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Simulate_Mouse_Click(iPosition_X,iPosition_Y,iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Stop_Sound_CONST:
					{
						string sCMD_Result="OK";
						CMD_Stop_Sound(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Stop_Sound(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Store_Variables_CONST:
					{
						string sCMD_Result="OK";
						CMD_Store_Variables(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Store_Variables(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Update_Object_Image_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						char *pData=pMessage->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST];
						int iData_Size=pMessage->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST];
						string sDisable_Aspect_Lock=pMessage->m_mapParameters[COMMANDPARAMETER_Disable_Aspect_Lock_CONST];
						CMD_Update_Object_Image(sPK_DesignObj.c_str(),sType.c_str(),pData,iData_Size,sDisable_Aspect_Lock.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Update_Object_Image(sPK_DesignObj.c_str(),sType.c_str(),pData,iData_Size,sDisable_Aspect_Lock.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Current_User_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Users=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Users_CONST].c_str());
						CMD_Set_Current_User(iPK_Users,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Current_User(iPK_Users,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Entertainment_Area_CONST:
					{
						string sCMD_Result="OK";
						string sPK_EntertainArea=pMessage->m_mapParameters[COMMANDPARAMETER_PK_EntertainArea_CONST];
						CMD_Set_Entertainment_Area(sPK_EntertainArea.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Entertainment_Area(sPK_EntertainArea.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Select_Object_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						string sTime=pMessage->m_mapParameters[COMMANDPARAMETER_Time_CONST];
						CMD_Select_Object(sPK_DesignObj.c_str(),sPK_DesignObj_CurrentScreen.c_str(),sTime.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Select_Object(sPK_DesignObj.c_str(),sPK_DesignObj_CurrentScreen.c_str(),sTime.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Spawn_Application_CONST:
					{
						string sCMD_Result="OK";
						string sFilename=pMessage->m_mapParameters[COMMANDPARAMETER_Filename_CONST];
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						string sArguments=pMessage->m_mapParameters[COMMANDPARAMETER_Arguments_CONST];
						string sSendOnFailure=pMessage->m_mapParameters[COMMANDPARAMETER_SendOnFailure_CONST];
						string sSendOnSuccess=pMessage->m_mapParameters[COMMANDPARAMETER_SendOnSuccess_CONST];
						bool bShow_logo=(pMessage->m_mapParameters[COMMANDPARAMETER_Show_logo_CONST]=="1" ? true : false);
						bool bRetransmit=(pMessage->m_mapParameters[COMMANDPARAMETER_Retransmit_CONST]=="1" ? true : false);
						bool bExclusive=(pMessage->m_mapParameters[COMMANDPARAMETER_Exclusive_CONST]=="1" ? true : false);
						bool bDetach=(pMessage->m_mapParameters[COMMANDPARAMETER_Detach_CONST]=="1" ? true : false);
						CMD_Spawn_Application(sFilename.c_str(),sName.c_str(),sArguments.c_str(),sSendOnFailure.c_str(),sSendOnSuccess.c_str(),bShow_logo,bRetransmit,bExclusive,bDetach,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Spawn_Application(sFilename.c_str(),sName.c_str(),sArguments.c_str(),sSendOnFailure.c_str(),sSendOnSuccess.c_str(),bShow_logo,bRetransmit,bExclusive,bDetach,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Surrender_to_OS_CONST:
					{
						string sCMD_Result="OK";
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						bool bFully_release_keyboard=(pMessage->m_mapParameters[COMMANDPARAMETER_Fully_release_keyboard_CONST]=="1" ? true : false);
						bool bAlways=(pMessage->m_mapParameters[COMMANDPARAMETER_Always_CONST]=="1" ? true : false);
						CMD_Surrender_to_OS(sOnOff.c_str(),bFully_release_keyboard,bAlways,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Surrender_to_OS(sOnOff.c_str(),bFully_release_keyboard,bAlways,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Current_Room_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						CMD_Set_Current_Room(iPK_Room,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Current_Room(iPK_Room,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Reset_Highlight_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						CMD_Reset_Highlight(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Reset_Highlight(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Current_Location_CONST:
					{
						string sCMD_Result="OK";
						int iLocationID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_LocationID_CONST].c_str());
						CMD_Set_Current_Location(iLocationID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Current_Location(iLocationID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Guide_CONST:
					{
						string sCMD_Result="OK";
						CMD_Guide(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Guide(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Send_Generic_EnterGo_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_EnterGo(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_EnterGo(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Generic_On_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
						string sPK_Device_Pipes=pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_Pipes_CONST];
						CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Generic_Off_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
						CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Toggle_Power_CONST:
					{
						string sCMD_Result="OK";
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						CMD_Toggle_Power(sOnOff.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Toggle_Power(sOnOff.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Move_Up_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Move_Up(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Move_Up(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Move_Down_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Move_Down(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Move_Down(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Move_Left_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Move_Left(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Move_Left(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Move_Right_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Move_Right(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Move_Right(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Continuous_Refresh_CONST:
					{
						string sCMD_Result="OK";
						string sTime=pMessage->m_mapParameters[COMMANDPARAMETER_Time_CONST];
						CMD_Continuous_Refresh(sTime.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Continuous_Refresh(sTime.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Back_Prior_Menu_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Back_Prior_Menu(iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Back_Prior_Menu(iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Now_Playing_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						int iPK_MediaType=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_MediaType_CONST].c_str());
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						int iValue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Value_CONST].c_str());
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						string sList_PK_Device=pMessage->m_mapParameters[COMMANDPARAMETER_List_PK_Device_CONST];
						bool bRetransmit=(pMessage->m_mapParameters[COMMANDPARAMETER_Retransmit_CONST]=="1" ? true : false);
						CMD_Set_Now_Playing(sPK_DesignObj.c_str(),sValue_To_Assign.c_str(),sText.c_str(),iPK_MediaType,iStreamID,iValue,sName.c_str(),sList_PK_Device.c_str(),bRetransmit,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Now_Playing(sPK_DesignObj.c_str(),sValue_To_Assign.c_str(),sText.c_str(),iPK_MediaType,iStreamID,iValue,sName.c_str(),sList_PK_Device.c_str(),bRetransmit,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Bind_Icon_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						bool bChild=(pMessage->m_mapParameters[COMMANDPARAMETER_Child_CONST]=="1" ? true : false);
						CMD_Bind_Icon(sPK_DesignObj.c_str(),sType.c_str(),bChild,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Bind_Icon(sPK_DesignObj.c_str(),sType.c_str(),bChild,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Clear_Selected_Devices_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						CMD_Clear_Selected_Devices(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Clear_Selected_Devices(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Main_Menu_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						CMD_Set_Main_Menu(sText.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Main_Menu(sText.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Quit_CONST:
					{
						string sCMD_Result="OK";
						CMD_Quit(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Quit(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Timeout_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sTime=pMessage->m_mapParameters[COMMANDPARAMETER_Time_CONST];
						CMD_Set_Timeout(sPK_DesignObj.c_str(),sTime.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Timeout(sPK_DesignObj.c_str(),sTime.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Keep_Screen_On_CONST:
					{
						string sCMD_Result="OK";
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						CMD_Keep_Screen_On(sOnOff.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Keep_Screen_On(sOnOff.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Mouse_Pointer_Over_Object_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						CMD_Set_Mouse_Pointer_Over_Object(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Mouse_Pointer_Over_Object(sPK_DesignObj.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_Mouse_Pointer_CONST:
					{
						string sCMD_Result="OK";
						string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
						CMD_Show_Mouse_Pointer(sOnOff.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_Mouse_Pointer(sOnOff.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Back_Clear_Entry_CONST:
					{
						string sCMD_Result="OK";
						CMD_Back_Clear_Entry(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Back_Clear_Entry(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Activate_Window_CONST:
					{
						string sCMD_Result="OK";
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						CMD_Activate_Window(sName.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Activate_Window(sName.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Send_Message_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						bool bGo_Back=(pMessage->m_mapParameters[COMMANDPARAMETER_Go_Back_CONST]=="1" ? true : false);
						CMD_Send_Message(sText.c_str(),bGo_Back,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Send_Message(sText.c_str(),bGo_Back,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_Popup_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						bool bExclusive=(pMessage->m_mapParameters[COMMANDPARAMETER_Exclusive_CONST]=="1" ? true : false);
						bool bDont_Auto_Hide=(pMessage->m_mapParameters[COMMANDPARAMETER_Dont_Auto_Hide_CONST]=="1" ? true : false);
						CMD_Show_Popup(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sName.c_str(),bExclusive,bDont_Auto_Hide,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_Popup(sPK_DesignObj.c_str(),iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sName.c_str(),bExclusive,bDont_Auto_Hide,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Remove_Popup_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						CMD_Remove_Popup(sPK_DesignObj_CurrentScreen.c_str(),sName.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Remove_Popup(sPK_DesignObj_CurrentScreen.c_str(),sName.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_Shortcuts_CONST:
					{
						string sCMD_Result="OK";
						CMD_Show_Shortcuts(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_Shortcuts(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_File_List_CONST:
					{
						string sCMD_Result="OK";
						int iPK_MediaType=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_MediaType_CONST].c_str());
						CMD_Show_File_List(iPK_MediaType,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_File_List(iPK_MediaType,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Use_Popup_Remote_Controls_CONST:
					{
						string sCMD_Result="OK";
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						CMD_Use_Popup_Remote_Controls(iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Use_Popup_Remote_Controls(iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Use_Popup_File_List_CONST:
					{
						string sCMD_Result="OK";
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						string sPK_DesignObj_CurrentScreen=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CurrentScreen_CONST];
						CMD_Use_Popup_File_List(iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Use_Popup_File_List(iPosition_X,iPosition_Y,sPK_DesignObj_CurrentScreen.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Scale_this_object_CONST:
					{
						string sCMD_Result="OK";
						int iValue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Value_CONST].c_str());
						CMD_Scale_this_object(iValue,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Scale_this_object(iValue,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Floorplan_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						bool bTrueFalse=(pMessage->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=="1" ? true : false);
						CMD_Set_Floorplan(sPK_DesignObj.c_str(),sType.c_str(),bTrueFalse,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Floorplan(sPK_DesignObj.c_str(),sType.c_str(),bTrueFalse,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Show_Floorplan_CONST:
					{
						string sCMD_Result="OK";
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						CMD_Show_Floorplan(iPosition_X,iPosition_Y,sType.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Show_Floorplan(iPosition_X,iPosition_Y,sType.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Forward_local_kb_to_OSD_CONST:
					{
						string sCMD_Result="OK";
						bool bTrueFalse=(pMessage->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=="1" ? true : false);
						CMD_Forward_local_kb_to_OSD(bTrueFalse,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Forward_local_kb_to_OSD(bTrueFalse,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Mouse_Position_Relative_CONST:
					{
						string sCMD_Result="OK";
						int iPosition_X=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_X_CONST].c_str());
						int iPosition_Y=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Position_Y_CONST].c_str());
						CMD_Set_Mouse_Position_Relative(iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Mouse_Position_Relative(iPosition_X,iPosition_Y,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Simulate_Mouse_Click_At_Present_Pos_CONST:
					{
						string sCMD_Result="OK";
						string sType=pMessage->m_mapParameters[COMMANDPARAMETER_Type_CONST];
						CMD_Simulate_Mouse_Click_At_Present_Pos(sType.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Simulate_Mouse_Click_At_Present_Pos(sType.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Menu_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						CMD_Menu(sText.c_str(),iStreamID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Menu(sText.c_str(),iStreamID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Update_Time_Code_CONST:
					{
						string sCMD_Result="OK";
						int iStreamID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_StreamID_CONST].c_str());
						string sTime=pMessage->m_mapParameters[COMMANDPARAMETER_Time_CONST];
						string sTotal=pMessage->m_mapParameters[COMMANDPARAMETER_Total_CONST];
						string sSpeed=pMessage->m_mapParameters[COMMANDPARAMETER_Speed_CONST];
						string sTitle=pMessage->m_mapParameters[COMMANDPARAMETER_Title_CONST];
						string sSection=pMessage->m_mapParameters[COMMANDPARAMETER_Section_CONST];
						CMD_Update_Time_Code(iStreamID,sTime.c_str(),sTotal.c_str(),sSpeed.c_str(),sTitle.c_str(),sSection.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Update_Time_Code(iStreamID,sTime.c_str(),sTotal.c_str(),sSpeed.c_str(),sTitle.c_str(),sSection.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Goto_Screen_CONST:
					{
						string sCMD_Result="OK";
						string sID=pMessage->m_mapParameters[COMMANDPARAMETER_ID_CONST];
						int iPK_Screen=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_CONST].c_str());
						int iInterruption=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Interruption_CONST].c_str());
						bool bTurn_On=(pMessage->m_mapParameters[COMMANDPARAMETER_Turn_On_CONST]=="1" ? true : false);
						bool bQueue=(pMessage->m_mapParameters[COMMANDPARAMETER_Queue_CONST]=="1" ? true : false);
						CMD_Goto_Screen(sID.c_str(),iPK_Screen,iInterruption,bTurn_On,bQueue,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Goto_Screen(sID.c_str(),iPK_Screen,iInterruption,bTurn_On,bQueue,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Mouse_Behavior_CONST:
					{
						string sCMD_Result="OK";
						string sPK_DesignObj=pMessage->m_mapParameters[COMMANDPARAMETER_PK_DesignObj_CONST];
						string sOptions=pMessage->m_mapParameters[COMMANDPARAMETER_Options_CONST];
						bool bExclusive=(pMessage->m_mapParameters[COMMANDPARAMETER_Exclusive_CONST]=="1" ? true : false);
						string sDirection=pMessage->m_mapParameters[COMMANDPARAMETER_Direction_CONST];
						CMD_Set_Mouse_Behavior(sPK_DesignObj.c_str(),sOptions.c_str(),bExclusive,sDirection.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Mouse_Behavior(sPK_DesignObj.c_str(),sOptions.c_str(),bExclusive,sDirection.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Mouse_Sensitivity_CONST:
					{
						string sCMD_Result="OK";
						int iValue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Value_CONST].c_str());
						CMD_Set_Mouse_Sensitivity(iValue,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Mouse_Sensitivity(iValue,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Display_Alert_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						string sTokens=pMessage->m_mapParameters[COMMANDPARAMETER_Tokens_CONST];
						string sTimeout=pMessage->m_mapParameters[COMMANDPARAMETER_Timeout_CONST];
						int iInterruption=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Interruption_CONST].c_str());
						CMD_Display_Alert(sText.c_str(),sTokens.c_str(),sTimeout.c_str(),iInterruption,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Display_Alert(sText.c_str(),sTokens.c_str(),sTimeout.c_str(),iInterruption,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Active_Application_CONST:
					{
						string sCMD_Result="OK";
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						int iPK_Screen=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_CONST].c_str());
						string sIdentifier=pMessage->m_mapParameters[COMMANDPARAMETER_Identifier_CONST];
						int iPK_Screen_GoTo=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_GoTo_CONST].c_str());
						CMD_Set_Active_Application(sName.c_str(),iPK_Screen,sIdentifier.c_str(),iPK_Screen_GoTo,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Active_Application(sName.c_str(),iPK_Screen,sIdentifier.c_str(),iPK_Screen_GoTo,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Active_Application_CONST:
					{
						string sCMD_Result="OK";
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						int iPK_Screen=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_CONST].c_str());
						string sIdentifier=pMessage->m_mapParameters[COMMANDPARAMETER_Identifier_CONST];
						int iPK_Screen_GoTo=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Screen_GoTo_CONST].c_str());
						CMD_Get_Active_Application(&sName,&iPK_Screen,&sIdentifier,&iPK_Screen_GoTo,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Name_CONST]=sName;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_PK_Screen_CONST]=StringUtils::itos(iPK_Screen);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Identifier_CONST]=sIdentifier;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_PK_Screen_GoTo_CONST]=StringUtils::itos(iPK_Screen_GoTo);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Active_Application(&sName,&iPK_Screen,&sIdentifier,&iPK_Screen_GoTo,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Execute_Shortcut_CONST:
					{
						string sCMD_Result="OK";
						int iValue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Value_CONST].c_str());
						CMD_Execute_Shortcut(iValue,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Execute_Shortcut(iValue,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Bind_to_Wireless_Keyboard_CONST:
					{
						string sCMD_Result="OK";
						CMD_Bind_to_Wireless_Keyboard(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Bind_to_Wireless_Keyboard(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Activate_PC_Desktop_CONST:
					{
						string sCMD_Result="OK";
						bool bTrueFalse=(pMessage->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=="1" ? true : false);
						CMD_Activate_PC_Desktop(bTrueFalse,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Activate_PC_Desktop(bTrueFalse,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Assisted_Make_Call_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Users=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Users_CONST].c_str());
						string sPhoneExtension=pMessage->m_mapParameters[COMMANDPARAMETER_PhoneExtension_CONST];
						string sPK_Device_From=pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_From_CONST];
						int iPK_Device_To=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_To_CONST].c_str());
						CMD_Assisted_Make_Call(iPK_Users,sPhoneExtension.c_str(),sPK_Device_From.c_str(),iPK_Device_To,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Assisted_Make_Call(iPK_Users,sPhoneExtension.c_str(),sPK_Device_From.c_str(),iPK_Device_To,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_XPromptReload_CONST:
					{
						string sCMD_Result="OK";
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						CMD_XPromptReload(sText.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_XPromptReload(sText.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				}
				iHandled += (Command_Impl::ReceivedMessage(pMessage)==rmr_NotProcessed ? 0 : 1);
			}
			else if( pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND )
			{
				MapCommand_Impl::iterator it = m_mapCommandImpl_Children.find(pMessage->m_dwPK_Device_To);
				if( it!=m_mapCommandImpl_Children.end() && !(*it).second->m_bGeneric )
				{
					Command_Impl *pCommand_Impl = (*it).second;
					iHandled += pCommand_Impl->ReceivedMessage(pMessage);
			}
			else
			{
				DeviceData_Impl *pDeviceData_Impl = m_pData->FindChild(pMessage->m_dwPK_Device_To);
				string sCMD_Result="UNHANDLED";
				if( pDeviceData_Impl )
				{
					// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
					if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
						return rmr_Buffered;
					ReceivedCommandForChild(pDeviceData_Impl,sCMD_Result,pMessage);
				}
				else
					ReceivedUnknownCommand(sCMD_Result,pMessage);
					if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
					{
							pMessage->m_bRespondedToMessage=true;
						Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[0]=sCMD_Result;
						SendMessage(pMessageOut);
					}
					else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
						SendString(sCMD_Result);
						}
					if( sCMD_Result!="UNHANDLED" && sCMD_Result!="UNKNOWN DEVICE" )
						iHandled++;
				}
			}
			if( iHandled==0 && !pMessage->m_bRespondedToMessage &&
			(pMessage->m_eExpectedResponse==ER_ReplyMessage || pMessage->m_eExpectedResponse==ER_ReplyString || pMessage->m_eExpectedResponse==ER_DeliveryConfirmation) )
			{
				pMessage->m_bRespondedToMessage=true;
				if( pMessage->m_eExpectedResponse==ER_ReplyMessage )
				{
					Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
					pMessageOut->m_mapParameters[0]="UNHANDLED";
					SendMessage(pMessageOut);
				}
				else
					SendString("UNHANDLED");
			}
		}
		return iHandled!=0 ? rmr_Processed : rmr_NotProcessed;
	}
}; // end class


}
#endif
