#ifndef General_Info_PluginBase_h
#define General_Info_PluginBase_h
#include "DeviceData_Impl.h"
#include "Message.h"
#include "Command_Impl.h"
#include "Logger.h"
#include "../pluto_main/Define_Command.h"
#include "../pluto_main/Define_CommandParameter.h"
#include "../pluto_main/Define_DeviceTemplate.h"
#include "../pluto_main/Define_Event.h"
#include "../pluto_main/Define_EventParameter.h"
#include "../pluto_main/Define_DeviceData.h"


/**
* THESE CLASSES ARE AUTOGENERATED WITH PLUTO DCEGEN APPLICATION
* THIS FILE SHOULD NOT BE MODIFIED MANUALLY
*/

namespace DCE
{

/**
* @brief OUR EVENT CLASS
*/

class General_Info_Plugin_Event : public Event_Impl
{
public:

	/**
	* @brief Constructors
	*/
	General_Info_Plugin_Event(int DeviceID, string ServerAddress, bool bConnectEventHandler=true) :
		Event_Impl(DeviceID, DEVICETEMPLATE_General_Info_Plugin_CONST, ServerAddress, bConnectEventHandler, SOCKET_TIMEOUT_PLUGIN) {};
	General_Info_Plugin_Event(class ClientSocket *pOCClientSocket, int DeviceID) : Event_Impl(pOCClientSocket, DeviceID) {};

	/**
	* @brief Events builder method
	*/
	class Event_Impl *CreateEvent(unsigned long dwPK_DeviceTemplate, ClientSocket *pOCClientSocket, unsigned long dwDevice);

	/**
	* @brief Events methods for our device
	*/

};


/**
* @brief OUR DATA CLASS
*/

class General_Info_Plugin_Data : public DeviceData_Impl
{
public:

	/**
	* @brief No-op destructor
	*/
	virtual ~General_Info_Plugin_Data() {};

	/**
	* @brief Builder data method
	*/
	class DeviceData_Impl *CreateData(DeviceData_Impl *Parent, char *pDataBlock, 
		unsigned long AllocatedSize, char *CurrentPosition);

	/**
	* @brief Returns the id of the device template
	*/
	virtual int GetPK_DeviceList() { return DEVICETEMPLATE_General_Info_Plugin_CONST; } ;

	/**
	* @brief Returns the description of the device
	*/
	virtual const char *GetDeviceDescription() { return "General_Info_Plugin"; } ;

	/**
	* @brief Device data access methods:
	*/

};



//   OUR COMMAND CLASS 

class General_Info_Plugin_Command : public Command_Impl
{
public:
	General_Info_Plugin_Command(int DeviceID, string ServerAddress,bool bConnectEventHandler=true,bool bLocalMode=false,class Router *pRouter=NULL)
	: Command_Impl(DeviceID, ServerAddress, bLocalMode, pRouter)
	{
	}
	virtual bool GetConfig()
	{
		m_pData=NULL;
		m_pEvent = new General_Info_Plugin_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
		if( m_pEvent->m_dwPK_Device )
			m_dwPK_Device = m_pEvent->m_dwPK_Device;
		if( m_sIPAddress!=m_pEvent->m_pClientSocket->m_sIPAddress )	
			m_sIPAddress=m_pEvent->m_pClientSocket->m_sIPAddress;
		m_sMacAddress=m_pEvent->m_pClientSocket->m_sMacAddress;
		if( m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None )
		{
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice )
			{
				while( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice && (m_dwPK_Device = DeviceIdInvalid())!=0 )
				{
					delete m_pEvent;
					m_pEvent = new General_Info_Plugin_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
					if( m_pEvent->m_dwPK_Device )
						m_dwPK_Device = m_pEvent->m_dwPK_Device;
				}
			}
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_NeedReload )
			{
				if( RouterNeedsReload() )
				{
					string sResponse;
					Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
					event_Impl.m_pClientSocket->SendString( "RELOAD" );
					if( !event_Impl.m_pClientSocket->ReceiveString( sResponse ) || sResponse!="OK" )
					{
						CannotReloadRouter();
						LoggerWrapper::GetInstance()->Write(LV_WARNING,"Reload request denied: %s",sResponse.c_str());
					}
				Sleep(10000);  // Give the router 10 seconds before we re-attempt, otherwise we'll get an error right away
				}	
			}
		}
		
		if( m_bLocalMode )
		{
			m_pData = new General_Info_Plugin_Data();
			return true;
		}
		if( (m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None && m_pEvent->m_pClientSocket->m_eLastError!=cs_err_NeedReload) || m_pEvent->m_pClientSocket->m_Socket==INVALID_SOCKET )
			return false;

		int Size; char *pConfig = m_pEvent->GetConfig(Size);
		if( !pConfig )
			return false;
		m_pData = new General_Info_Plugin_Data();
		if( Size )
		{
			if( m_pData->SerializeRead(Size,pConfig)==false )
				return false;
		}
		else
		{
			m_pData->m_dwPK_Device=m_dwPK_Device;  // Assign this here since it didn't get it's own data
			string sResponse;
			Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
			event_Impl.m_pClientSocket->SendString( "PARENT " + StringUtils::itos(m_dwPK_Device) );
			if( event_Impl.m_pClientSocket->ReceiveString( sResponse ) && sResponse.size()>=8 )
				m_pData->m_dwPK_Device_ControlledVia = atoi( sResponse.substr(7).c_str() );
			m_pData->m_bRunningWithoutDeviceData=true;
		}
		delete[] pConfig;
		pConfig = m_pEvent->GetDeviceList(Size);
		if( m_pData->m_AllDevices.SerializeRead(Size,pConfig)==false )
			return false;
		delete[] pConfig;
		m_pData->m_pEvent_Impl = m_pEvent;
		m_pcRequestSocket = new Event_Impl(m_dwPK_Device, DEVICETEMPLATE_General_Info_Plugin_CONST,m_sHostName);
		if( m_iInstanceID )
		{
			m_pEvent->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
			m_pcRequestSocket->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
		}
		PostConfigCleanup();
		return true;
	};
	General_Info_Plugin_Command(Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent, Router *pRouter) : Command_Impl(pPrimaryDeviceCommand, pData, pEvent, pRouter) {};
	virtual ~General_Info_Plugin_Command() {};
	General_Info_Plugin_Event *GetEvents() { return (General_Info_Plugin_Event *) m_pEvent; };
	General_Info_Plugin_Data *GetData() { return (General_Info_Plugin_Data *) m_pData; };
	const char *GetClassName() { return "General_Info_Plugin_Command"; };
	virtual int PK_DeviceTemplate_get() { return DEVICETEMPLATE_General_Info_Plugin_CONST; };
	static int PK_DeviceTemplate_get_static() { return DEVICETEMPLATE_General_Info_Plugin_CONST; };
	virtual void ReceivedCommandForChild(DeviceData_Impl *pDeviceData_Impl,string &sCMD_Result,Message *pMessage) { };
	virtual void ReceivedUnknownCommand(string &sCMD_Result,Message *pMessage) { };
	Command_Impl *CreateCommand(int PK_DeviceTemplate, Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent);
	//Data accessors
	//Event accessors
	//Commands - Override these to handle commands from the server
	virtual void CMD_Get_Device_Data(int iPK_Device,int iPK_DeviceData,bool bUseDefault,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Request_File(string sFilename,char **pData,int *iData_Size,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Request_File_And_Checksum(string sFilename,char **pData,int *iData_Size,string *sChecksum,bool *bChecksum_Only,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Device_Data(int iPK_Device,string sValue_To_Assign,int iPK_DeviceData,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Device_State(int iPK_Device,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Device_Status(int iPK_Device,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Restart_DCERouter(string sForce,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Room_For_Device(int iPK_Device,string sName,int iPK_Room,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Wake_Device(int iPK_Device,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Halt_Device(int iPK_Device,string sForce,string sMac_address,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Room_Description(int iPK_Device,string *sText,int *iPK_Room,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Is_Daytime(bool *bTrueFalse,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Check_for_updates(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Check_for_updates_done(bool bFailed,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Create_Device(int iPK_DeviceTemplate,string sMac_address,int iPK_Room,string sIP_Address,string sData_String,int iPK_DHCPDevice,int iPK_Device_ControlledVia,string sDescription,int iPK_Orbiter,int iPK_Device_Related,int *iPK_Device,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Delete_Device(int iPK_Device,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Check_Mounts(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Device_Relations(int iPK_Device,string sList_PK_Device,bool bReverse,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Force_Update_Packages(string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Set_Enable_Status(int iPK_Device,bool bEnable,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_InitAVDeviceTemplateSettings(int iPK_DeviceTemplate,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Available_Storage_Device(int iSize,int *iPK_Device,string *sDescription,string *sPath,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Blacklist_Internal_Disk_Drive(int iPK_Device_ControlledVia,string sBlock_Device,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Unused_Serial_Ports(int iPK_Device,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Add_Software(int iPK_Device,bool bTrueFalse,int iPK_Software,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_User_Name(int iPK_Users,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Network_Devices_Shares(char **pCustom_Response,int *iCustom_Response_Size,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_RemoteAssistance_SetStatus(bool bEnable,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_RemoteAssistance_GetStatus(bool *bEnable,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Abort_Task(int iParameter_ID,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Enable_Device(int iPK_Device,int iPK_Orbiter,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Home_Symlink(string sPath,string *sSymlink,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Devices_To_Start(int iPK_Device,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Update_Device(int iPK_Device,string sMac_address,int iPK_Room,string sIP_Address,string sData_String,string sDescription,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Send_Email(string sTo,string sSubject,string sMessageBody,string sFrom,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Users(string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Rooms(string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Scenarios(string sPK_EntertainArea,int iValue,int iPK_Room,string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Get_Entertainment_Areas(string *sValue_To_Assign,string &sCMD_Result,class Message *pMessage) {};

	//This distributes a received message to your handler.
	virtual ReceivedMessageResult ReceivedMessage(class Message *pMessageOriginal)
	{
		map<long, string>::iterator itRepeat;
		if( Command_Impl::ReceivedMessage(pMessageOriginal)==rmr_Processed )
		{
			if( pMessageOriginal->m_eExpectedResponse==ER_ReplyMessage && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				Message *pMessageOut=new Message(m_dwPK_Device,pMessageOriginal->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
				pMessageOut->m_mapParameters[0]="OK";
				SendMessage(pMessageOut);
			}
			else if( (pMessageOriginal->m_eExpectedResponse==ER_DeliveryConfirmation || pMessageOriginal->m_eExpectedResponse==ER_ReplyString) && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				SendString("OK");
			}
			return rmr_Processed;
		}
		int iHandled=0;
		for(int s=-1;s<(int) pMessageOriginal->m_vectExtraMessages.size(); ++s)
		{
			Message *pMessage = s>=0 ? pMessageOriginal->m_vectExtraMessages[s] : pMessageOriginal;
			if (pMessage->m_dwPK_Device_To==m_dwPK_Device && pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND)
			{
				// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
				if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
					return rmr_Buffered;
				switch(pMessage->m_dwID)
				{
				case COMMAND_Get_Device_Data_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						int iPK_DeviceData=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DeviceData_CONST].c_str());
						bool bUseDefault=(pMessage->m_mapParameters[COMMANDPARAMETER_UseDefault_CONST]=="1" ? true : false);
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Device_Data(iPK_Device,iPK_DeviceData,bUseDefault,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Device_Data(iPK_Device,iPK_DeviceData,bUseDefault,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Request_File_CONST:
					{
						string sCMD_Result="OK";
						string sFilename=pMessage->m_mapParameters[COMMANDPARAMETER_Filename_CONST];
						char *pData=pMessage->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST];
						int iData_Size=pMessage->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST];
						CMD_Request_File(sFilename.c_str(),&pData,&iData_Size,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST]=pData; pMessageOut->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST]=iData_Size;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Request_File(sFilename.c_str(),&pData,&iData_Size,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Request_File_And_Checksum_CONST:
					{
						string sCMD_Result="OK";
						string sFilename=pMessage->m_mapParameters[COMMANDPARAMETER_Filename_CONST];
						char *pData=pMessage->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST];
						int iData_Size=pMessage->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST];
						string sChecksum=pMessage->m_mapParameters[COMMANDPARAMETER_Checksum_CONST];
						bool bChecksum_Only=(pMessage->m_mapParameters[COMMANDPARAMETER_Checksum_Only_CONST]=="1" ? true : false);
						CMD_Request_File_And_Checksum(sFilename.c_str(),&pData,&iData_Size,&sChecksum,&bChecksum_Only,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapData_Parameters[COMMANDPARAMETER_Data_CONST]=pData; pMessageOut->m_mapData_Lengths[COMMANDPARAMETER_Data_CONST]=iData_Size;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Checksum_CONST]=sChecksum;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Checksum_Only_CONST]=(bChecksum_Only ? "1" : "0");
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Request_File_And_Checksum(sFilename.c_str(),&pData,&iData_Size,&sChecksum,&bChecksum_Only,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Device_Data_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						int iPK_DeviceData=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DeviceData_CONST].c_str());
						CMD_Set_Device_Data(iPK_Device,sValue_To_Assign.c_str(),iPK_DeviceData,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Device_Data(iPK_Device,sValue_To_Assign.c_str(),iPK_DeviceData,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Device_State_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Device_State(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Device_State(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Device_Status_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Device_Status(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Device_Status(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Restart_DCERouter_CONST:
					{
						string sCMD_Result="OK";
						string sForce=pMessage->m_mapParameters[COMMANDPARAMETER_Force_CONST];
						CMD_Restart_DCERouter(sForce.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Restart_DCERouter(sForce.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Room_For_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sName=pMessage->m_mapParameters[COMMANDPARAMETER_Name_CONST];
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						CMD_Set_Room_For_Device(iPK_Device,sName.c_str(),iPK_Room,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Room_For_Device(iPK_Device,sName.c_str(),iPK_Room,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Wake_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						CMD_Wake_Device(iPK_Device,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Wake_Device(iPK_Device,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Halt_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sForce=pMessage->m_mapParameters[COMMANDPARAMETER_Force_CONST];
						string sMac_address=pMessage->m_mapParameters[COMMANDPARAMETER_Mac_address_CONST];
						CMD_Halt_Device(iPK_Device,sForce.c_str(),sMac_address.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Halt_Device(iPK_Device,sForce.c_str(),sMac_address.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Room_Description_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						CMD_Get_Room_Description(iPK_Device,&sText,&iPK_Room,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Text_CONST]=sText;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST]=StringUtils::itos(iPK_Room);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Room_Description(iPK_Device,&sText,&iPK_Room,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Is_Daytime_CONST:
					{
						string sCMD_Result="OK";
						bool bTrueFalse=(pMessage->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=="1" ? true : false);
						CMD_Is_Daytime(&bTrueFalse,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=(bTrueFalse ? "1" : "0");
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Is_Daytime(&bTrueFalse,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Check_for_updates_CONST:
					{
						string sCMD_Result="OK";
						CMD_Check_for_updates(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Check_for_updates(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Check_for_updates_done_CONST:
					{
						string sCMD_Result="OK";
						bool bFailed=(pMessage->m_mapParameters[COMMANDPARAMETER_Failed_CONST]=="1" ? true : false);
						CMD_Check_for_updates_done(bFailed,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Check_for_updates_done(bFailed,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Create_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_DeviceTemplate=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DeviceTemplate_CONST].c_str());
						string sMac_address=pMessage->m_mapParameters[COMMANDPARAMETER_Mac_address_CONST];
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						string sIP_Address=pMessage->m_mapParameters[COMMANDPARAMETER_IP_Address_CONST];
						string sData_String=pMessage->m_mapParameters[COMMANDPARAMETER_Data_String_CONST];
						int iPK_DHCPDevice=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DHCPDevice_CONST].c_str());
						int iPK_Device_ControlledVia=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_ControlledVia_CONST].c_str());
						string sDescription=pMessage->m_mapParameters[COMMANDPARAMETER_Description_CONST];
						int iPK_Orbiter=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Orbiter_CONST].c_str());
						int iPK_Device_Related=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_Related_CONST].c_str());
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						CMD_Create_Device(iPK_DeviceTemplate,sMac_address.c_str(),iPK_Room,sIP_Address.c_str(),sData_String.c_str(),iPK_DHCPDevice,iPK_Device_ControlledVia,sDescription.c_str(),iPK_Orbiter,iPK_Device_Related,&iPK_Device,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST]=StringUtils::itos(iPK_Device);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Create_Device(iPK_DeviceTemplate,sMac_address.c_str(),iPK_Room,sIP_Address.c_str(),sData_String.c_str(),iPK_DHCPDevice,iPK_Device_ControlledVia,sDescription.c_str(),iPK_Orbiter,iPK_Device_Related,&iPK_Device,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Delete_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						CMD_Delete_Device(iPK_Device,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Delete_Device(iPK_Device,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Check_Mounts_CONST:
					{
						string sCMD_Result="OK";
						CMD_Check_Mounts(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Check_Mounts(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Device_Relations_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sList_PK_Device=pMessage->m_mapParameters[COMMANDPARAMETER_List_PK_Device_CONST];
						bool bReverse=(pMessage->m_mapParameters[COMMANDPARAMETER_Reverse_CONST]=="1" ? true : false);
						CMD_Set_Device_Relations(iPK_Device,sList_PK_Device.c_str(),bReverse,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Device_Relations(iPK_Device,sList_PK_Device.c_str(),bReverse,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Force_Update_Packages_CONST:
					{
						string sCMD_Result="OK";
						CMD_Force_Update_Packages(sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Force_Update_Packages(sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Set_Enable_Status_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						bool bEnable=(pMessage->m_mapParameters[COMMANDPARAMETER_Enable_CONST]=="1" ? true : false);
						CMD_Set_Enable_Status(iPK_Device,bEnable,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Set_Enable_Status(iPK_Device,bEnable,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_InitAVDeviceTemplateSettings_CONST:
					{
						string sCMD_Result="OK";
						int iPK_DeviceTemplate=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_DeviceTemplate_CONST].c_str());
						CMD_InitAVDeviceTemplateSettings(iPK_DeviceTemplate,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_InitAVDeviceTemplateSettings(iPK_DeviceTemplate,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Available_Storage_Device_CONST:
					{
						string sCMD_Result="OK";
						int iSize=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Size_CONST].c_str());
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sDescription=pMessage->m_mapParameters[COMMANDPARAMETER_Description_CONST];
						string sPath=pMessage->m_mapParameters[COMMANDPARAMETER_Path_CONST];
						CMD_Get_Available_Storage_Device(iSize,&iPK_Device,&sDescription,&sPath,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST]=StringUtils::itos(iPK_Device);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Description_CONST]=sDescription;
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Path_CONST]=sPath;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Available_Storage_Device(iSize,&iPK_Device,&sDescription,&sPath,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Blacklist_Internal_Disk_Drive_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device_ControlledVia=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_ControlledVia_CONST].c_str());
						string sBlock_Device=pMessage->m_mapParameters[COMMANDPARAMETER_Block_Device_CONST];
						CMD_Blacklist_Internal_Disk_Drive(iPK_Device_ControlledVia,sBlock_Device.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Blacklist_Internal_Disk_Drive(iPK_Device_ControlledVia,sBlock_Device.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Unused_Serial_Ports_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Unused_Serial_Ports(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Unused_Serial_Ports(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Add_Software_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						bool bTrueFalse=(pMessage->m_mapParameters[COMMANDPARAMETER_TrueFalse_CONST]=="1" ? true : false);
						int iPK_Software=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Software_CONST].c_str());
						CMD_Add_Software(iPK_Device,bTrueFalse,iPK_Software,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Add_Software(iPK_Device,bTrueFalse,iPK_Software,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_User_Name_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Users=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Users_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_User_Name(iPK_Users,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_User_Name(iPK_Users,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Network_Devices_Shares_CONST:
					{
						string sCMD_Result="OK";
						char *pCustom_Response=pMessage->m_mapData_Parameters[COMMANDPARAMETER_Custom_Response_CONST];
						int iCustom_Response_Size=pMessage->m_mapData_Lengths[COMMANDPARAMETER_Custom_Response_CONST];
						CMD_Get_Network_Devices_Shares(&pCustom_Response,&iCustom_Response_Size,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapData_Parameters[COMMANDPARAMETER_Custom_Response_CONST]=pCustom_Response; pMessageOut->m_mapData_Lengths[COMMANDPARAMETER_Custom_Response_CONST]=iCustom_Response_Size;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Network_Devices_Shares(&pCustom_Response,&iCustom_Response_Size,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_RemoteAssistance_SetStatus_CONST:
					{
						string sCMD_Result="OK";
						bool bEnable=(pMessage->m_mapParameters[COMMANDPARAMETER_Enable_CONST]=="1" ? true : false);
						CMD_RemoteAssistance_SetStatus(bEnable,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_RemoteAssistance_SetStatus(bEnable,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_RemoteAssistance_GetStatus_CONST:
					{
						string sCMD_Result="OK";
						bool bEnable=(pMessage->m_mapParameters[COMMANDPARAMETER_Enable_CONST]=="1" ? true : false);
						CMD_RemoteAssistance_GetStatus(&bEnable,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Enable_CONST]=(bEnable ? "1" : "0");
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_RemoteAssistance_GetStatus(&bEnable,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Abort_Task_CONST:
					{
						string sCMD_Result="OK";
						int iParameter_ID=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Parameter_ID_CONST].c_str());
						CMD_Abort_Task(iParameter_ID,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Abort_Task(iParameter_ID,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Enable_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						int iPK_Orbiter=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Orbiter_CONST].c_str());
						CMD_Enable_Device(iPK_Device,iPK_Orbiter,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Enable_Device(iPK_Device,iPK_Orbiter,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Home_Symlink_CONST:
					{
						string sCMD_Result="OK";
						string sPath=pMessage->m_mapParameters[COMMANDPARAMETER_Path_CONST];
						string sSymlink=pMessage->m_mapParameters[COMMANDPARAMETER_Symlink_CONST];
						CMD_Get_Home_Symlink(sPath.c_str(),&sSymlink,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Symlink_CONST]=sSymlink;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Home_Symlink(sPath.c_str(),&sSymlink,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Devices_To_Start_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Devices_To_Start(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Devices_To_Start(iPK_Device,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Update_Device_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Device=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_CONST].c_str());
						string sMac_address=pMessage->m_mapParameters[COMMANDPARAMETER_Mac_address_CONST];
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						string sIP_Address=pMessage->m_mapParameters[COMMANDPARAMETER_IP_Address_CONST];
						string sData_String=pMessage->m_mapParameters[COMMANDPARAMETER_Data_String_CONST];
						string sDescription=pMessage->m_mapParameters[COMMANDPARAMETER_Description_CONST];
						CMD_Update_Device(iPK_Device,sMac_address.c_str(),iPK_Room,sIP_Address.c_str(),sData_String.c_str(),sDescription.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Update_Device(iPK_Device,sMac_address.c_str(),iPK_Room,sIP_Address.c_str(),sData_String.c_str(),sDescription.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Send_Email_CONST:
					{
						string sCMD_Result="OK";
						string sTo=pMessage->m_mapParameters[COMMANDPARAMETER_To_CONST];
						string sSubject=pMessage->m_mapParameters[COMMANDPARAMETER_Subject_CONST];
						string sMessageBody=pMessage->m_mapParameters[COMMANDPARAMETER_MessageBody_CONST];
						string sFrom=pMessage->m_mapParameters[COMMANDPARAMETER_From_CONST];
						CMD_Send_Email(sTo.c_str(),sSubject.c_str(),sMessageBody.c_str(),sFrom.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Send_Email(sTo.c_str(),sSubject.c_str(),sMessageBody.c_str(),sFrom.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Users_CONST:
					{
						string sCMD_Result="OK";
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Users(&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Users(&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Rooms_CONST:
					{
						string sCMD_Result="OK";
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Rooms(&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Rooms(&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Scenarios_CONST:
					{
						string sCMD_Result="OK";
						string sPK_EntertainArea=pMessage->m_mapParameters[COMMANDPARAMETER_PK_EntertainArea_CONST];
						int iValue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Value_CONST].c_str());
						int iPK_Room=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Room_CONST].c_str());
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Scenarios(sPK_EntertainArea.c_str(),iValue,iPK_Room,&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Scenarios(sPK_EntertainArea.c_str(),iValue,iPK_Room,&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Get_Entertainment_Areas_CONST:
					{
						string sCMD_Result="OK";
						string sValue_To_Assign=pMessage->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST];
						CMD_Get_Entertainment_Areas(&sValue_To_Assign,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[COMMANDPARAMETER_Value_To_Assign_CONST]=sValue_To_Assign;
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Get_Entertainment_Areas(&sValue_To_Assign,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				}
				iHandled += (Command_Impl::ReceivedMessage(pMessage)==rmr_NotProcessed ? 0 : 1);
			}
			else if( pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND )
			{
				MapCommand_Impl::iterator it = m_mapCommandImpl_Children.find(pMessage->m_dwPK_Device_To);
				if( it!=m_mapCommandImpl_Children.end() && !(*it).second->m_bGeneric )
				{
					Command_Impl *pCommand_Impl = (*it).second;
					iHandled += pCommand_Impl->ReceivedMessage(pMessage);
			}
			else
			{
				DeviceData_Impl *pDeviceData_Impl = m_pData->FindChild(pMessage->m_dwPK_Device_To);
				string sCMD_Result="UNHANDLED";
				if( pDeviceData_Impl )
				{
					// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
					if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
						return rmr_Buffered;
					ReceivedCommandForChild(pDeviceData_Impl,sCMD_Result,pMessage);
				}
				else
					ReceivedUnknownCommand(sCMD_Result,pMessage);
					if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
					{
							pMessage->m_bRespondedToMessage=true;
						Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[0]=sCMD_Result;
						SendMessage(pMessageOut);
					}
					else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
						SendString(sCMD_Result);
						}
					if( sCMD_Result!="UNHANDLED" && sCMD_Result!="UNKNOWN DEVICE" )
						iHandled++;
				}
			}
			if( iHandled==0 && !pMessage->m_bRespondedToMessage &&
			(pMessage->m_eExpectedResponse==ER_ReplyMessage || pMessage->m_eExpectedResponse==ER_ReplyString || pMessage->m_eExpectedResponse==ER_DeliveryConfirmation) )
			{
				pMessage->m_bRespondedToMessage=true;
				if( pMessage->m_eExpectedResponse==ER_ReplyMessage )
				{
					Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
					pMessageOut->m_mapParameters[0]="UNHANDLED";
					SendMessage(pMessageOut);
				}
				else
					SendString("UNHANDLED");
			}
		}
		return iHandled!=0 ? rmr_Processed : rmr_NotProcessed;
	}
}; // end class


}
#endif
