#ifndef HueControllerBase_h
#define HueControllerBase_h
#include "DeviceData_Impl.h"
#include "Message.h"
#include "Command_Impl.h"
#include "Logger.h"
#include "../pluto_main/Define_Command.h"
#include "../pluto_main/Define_CommandParameter.h"
#include "../pluto_main/Define_DeviceTemplate.h"
#include "../pluto_main/Define_Event.h"
#include "../pluto_main/Define_EventParameter.h"
#include "../pluto_main/Define_DeviceData.h"
#include <QObject>

/**
* THESE CLASSES ARE AUTOGENERATED WITH PLUTO DCEGEN APPLICATION
* THIS FILE SHOULD NOT BE MODIFIED MANUALLY
*/

namespace DCE
{

/**
* @brief OUR EVENT CLASS
*/

class HueController_Event : public Event_Impl
{
public:

    /**
    * @brief Constructors
    */
    HueController_Event(int DeviceID, string ServerAddress, bool bConnectEventHandler=true) :
        Event_Impl(DeviceID, DEVICETEMPLATE_Hue_Controller_CONST, ServerAddress, bConnectEventHandler, SOCKET_TIMEOUT) {};
    HueController_Event(class ClientSocket *pOCClientSocket, int DeviceID) : Event_Impl(pOCClientSocket, DeviceID) {};

    /**
    * @brief Events builder method
    */
    class Event_Impl *CreateEvent(unsigned long dwPK_DeviceTemplate, ClientSocket *pOCClientSocket, unsigned long dwDevice);

    /**
    * @brief Events methods for our device
    */

    virtual void Device_OnOff(bool bOnOff)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Device_OnOff_CONST,
            1 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_OnOff_CONST, (bOnOff ? "1" : "0")));
    }

    virtual void Reporting_Child_Devices(string sError_Message,string sText)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Reporting_Child_Devices_CONST,
            2 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Error_Message_CONST, sError_Message.c_str(),
            EVENTPARAMETER_Text_CONST, sText.c_str()));
    }

    virtual void Download_Config_Done(string sError_Message)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Download_Config_Done_CONST,
            1 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Error_Message_CONST, sError_Message.c_str()));
    }

    virtual void Device_Detected(string sMac_Address,string sText,string sIP_Address,int iPK_DeviceTemplate,string sVendorModelID,int iPK_CommMethod,int iPK_PnpProtocol,string sPNP_Serial_Number,string sDeviceData,string sCategory,string sSignature)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Device_Detected_CONST,
            11 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Mac_Address_CONST, sMac_Address.c_str(),
            EVENTPARAMETER_Text_CONST, sText.c_str(),
            EVENTPARAMETER_IP_Address_CONST, sIP_Address.c_str(),
            EVENTPARAMETER_PK_DeviceTemplate_CONST, StringUtils::itos(iPK_DeviceTemplate).c_str(),
            EVENTPARAMETER_VendorModelID_CONST, sVendorModelID.c_str(),
            EVENTPARAMETER_PK_CommMethod_CONST, StringUtils::itos(iPK_CommMethod).c_str(),
            EVENTPARAMETER_PK_PnpProtocol_CONST, StringUtils::itos(iPK_PnpProtocol).c_str(),
            EVENTPARAMETER_PNP_Serial_Number_CONST, sPNP_Serial_Number.c_str(),
            EVENTPARAMETER_DeviceData_CONST, sDeviceData.c_str(),
            EVENTPARAMETER_Category_CONST, sCategory.c_str(),
            EVENTPARAMETER_Signature_CONST, sSignature.c_str()));
    }

    virtual void Device_Removed(string sMac_Address,string sText,int iPK_Device,string sIP_Address,int iPK_DeviceTemplate,string sVendorModelID,int iPK_CommMethod,int iPK_PnpProtocol,string sPNP_Serial_Number,string sDeviceData,string sCategory)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Device_Removed_CONST,
            11 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Mac_Address_CONST, sMac_Address.c_str(),
            EVENTPARAMETER_Text_CONST, sText.c_str(),
            EVENTPARAMETER_PK_Device_CONST, StringUtils::itos(iPK_Device).c_str(),
            EVENTPARAMETER_IP_Address_CONST, sIP_Address.c_str(),
            EVENTPARAMETER_PK_DeviceTemplate_CONST, StringUtils::itos(iPK_DeviceTemplate).c_str(),
            EVENTPARAMETER_VendorModelID_CONST, sVendorModelID.c_str(),
            EVENTPARAMETER_PK_CommMethod_CONST, StringUtils::itos(iPK_CommMethod).c_str(),
            EVENTPARAMETER_PK_PnpProtocol_CONST, StringUtils::itos(iPK_PnpProtocol).c_str(),
            EVENTPARAMETER_PNP_Serial_Number_CONST, sPNP_Serial_Number.c_str(),
            EVENTPARAMETER_DeviceData_CONST, sDeviceData.c_str(),
            EVENTPARAMETER_Category_CONST, sCategory.c_str()));
    }

    virtual void Done_Detecting_Devices(string sSignature)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Done_Detecting_Devices_CONST,
            1 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Signature_CONST, sSignature.c_str()));
    }

    virtual void Brightness_Changed(int iValue)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_Brightness_Changed_CONST,
            1 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Value_CONST, StringUtils::itos(iValue).c_str()));
    }

    virtual void State_Changed(int iValue)
    {
        SendMessage(new Message(m_dwPK_Device, DEVICEID_EVENTMANAGER, PRIORITY_NORMAL, MESSAGETYPE_EVENT,
            EVENT_State_Changed_CONST,
            1 /* number of parameter's pairs (id, value) */,
            EVENTPARAMETER_Value_CONST, StringUtils::itos(iValue).c_str()));
    }

};


/**
* @brief OUR DATA CLASS
*/

class HueController_Data : public DeviceData_Impl, public QObject
{
public:

    /**
    * @brief No-op destructor
    */
    virtual ~HueController_Data() {};

    /**
    * @brief Builder data method
    */
    class DeviceData_Impl *CreateData(DeviceData_Impl *Parent, char *pDataBlock,
        unsigned long AllocatedSize, char *CurrentPosition);

    /**
    * @brief Returns the id of the device template
    */
    virtual int GetPK_DeviceList() { return DEVICETEMPLATE_Hue_Controller_CONST; } ;

    /**
    * @brief Returns the description of the device
    */
    virtual const char *GetDeviceDescription() { return "HueController"; } ;

    /**
    * @brief Device data access methods:
    */

    string Get_Device()
    {
        if( m_bRunningWithoutDeviceData )
            return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Device_CONST);
        else
            return m_mapParameters[DEVICEDATA_Device_CONST];
    }

    string Get_Username()
    {
        if( m_bRunningWithoutDeviceData )
            return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Username_CONST);
        else
            return m_mapParameters[DEVICEDATA_Username_CONST];
    }

    void Set_Username(string Value)
    {
        SetParm(DEVICEDATA_Username_CONST,Value.c_str());
    }
    string Get_Server_IP()
    {
        if( m_bRunningWithoutDeviceData )
            return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Server_IP_CONST);
        else
            return m_mapParameters[DEVICEDATA_Server_IP_CONST];
    }

};



//   OUR COMMAND CLASS

class HueController_Command : public Command_Impl, public QObject
{
public:
        HueController_Command(int DeviceID, string ServerAddress,bool bConnectEventHandler=true,bool bLocalMode=false,class Router *pRouter=NULL, QObject * parent=0)
    : Command_Impl(DeviceID, ServerAddress, bLocalMode, pRouter)
    {
    }
    virtual bool GetConfig()
    {
        m_pData=NULL;
        m_pEvent = new HueController_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
        if( m_pEvent->m_dwPK_Device )
            m_dwPK_Device = m_pEvent->m_dwPK_Device;
        if( m_sIPAddress!=m_pEvent->m_pClientSocket->m_sIPAddress )
            m_sIPAddress=m_pEvent->m_pClientSocket->m_sIPAddress;
        m_sMacAddress=m_pEvent->m_pClientSocket->m_sMacAddress;
        if( m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None )
        {
            if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice )
            {
                while( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice && (m_dwPK_Device = DeviceIdInvalid())!=0 )
                {
                    delete m_pEvent;
                    m_pEvent = new HueController_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
                    if( m_pEvent->m_dwPK_Device )
                        m_dwPK_Device = m_pEvent->m_dwPK_Device;
                }
            }
            if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_NeedReload )
            {
                if( RouterNeedsReload() )
                {
                    string sResponse;
                    Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
                    event_Impl.m_pClientSocket->SendString( "RELOAD" );
                    if( !event_Impl.m_pClientSocket->ReceiveString( sResponse ) || sResponse!="OK" )
                    {
                        CannotReloadRouter();
                        LoggerWrapper::GetInstance()->Write(LV_WARNING,"Reload request denied: %s",sResponse.c_str());
                    }
                Sleep(10000);  // Give the router 10 seconds before we re-attempt, otherwise we'll get an error right away
                }
            }
        }

        if( m_bLocalMode )
        {
            m_pData = new HueController_Data();
            return true;
        }
        if( (m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None && m_pEvent->m_pClientSocket->m_eLastError!=cs_err_NeedReload) || m_pEvent->m_pClientSocket->m_Socket==INVALID_SOCKET )
            return false;

        int Size; char *pConfig = m_pEvent->GetConfig(Size);
        if( !pConfig )
            return false;
        m_pData = new HueController_Data();
        if( Size )
        {
            if( m_pData->SerializeRead(Size,pConfig)==false )
                return false;
        }
        else
        {
            m_pData->m_dwPK_Device=m_dwPK_Device;  // Assign this here since it didn't get it's own data
            string sResponse;
            Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
            event_Impl.m_pClientSocket->SendString( "PARENT " + StringUtils::itos(m_dwPK_Device) );
            if( event_Impl.m_pClientSocket->ReceiveString( sResponse ) && sResponse.size()>=8 )
                m_pData->m_dwPK_Device_ControlledVia = atoi( sResponse.substr(7).c_str() );
            m_pData->m_bRunningWithoutDeviceData=true;
        }
        delete[] pConfig;
        pConfig = m_pEvent->GetDeviceList(Size);
        if( m_pData->m_AllDevices.SerializeRead(Size,pConfig)==false )
            return false;
        delete[] pConfig;
        m_pData->m_pEvent_Impl = m_pEvent;
        m_pcRequestSocket = new Event_Impl(m_dwPK_Device, DEVICETEMPLATE_Hue_Controller_CONST,m_sHostName);
        if( m_iInstanceID )
        {
            m_pEvent->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
            m_pcRequestSocket->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
        }
        PostConfigCleanup();
        return true;
    };
        HueController_Command(Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent, Router *pRouter, QObject*parent) : Command_Impl(pPrimaryDeviceCommand, pData, pEvent, pRouter) {};
    virtual ~HueController_Command() {};
    HueController_Event *GetEvents() { return (HueController_Event *) m_pEvent; };
    HueController_Data *GetData() { return (HueController_Data *) m_pData; };
    const char *GetClassName() { return "HueController_Command"; };
    virtual int PK_DeviceTemplate_get() { return DEVICETEMPLATE_Hue_Controller_CONST; };
    static int PK_DeviceTemplate_get_static() { return DEVICETEMPLATE_Hue_Controller_CONST; };
    virtual void ReceivedCommandForChild(DeviceData_Impl *pDeviceData_Impl,string &sCMD_Result,Message *pMessage) { };
    virtual void ReceivedUnknownCommand(string &sCMD_Result,Message *pMessage) { };
    Command_Impl *CreateCommand(int PK_DeviceTemplate, Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent);
    //Data accessors
    string DATA_Get_Device() { return GetData()->Get_Device(); }
    string DATA_Get_Username() { return GetData()->Get_Username(); }
    void DATA_Set_Username(string Value,bool bUpdateDatabase=false) { GetData()->Set_Username(Value); if( bUpdateDatabase ) SetDeviceDataInDB(m_dwPK_Device,127,Value); }
    string DATA_Get_Server_IP() { return GetData()->Get_Server_IP(); }
    //Event accessors
    void EVENT_Device_OnOff(bool bOnOff) { GetEvents()->Device_OnOff(bOnOff); }
    void EVENT_Reporting_Child_Devices(string sError_Message,string sText) { GetEvents()->Reporting_Child_Devices(sError_Message.c_str(),sText.c_str()); }
    void EVENT_Download_Config_Done(string sError_Message) { GetEvents()->Download_Config_Done(sError_Message.c_str()); }
    void EVENT_Device_Detected(string sMac_Address,string sText,string sIP_Address,int iPK_DeviceTemplate,string sVendorModelID,int iPK_CommMethod,int iPK_PnpProtocol,string sPNP_Serial_Number,string sDeviceData,string sCategory,string sSignature) { GetEvents()->Device_Detected(sMac_Address.c_str(),sText.c_str(),sIP_Address.c_str(),iPK_DeviceTemplate,sVendorModelID.c_str(),iPK_CommMethod,iPK_PnpProtocol,sPNP_Serial_Number.c_str(),sDeviceData.c_str(),sCategory.c_str(),sSignature.c_str()); }
    void EVENT_Device_Removed(string sMac_Address,string sText,int iPK_Device,string sIP_Address,int iPK_DeviceTemplate,string sVendorModelID,int iPK_CommMethod,int iPK_PnpProtocol,string sPNP_Serial_Number,string sDeviceData,string sCategory) { GetEvents()->Device_Removed(sMac_Address.c_str(),sText.c_str(),iPK_Device,sIP_Address.c_str(),iPK_DeviceTemplate,sVendorModelID.c_str(),iPK_CommMethod,iPK_PnpProtocol,sPNP_Serial_Number.c_str(),sDeviceData.c_str(),sCategory.c_str()); }
    void EVENT_Done_Detecting_Devices(string sSignature) { GetEvents()->Done_Detecting_Devices(sSignature.c_str()); }
    void EVENT_Brightness_Changed(int iValue) { GetEvents()->Brightness_Changed(iValue); }
    void EVENT_State_Changed(int iValue) { GetEvents()->State_Changed(iValue); }
    //Commands - Override these to handle commands from the server
    virtual void CMD_Set_Level(string sLevel,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_On(int iPK_Pipe,string sPK_Device_Pipes,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Off(int iPK_Pipe,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Mode(string sParameters,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Strobe(string sOnOff,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Report_Child_Devices(string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Download_Configuration(string sText,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Send_Command_To_Child(string sID,int iPK_Command,string sParameters,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Reset(string sArguments,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_StatusReport(string sArguments,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Set_Color_RGB(int iRed_Level,int iGreen_Level,int iBlue_Level,string &sCMD_Result,class Message *pMessage) {};
    virtual void CMD_Hue(string sLevel,int iHue,int iSaturation,string &sCMD_Result,class Message *pMessage) {};

    //This distributes a received message to your handler.
    virtual ReceivedMessageResult ReceivedMessage(class Message *pMessageOriginal)
    {
        map<long, string>::iterator itRepeat;
        if( Command_Impl::ReceivedMessage(pMessageOriginal)==rmr_Processed )
        {
            if( pMessageOriginal->m_eExpectedResponse==ER_ReplyMessage && !pMessageOriginal->m_bRespondedToMessage )
            {
                pMessageOriginal->m_bRespondedToMessage=true;
                Message *pMessageOut=new Message(m_dwPK_Device,pMessageOriginal->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                pMessageOut->m_mapParameters[0]="OK";
                SendMessage(pMessageOut);
            }
            else if( (pMessageOriginal->m_eExpectedResponse==ER_DeliveryConfirmation || pMessageOriginal->m_eExpectedResponse==ER_ReplyString) && !pMessageOriginal->m_bRespondedToMessage )
            {
                pMessageOriginal->m_bRespondedToMessage=true;
                SendString("OK");
            }
            return rmr_Processed;
        }
        int iHandled=0;
        for(int s=-1;s<(int) pMessageOriginal->m_vectExtraMessages.size(); ++s)
        {
            Message *pMessage = s>=0 ? pMessageOriginal->m_vectExtraMessages[s] : pMessageOriginal;
            if (pMessage->m_dwPK_Device_To==m_dwPK_Device && pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND)
            {
                // Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
                if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
                    return rmr_Buffered;
                switch(pMessage->m_dwID)
                {
                case COMMAND_Set_Level_CONST:
                    {
                        string sCMD_Result="OK";
                        string sLevel=pMessage->m_mapParameters[COMMANDPARAMETER_Level_CONST];
                        CMD_Set_Level(sLevel.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Set_Level(sLevel.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Generic_On_CONST:
                    {
                        string sCMD_Result="OK";
                        int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
                        string sPK_Device_Pipes=pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_Pipes_CONST];
                        CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Generic_Off_CONST:
                    {
                        string sCMD_Result="OK";
                        int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
                        CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Mode_CONST:
                    {
                        string sCMD_Result="OK";
                        string sParameters=pMessage->m_mapParameters[COMMANDPARAMETER_Parameters_CONST];
                        CMD_Mode(sParameters.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Mode(sParameters.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Strobe_CONST:
                    {
                        string sCMD_Result="OK";
                        string sOnOff=pMessage->m_mapParameters[COMMANDPARAMETER_OnOff_CONST];
                        CMD_Strobe(sOnOff.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Strobe(sOnOff.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Report_Child_Devices_CONST:
                    {
                        string sCMD_Result="OK";
                        CMD_Report_Child_Devices(sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Report_Child_Devices(sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Download_Configuration_CONST:
                    {
                        string sCMD_Result="OK";
                        string sText=pMessage->m_mapParameters[COMMANDPARAMETER_Text_CONST];
                        CMD_Download_Configuration(sText.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Download_Configuration(sText.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Send_Command_To_Child_CONST:
                    {
                        string sCMD_Result="OK";
                        string sID=pMessage->m_mapParameters[COMMANDPARAMETER_ID_CONST];
                        int iPK_Command=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Command_CONST].c_str());
                        string sParameters=pMessage->m_mapParameters[COMMANDPARAMETER_Parameters_CONST];
                        CMD_Send_Command_To_Child(sID.c_str(),iPK_Command,sParameters.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Send_Command_To_Child(sID.c_str(),iPK_Command,sParameters.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Reset_CONST:
                    {
                        string sCMD_Result="OK";
                        string sArguments=pMessage->m_mapParameters[COMMANDPARAMETER_Arguments_CONST];
                        CMD_Reset(sArguments.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Reset(sArguments.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_StatusReport_CONST:
                    {
                        string sCMD_Result="OK";
                        string sArguments=pMessage->m_mapParameters[COMMANDPARAMETER_Arguments_CONST];
                        CMD_StatusReport(sArguments.c_str(),sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_StatusReport(sArguments.c_str(),sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Set_Color_RGB_CONST:
                    {
                        string sCMD_Result="OK";
                        int iRed_Level=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Red_Level_CONST].c_str());
                        int iGreen_Level=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Green_Level_CONST].c_str());
                        int iBlue_Level=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Blue_Level_CONST].c_str());
                        CMD_Set_Color_RGB(iRed_Level,iGreen_Level,iBlue_Level,sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Set_Color_RGB(iRed_Level,iGreen_Level,iBlue_Level,sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                case COMMAND_Hue_CONST:
                    {
                        string sCMD_Result="OK";
                        string sLevel=pMessage->m_mapParameters[COMMANDPARAMETER_Level_CONST];
                        int iHue=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Hue_CONST].c_str());
                        int iSaturation=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_Saturation_CONST].c_str());
                        CMD_Hue(sLevel.c_str(),iHue,iSaturation,sCMD_Result,pMessage);
                        if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                            pMessageOut->m_mapParameters[0]=sCMD_Result;
                            SendMessage(pMessageOut);
                        }
                        else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                            SendString(sCMD_Result);
                        }
                        if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
                        {
                            int iRepeat=atoi(itRepeat->second.c_str());
                            for(int i=2;i<=iRepeat;++i)
                                CMD_Hue(sLevel.c_str(),iHue,iSaturation,sCMD_Result,pMessage);
                        }
                    };
                    iHandled++;
                    continue;
                }
                iHandled += (Command_Impl::ReceivedMessage(pMessage)==rmr_NotProcessed ? 0 : 1);
            }
            else if( pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND )
            {
                MapCommand_Impl::iterator it = m_mapCommandImpl_Children.find(pMessage->m_dwPK_Device_To);
                if( it!=m_mapCommandImpl_Children.end() && !(*it).second->m_bGeneric )
                {
                    Command_Impl *pCommand_Impl = (*it).second;
                    iHandled += pCommand_Impl->ReceivedMessage(pMessage);
            }
            else
            {
                DeviceData_Impl *pDeviceData_Impl = m_pData->FindChild(pMessage->m_dwPK_Device_To);
                string sCMD_Result="UNHANDLED";
                if( pDeviceData_Impl )
                {
                    // Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
                    if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
                        return rmr_Buffered;
                    ReceivedCommandForChild(pDeviceData_Impl,sCMD_Result,pMessage);
                }
                else
                    ReceivedUnknownCommand(sCMD_Result,pMessage);
                    if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
                    {
                            pMessage->m_bRespondedToMessage=true;
                        Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                        pMessageOut->m_mapParameters[0]=sCMD_Result;
                        SendMessage(pMessageOut);
                    }
                    else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
                        {
                            pMessage->m_bRespondedToMessage=true;
                        SendString(sCMD_Result);
                        }
                    if( sCMD_Result!="UNHANDLED" && sCMD_Result!="UNKNOWN DEVICE" )
                        iHandled++;
                }
            }
            if( iHandled==0 && !pMessage->m_bRespondedToMessage &&
            (pMessage->m_eExpectedResponse==ER_ReplyMessage || pMessage->m_eExpectedResponse==ER_ReplyString || pMessage->m_eExpectedResponse==ER_DeliveryConfirmation) )
            {
                pMessage->m_bRespondedToMessage=true;
                if( pMessage->m_eExpectedResponse==ER_ReplyMessage )
                {
                    Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
                    pMessageOut->m_mapParameters[0]="UNHANDLED";
                    SendMessage(pMessageOut);
                }
                else
                    SendString("UNHANDLED");
            }
        }
        return iHandled!=0 ? rmr_Processed : rmr_NotProcessed;
    }
}; // end class


}
#endif
