#ifndef DPMS_MonitorBase_h
#define DPMS_MonitorBase_h
#include "DeviceData_Impl.h"
#include "Message.h"
#include "Command_Impl.h"
#include "Logger.h"
#include "../pluto_main/Define_Command.h"
#include "../pluto_main/Define_CommandParameter.h"
#include "../pluto_main/Define_DeviceTemplate.h"
#include "../pluto_main/Define_Event.h"
#include "../pluto_main/Define_EventParameter.h"
#include "../pluto_main/Define_DeviceData.h"


/**
* THESE CLASSES ARE AUTOGENERATED WITH PLUTO DCEGEN APPLICATION
* THIS FILE SHOULD NOT BE MODIFIED MANUALLY
*/

namespace DCE
{

/**
* @brief OUR EVENT CLASS
*/

class DPMS_Monitor_Event : public Event_Impl
{
public:

	/**
	* @brief Constructors
	*/
	DPMS_Monitor_Event(int DeviceID, string ServerAddress, bool bConnectEventHandler=true) :
		Event_Impl(DeviceID, DEVICETEMPLATE_DPMS_Monitor_CONST, ServerAddress, bConnectEventHandler, SOCKET_TIMEOUT) {};
	DPMS_Monitor_Event(class ClientSocket *pOCClientSocket, int DeviceID) : Event_Impl(pOCClientSocket, DeviceID) {};

	/**
	* @brief Events builder method
	*/
	class Event_Impl *CreateEvent(unsigned long dwPK_DeviceTemplate, ClientSocket *pOCClientSocket, unsigned long dwDevice);

	/**
	* @brief Events methods for our device
	*/

};


/**
* @brief OUR DATA CLASS
*/

class DPMS_Monitor_Data : public DeviceData_Impl
{
public:

	/**
	* @brief No-op destructor
	*/
	virtual ~DPMS_Monitor_Data() {};

	/**
	* @brief Builder data method
	*/
	class DeviceData_Impl *CreateData(DeviceData_Impl *Parent, char *pDataBlock, 
		unsigned long AllocatedSize, char *CurrentPosition);

	/**
	* @brief Returns the id of the device template
	*/
	virtual int GetPK_DeviceList() { return DEVICETEMPLATE_DPMS_Monitor_CONST; } ;

	/**
	* @brief Returns the description of the device
	*/
	virtual const char *GetDeviceDescription() { return "DPMS_Monitor"; } ;

	/**
	* @brief Device data access methods:
	*/

	string Get_COM_Port_on_PC()
	{
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_COM_Port_on_PC_CONST);
	}

	int Get_FK_Device_Capture_Card_Port()
	{
		if( m_bRunningWithoutDeviceData )
			return atoi(m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_FK_Device_Capture_Card_Port_CONST).c_str());
		else
			return atoi(m_mapParameters[DEVICEDATA_FK_Device_Capture_Card_Port_CONST].c_str());
	}

	bool Get_Preserve_Aspect_Ratio()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Preserve_Aspect_Ratio_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Preserve_Aspect_Ratio_CONST]=="1" ? true : false);
	}

	string Get_AV_Adjustment_Rules()
	{
		if( m_bRunningWithoutDeviceData )
			return m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_AV_Adjustment_Rules_CONST);
		else
			return m_mapParameters[DEVICEDATA_AV_Adjustment_Rules_CONST];
	}

	bool Get_Dont_Consolidate_Media()
	{
		if( m_bRunningWithoutDeviceData )
			return (m_pEvent_Impl->GetDeviceDataFromDatabase(m_dwPK_Device,DEVICEDATA_Dont_Consolidate_Media_CONST)=="1" ? true : false);
		else
			return (m_mapParameters[DEVICEDATA_Dont_Consolidate_Media_CONST]=="1" ? true : false);
	}

};



//   OUR COMMAND CLASS 

class DPMS_Monitor_Command : public Command_Impl
{
public:
	DPMS_Monitor_Command(int DeviceID, string ServerAddress,bool bConnectEventHandler=true,bool bLocalMode=false,class Router *pRouter=NULL)
	: Command_Impl(DeviceID, ServerAddress, bLocalMode, pRouter)
	{
	}
	virtual bool GetConfig()
	{
		m_pData=NULL;
		m_pEvent = new DPMS_Monitor_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
		if( m_pEvent->m_dwPK_Device )
			m_dwPK_Device = m_pEvent->m_dwPK_Device;
		if( m_sIPAddress!=m_pEvent->m_pClientSocket->m_sIPAddress )	
			m_sIPAddress=m_pEvent->m_pClientSocket->m_sIPAddress;
		m_sMacAddress=m_pEvent->m_pClientSocket->m_sMacAddress;
		if( m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None )
		{
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice )
			{
				while( m_pEvent->m_pClientSocket->m_eLastError==cs_err_BadDevice && (m_dwPK_Device = DeviceIdInvalid())!=0 )
				{
					delete m_pEvent;
					m_pEvent = new DPMS_Monitor_Event(m_dwPK_Device, m_sHostName, !m_bLocalMode);
					if( m_pEvent->m_dwPK_Device )
						m_dwPK_Device = m_pEvent->m_dwPK_Device;
				}
			}
			if( m_pEvent->m_pClientSocket->m_eLastError==cs_err_NeedReload )
			{
				if( RouterNeedsReload() )
				{
					string sResponse;
					Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
					event_Impl.m_pClientSocket->SendString( "RELOAD" );
					if( !event_Impl.m_pClientSocket->ReceiveString( sResponse ) || sResponse!="OK" )
					{
						CannotReloadRouter();
						LoggerWrapper::GetInstance()->Write(LV_WARNING,"Reload request denied: %s",sResponse.c_str());
					}
				Sleep(10000);  // Give the router 10 seconds before we re-attempt, otherwise we'll get an error right away
				}	
			}
		}
		
		if( m_bLocalMode )
		{
			m_pData = new DPMS_Monitor_Data();
			return true;
		}
		if( (m_pEvent->m_pClientSocket->m_eLastError!=cs_err_None && m_pEvent->m_pClientSocket->m_eLastError!=cs_err_NeedReload) || m_pEvent->m_pClientSocket->m_Socket==INVALID_SOCKET )
			return false;

		int Size; char *pConfig = m_pEvent->GetConfig(Size);
		if( !pConfig )
			return false;
		m_pData = new DPMS_Monitor_Data();
		if( Size )
		{
			if( m_pData->SerializeRead(Size,pConfig)==false )
				return false;
		}
		else
		{
			m_pData->m_dwPK_Device=m_dwPK_Device;  // Assign this here since it didn't get it's own data
			string sResponse;
			Event_Impl event_Impl(DEVICEID_MESSAGESEND, 0, m_sHostName);
			event_Impl.m_pClientSocket->SendString( "PARENT " + StringUtils::itos(m_dwPK_Device) );
			if( event_Impl.m_pClientSocket->ReceiveString( sResponse ) && sResponse.size()>=8 )
				m_pData->m_dwPK_Device_ControlledVia = atoi( sResponse.substr(7).c_str() );
			m_pData->m_bRunningWithoutDeviceData=true;
		}
		delete[] pConfig;
		pConfig = m_pEvent->GetDeviceList(Size);
		if( m_pData->m_AllDevices.SerializeRead(Size,pConfig)==false )
			return false;
		delete[] pConfig;
		m_pData->m_pEvent_Impl = m_pEvent;
		m_pcRequestSocket = new Event_Impl(m_dwPK_Device, DEVICETEMPLATE_DPMS_Monitor_CONST,m_sHostName);
		if( m_iInstanceID )
		{
			m_pEvent->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
			m_pcRequestSocket->m_pClientSocket->SendString("INSTANCE " + StringUtils::itos(m_iInstanceID));
		}
		PostConfigCleanup();
		return true;
	};
	DPMS_Monitor_Command(Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent, Router *pRouter) : Command_Impl(pPrimaryDeviceCommand, pData, pEvent, pRouter) {};
	virtual ~DPMS_Monitor_Command() {};
	DPMS_Monitor_Event *GetEvents() { return (DPMS_Monitor_Event *) m_pEvent; };
	DPMS_Monitor_Data *GetData() { return (DPMS_Monitor_Data *) m_pData; };
	const char *GetClassName() { return "DPMS_Monitor_Command"; };
	virtual int PK_DeviceTemplate_get() { return DEVICETEMPLATE_DPMS_Monitor_CONST; };
	static int PK_DeviceTemplate_get_static() { return DEVICETEMPLATE_DPMS_Monitor_CONST; };
	virtual void ReceivedCommandForChild(DeviceData_Impl *pDeviceData_Impl,string &sCMD_Result,Message *pMessage) { };
	virtual void ReceivedUnknownCommand(string &sCMD_Result,Message *pMessage) { };
	Command_Impl *CreateCommand(int PK_DeviceTemplate, Command_Impl *pPrimaryDeviceCommand, DeviceData_Impl *pData, Event_Impl *pEvent);
	//Data accessors
	string DATA_Get_COM_Port_on_PC() { return GetData()->Get_COM_Port_on_PC(); }
	int DATA_Get_FK_Device_Capture_Card_Port() { return GetData()->Get_FK_Device_Capture_Card_Port(); }
	bool DATA_Get_Preserve_Aspect_Ratio() { return GetData()->Get_Preserve_Aspect_Ratio(); }
	string DATA_Get_AV_Adjustment_Rules() { return GetData()->Get_AV_Adjustment_Rules(); }
	bool DATA_Get_Dont_Consolidate_Media() { return GetData()->Get_Dont_Consolidate_Media(); }
	//Event accessors
	//Commands - Override these to handle commands from the server
	virtual void CMD_On(int iPK_Pipe,string sPK_Device_Pipes,string &sCMD_Result,class Message *pMessage) {};
	virtual void CMD_Off(int iPK_Pipe,string &sCMD_Result,class Message *pMessage) {};

	//This distributes a received message to your handler.
	virtual ReceivedMessageResult ReceivedMessage(class Message *pMessageOriginal)
	{
		map<long, string>::iterator itRepeat;
		if( Command_Impl::ReceivedMessage(pMessageOriginal)==rmr_Processed )
		{
			if( pMessageOriginal->m_eExpectedResponse==ER_ReplyMessage && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				Message *pMessageOut=new Message(m_dwPK_Device,pMessageOriginal->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
				pMessageOut->m_mapParameters[0]="OK";
				SendMessage(pMessageOut);
			}
			else if( (pMessageOriginal->m_eExpectedResponse==ER_DeliveryConfirmation || pMessageOriginal->m_eExpectedResponse==ER_ReplyString) && !pMessageOriginal->m_bRespondedToMessage )
			{
				pMessageOriginal->m_bRespondedToMessage=true;
				SendString("OK");
			}
			return rmr_Processed;
		}
		int iHandled=0;
		for(int s=-1;s<(int) pMessageOriginal->m_vectExtraMessages.size(); ++s)
		{
			Message *pMessage = s>=0 ? pMessageOriginal->m_vectExtraMessages[s] : pMessageOriginal;
			if (pMessage->m_dwPK_Device_To==m_dwPK_Device && pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND)
			{
				// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
				if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
					return rmr_Buffered;
				switch(pMessage->m_dwID)
				{
				case COMMAND_Generic_On_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
						string sPK_Device_Pipes=pMessage->m_mapParameters[COMMANDPARAMETER_PK_Device_Pipes_CONST];
						CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_On(iPK_Pipe,sPK_Device_Pipes.c_str(),sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				case COMMAND_Generic_Off_CONST:
					{
						string sCMD_Result="OK";
						int iPK_Pipe=atoi(pMessage->m_mapParameters[COMMANDPARAMETER_PK_Pipe_CONST].c_str());
						CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
						if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
							pMessageOut->m_mapParameters[0]=sCMD_Result;
							SendMessage(pMessageOut);
						}
						else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
							SendString(sCMD_Result);
						}
						if( (itRepeat=pMessage->m_mapParameters.find(COMMANDPARAMETER_Repeat_Command_CONST))!=pMessage->m_mapParameters.end() )
						{
							int iRepeat=atoi(itRepeat->second.c_str());
							for(int i=2;i<=iRepeat;++i)
								CMD_Off(iPK_Pipe,sCMD_Result,pMessage);
						}
					};
					iHandled++;
					continue;
				}
				iHandled += (Command_Impl::ReceivedMessage(pMessage)==rmr_NotProcessed ? 0 : 1);
			}
			else if( pMessage->m_dwMessage_Type == MESSAGETYPE_COMMAND )
			{
				MapCommand_Impl::iterator it = m_mapCommandImpl_Children.find(pMessage->m_dwPK_Device_To);
				if( it!=m_mapCommandImpl_Children.end() && !(*it).second->m_bGeneric )
				{
					Command_Impl *pCommand_Impl = (*it).second;
					iHandled += pCommand_Impl->ReceivedMessage(pMessage);
			}
			else
			{
				DeviceData_Impl *pDeviceData_Impl = m_pData->FindChild(pMessage->m_dwPK_Device_To);
				string sCMD_Result="UNHANDLED";
				if( pDeviceData_Impl )
				{
					// Only buffer single messages, otherwise the caller won't know which messages were buffered and which weren't
					if( m_pMessageBuffer && pMessage->m_bCanBuffer && pMessageOriginal->m_vectExtraMessages.size()==1 && m_pMessageBuffer->BufferMessage(pMessage) )
						return rmr_Buffered;
					ReceivedCommandForChild(pDeviceData_Impl,sCMD_Result,pMessage);
				}
				else
					ReceivedUnknownCommand(sCMD_Result,pMessage);
					if( pMessage->m_eExpectedResponse==ER_ReplyMessage && !pMessage->m_bRespondedToMessage )
					{
							pMessage->m_bRespondedToMessage=true;
						Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
						pMessageOut->m_mapParameters[0]=sCMD_Result;
						SendMessage(pMessageOut);
					}
					else if( (pMessage->m_eExpectedResponse==ER_DeliveryConfirmation || pMessage->m_eExpectedResponse==ER_ReplyString) && !pMessage->m_bRespondedToMessage )
						{
							pMessage->m_bRespondedToMessage=true;
						SendString(sCMD_Result);
						}
					if( sCMD_Result!="UNHANDLED" && sCMD_Result!="UNKNOWN DEVICE" )
						iHandled++;
				}
			}
			if( iHandled==0 && !pMessage->m_bRespondedToMessage &&
			(pMessage->m_eExpectedResponse==ER_ReplyMessage || pMessage->m_eExpectedResponse==ER_ReplyString || pMessage->m_eExpectedResponse==ER_DeliveryConfirmation) )
			{
				pMessage->m_bRespondedToMessage=true;
				if( pMessage->m_eExpectedResponse==ER_ReplyMessage )
				{
					Message *pMessageOut=new Message(m_dwPK_Device,pMessage->m_dwPK_Device_From,PRIORITY_NORMAL,MESSAGETYPE_REPLY,0,0);
					pMessageOut->m_mapParameters[0]="UNHANDLED";
					SendMessage(pMessageOut);
				}
				else
					SendString("UNHANDLED");
			}
		}
		return iHandled!=0 ? rmr_Processed : rmr_NotProcessed;
	}
}; // end class


}
#endif
