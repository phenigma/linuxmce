Description: Use system's fstrcmp() instead of the embedded one
 .
Author: Balint Reczey <balint@balintreczey.hu>
Forwarded: not-needed
--- a/src/util/StringUtils.cpp
+++ b/src/util/StringUtils.cpp
@@ -30,7 +30,7 @@
 
 
 #include "StringUtils.h"
-#include "fstrcmp.h"
+#include <fstrcmp.h>
 #include <locale>
 
 #include <assert.h>
@@ -1095,7 +1095,7 @@
 
 double StringUtils::CompareFuzzy(const std::string &left, const std::string &right)
 {
-  return (0.5 + fstrcmp(left.c_str(), right.c_str(), 0.0) * (left.length() + right.length())) / 2.0;
+  return (0.5 + fstrcmp(left.c_str(), right.c_str()) * (left.length() + right.length())) / 2.0;
 }
 
 int StringUtils::FindBestMatch(const std::string &str, const vector<string> &strings, double &matchscore)
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -26,7 +26,7 @@
 IF(WIN32)
   LIST(APPEND platform_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include/platform/windows")
 ENDIF(WIN32)
-set(platform_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
+set(platform_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} fstrcmp)
 
 if(NOT ${CORE_SYSTEM_NAME} STREQUAL "")
   if(${CORE_SYSTEM_NAME} STREQUAL "darwin" OR ${CORE_SYSTEM_NAME} STREQUAL "ios")
@@ -34,7 +34,7 @@
   endif()
 endif()
 
-set(SOURCES src/util/fstrcmp.c
+set(SOURCES
             src/util/StringUtils.cpp)
 
 add_library(platform ${SOURCES} ${PLAT_SOURCES})
